
CarStaticDesign.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001298  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00001298  0000132c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800062  00800062  0000132e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000132e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001360  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  0000139c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022cc  00000000  00000000  0000156c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f90  00000000  00000000  00003838  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017c5  00000000  00000000  000047c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000424  00000000  00000000  00005f90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d85  00000000  00000000  000063b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e7e  00000000  00000000  00007139  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00008fb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__vector_3>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__vector_5>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	ce 05       	cpc	r28, r14
      56:	d2 05       	cpc	r29, r2
      58:	d7 05       	cpc	r29, r7
      5a:	dc 05       	cpc	r29, r12
      5c:	e1 05       	cpc	r30, r1
      5e:	e6 05       	cpc	r30, r6
      60:	eb 05       	cpc	r30, r11
      62:	f0 05       	cpc	r31, r0

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e8 e9       	ldi	r30, 0x98	; 152
      78:	f2 e1       	ldi	r31, 0x12	; 18
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a2 36       	cpi	r26, 0x62	; 98
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	20 e0       	ldi	r18, 0x00	; 0
      88:	a2 e6       	ldi	r26, 0x62	; 98
      8a:	b0 e0       	ldi	r27, 0x00	; 0
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a2 37       	cpi	r26, 0x72	; 114
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 c0 02 	call	0x580	; 0x580 <main>
      9a:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <Car_SM_Init>:
	*	1-initiate steering
	*	2-initiate	ultraSonic 
	*/
	uint8_t fun_status = OK;
	
	fun_status = Steering_Init();
      a2:	0e 94 be 00 	call	0x17c	; 0x17c <Steering_Init>
	fun_status = Us_Init();
      a6:	0e 94 3a 02 	call	0x474	; 0x474 <Us_Init>
	return fun_status;
}
      aa:	08 95       	ret

000000ac <Car_SM_Update>:


ERROR_STATUS Car_SM_Update(void)
{
      ac:	df 92       	push	r13
      ae:	ef 92       	push	r14
      b0:	ff 92       	push	r15
      b2:	0f 93       	push	r16
      b4:	1f 93       	push	r17
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
      ba:	cd b7       	in	r28, 0x3d	; 61
      bc:	de b7       	in	r29, 0x3e	; 62
      be:	28 97       	sbiw	r28, 0x08	; 8
      c0:	0f b6       	in	r0, 0x3f	; 63
      c2:	f8 94       	cli
      c4:	de bf       	out	0x3e, r29	; 62
      c6:	0f be       	out	0x3f, r0	; 63
      c8:	cd bf       	out	0x3d, r28	; 61
	*	2-git ultrasonic dissent
	*	3-check for distant value to determine state machine state
	*	4-switch for state and excite crossponding actions
	*/
		uint64_t distant;
		Us_Trigger();
      ca:	0e 94 64 02 	call	0x4c8	; 0x4c8 <Us_Trigger>
		Us_GetDistance(&distant);
      ce:	ce 01       	movw	r24, r28
      d0:	01 96       	adiw	r24, 0x01	; 1
      d2:	0e 94 75 02 	call	0x4ea	; 0x4ea <Us_GetDistance>
		
		if(distant >= distent_0 && distant <= distent_25)
      d6:	d9 80       	ldd	r13, Y+1	; 0x01
      d8:	ea 80       	ldd	r14, Y+2	; 0x02
      da:	fb 80       	ldd	r15, Y+3	; 0x03
      dc:	0c 81       	ldd	r16, Y+4	; 0x04
      de:	1d 81       	ldd	r17, Y+5	; 0x05
      e0:	be 81       	ldd	r27, Y+6	; 0x06
      e2:	ff 81       	ldd	r31, Y+7	; 0x07
      e4:	e8 85       	ldd	r30, Y+8	; 0x08
      e6:	2d 2d       	mov	r18, r13
      e8:	3e 2d       	mov	r19, r14
      ea:	4f 2d       	mov	r20, r15
      ec:	50 2f       	mov	r21, r16
      ee:	61 2f       	mov	r22, r17
      f0:	7b 2f       	mov	r23, r27
      f2:	8f 2f       	mov	r24, r31
      f4:	9e 2f       	mov	r25, r30
      f6:	a9 e1       	ldi	r26, 0x19	; 25
      f8:	0e 94 2f 09 	call	0x125e	; 0x125e <__cmpdi2_s8>
      fc:	09 f0       	breq	.+2      	; 0x100 <Car_SM_Update+0x54>
      fe:	38 f4       	brcc	.+14     	; 0x10e <Car_SM_Update+0x62>
		{
			car_state = state_move_backword;
     100:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
			
		/*switch for state machine state to determine taken action*/	
		switch(car_state)
		{
			case state_move_backword:
				Steering_SteerCar(CAR_BACKWARD,STEERING_SPEED);
     104:	6e e1       	ldi	r22, 0x1E	; 30
     106:	82 e0       	ldi	r24, 0x02	; 2
     108:	0e 94 cd 00 	call	0x19a	; 0x19a <Steering_SteerCar>
			break;
     10c:	1f c0       	rjmp	.+62     	; 0x14c <Car_SM_Update+0xa0>
		
		if(distant >= distent_0 && distant <= distent_25)
		{
			car_state = state_move_backword;
		}
		else if(distant >distent_25 && distant <= distent_30)
     10e:	2d 2d       	mov	r18, r13
     110:	3e 2d       	mov	r19, r14
     112:	4f 2d       	mov	r20, r15
     114:	50 2f       	mov	r21, r16
     116:	61 2f       	mov	r22, r17
     118:	7b 2f       	mov	r23, r27
     11a:	8f 2f       	mov	r24, r31
     11c:	9e 2f       	mov	r25, r30
     11e:	a6 ee       	ldi	r26, 0xE6	; 230
     120:	0e 94 23 09 	call	0x1246	; 0x1246 <__adddi3_s8>
     124:	a4 e0       	ldi	r26, 0x04	; 4
     126:	0e 94 2f 09 	call	0x125e	; 0x125e <__cmpdi2_s8>
     12a:	09 f0       	breq	.+2      	; 0x12e <Car_SM_Update+0x82>
     12c:	40 f4       	brcc	.+16     	; 0x13e <Car_SM_Update+0x92>
		{
			car_state = state_turn;
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		{
			case state_move_backword:
				Steering_SteerCar(CAR_BACKWARD,STEERING_SPEED);
			break;
			case  state_turn:
				Steering_SteerCar(CAR_RIGHT,STEERING_SPEED);
     134:	6e e1       	ldi	r22, 0x1E	; 30
     136:	83 e0       	ldi	r24, 0x03	; 3
     138:	0e 94 cd 00 	call	0x19a	; 0x19a <Steering_SteerCar>
			break;
     13c:	07 c0       	rjmp	.+14     	; 0x14c <Car_SM_Update+0xa0>
		{
			car_state = state_turn;
		}
		else 
		{
			car_state = state_move_forward;		
     13e:	82 e0       	ldi	r24, 0x02	; 2
     140:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			break;
			case  state_turn:
				Steering_SteerCar(CAR_RIGHT,STEERING_SPEED);
			break;
			case state_move_forward:
				Steering_SteerCar(CAR_FORWARD,STEERING_SPEED);
     144:	6e e1       	ldi	r22, 0x1E	; 30
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	0e 94 cd 00 	call	0x19a	; 0x19a <Steering_SteerCar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     14c:	2f ef       	ldi	r18, 0xFF	; 255
     14e:	81 ee       	ldi	r24, 0xE1	; 225
     150:	94 e0       	ldi	r25, 0x04	; 4
     152:	21 50       	subi	r18, 0x01	; 1
     154:	80 40       	sbci	r24, 0x00	; 0
     156:	90 40       	sbci	r25, 0x00	; 0
     158:	e1 f7       	brne	.-8      	; 0x152 <Car_SM_Update+0xa6>
     15a:	00 c0       	rjmp	.+0      	; 0x15c <Car_SM_Update+0xb0>
     15c:	00 00       	nop
			break;
		}
	/*delay to take 10 samples per seconed*/
	_delay_ms(DELAY_HUNDRED);
	return fun_status;
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	28 96       	adiw	r28, 0x08	; 8
     162:	0f b6       	in	r0, 0x3f	; 63
     164:	f8 94       	cli
     166:	de bf       	out	0x3e, r29	; 62
     168:	0f be       	out	0x3f, r0	; 63
     16a:	cd bf       	out	0x3d, r28	; 61
     16c:	df 91       	pop	r29
     16e:	cf 91       	pop	r28
     170:	1f 91       	pop	r17
     172:	0f 91       	pop	r16
     174:	ff 90       	pop	r15
     176:	ef 90       	pop	r14
     178:	df 90       	pop	r13
     17a:	08 95       	ret

0000017c <Steering_Init>:

ERROR_STATUS Steering_Init(void)
{
	uint8_t fun_status = OK;
	/*Motor 1 init*/
	fun_status = Motor_Init(MOTOR_1);
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	0e 94 27 01 	call	0x24e	; 0x24e <Motor_Init>
	fun_status = Motor_Direction(MOTOR_1,MOTOR_FORWARD);
     182:	61 e0       	ldi	r22, 0x01	; 1
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Motor_Direction>
	/*Motor 2 init*/
	fun_status = Motor_Init(MOTOR_2);
     18a:	82 e0       	ldi	r24, 0x02	; 2
     18c:	0e 94 27 01 	call	0x24e	; 0x24e <Motor_Init>
	fun_status = Motor_Direction(MOTOR_2,MOTOR_FORWARD);
     190:	61 e0       	ldi	r22, 0x01	; 1
     192:	82 e0       	ldi	r24, 0x02	; 2
     194:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Motor_Direction>
	return fun_status;
}
     198:	08 95       	ret

0000019a <Steering_SteerCar>:

ERROR_STATUS Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed)
{
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	c8 2f       	mov	r28, r24
     1a0:	d6 2f       	mov	r29, r22
	uint8_t fun_status = OK;
	if(gu8_firstTime)
     1a2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1a6:	88 23       	and	r24, r24
     1a8:	49 f0       	breq	.+18     	; 0x1bc <Steering_SteerCar+0x22>
	{
		gu8_firstTime = FALSE;
     1aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		/*if first time start two motors*/
		Motor_Start(MOTOR_1,speed);
     1ae:	81 e0       	ldi	r24, 0x01	; 1
     1b0:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <Motor_Start>
		Motor_Start(MOTOR_2,speed);
     1b4:	6d 2f       	mov	r22, r29
     1b6:	82 e0       	ldi	r24, 0x02	; 2
     1b8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <Motor_Start>
	}
	
	/*set motor speed*/
	Motor_SpeedUpdate(MOTOR_1,speed);
     1bc:	6d 2f       	mov	r22, r29
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <Motor_SpeedUpdate>
	Motor_SpeedUpdate(MOTOR_2,speed);
     1c4:	6d 2f       	mov	r22, r29
     1c6:	82 e0       	ldi	r24, 0x02	; 2
     1c8:	0e 94 f6 01 	call	0x3ec	; 0x3ec <Motor_SpeedUpdate>
	
	
	switch(Steering_CarCmd)
     1cc:	c2 30       	cpi	r28, 0x02	; 2
     1ce:	e9 f0       	breq	.+58     	; 0x20a <Steering_SteerCar+0x70>
     1d0:	28 f4       	brcc	.+10     	; 0x1dc <Steering_SteerCar+0x42>
     1d2:	cc 23       	and	r28, r28
     1d4:	41 f0       	breq	.+16     	; 0x1e6 <Steering_SteerCar+0x4c>
     1d6:	c1 30       	cpi	r28, 0x01	; 1
     1d8:	71 f0       	breq	.+28     	; 0x1f6 <Steering_SteerCar+0x5c>
     1da:	35 c0       	rjmp	.+106    	; 0x246 <Steering_SteerCar+0xac>
     1dc:	c3 30       	cpi	r28, 0x03	; 3
     1de:	f9 f0       	breq	.+62     	; 0x21e <Steering_SteerCar+0x84>
     1e0:	c4 30       	cpi	r28, 0x04	; 4
     1e2:	39 f1       	breq	.+78     	; 0x232 <Steering_SteerCar+0x98>
     1e4:	30 c0       	rjmp	.+96     	; 0x246 <Steering_SteerCar+0xac>
	{
		case CAR_STOP:
			Motor_Stop(MOTOR_1);
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	0e 94 19 02 	call	0x432	; 0x432 <Motor_Stop>
			Motor_Stop(MOTOR_2);
     1ec:	82 e0       	ldi	r24, 0x02	; 2
     1ee:	0e 94 19 02 	call	0x432	; 0x432 <Motor_Stop>
	return fun_status;
}

ERROR_STATUS Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed)
{
	uint8_t fun_status = OK;
     1f2:	81 e0       	ldi	r24, 0x01	; 1
	switch(Steering_CarCmd)
	{
		case CAR_STOP:
			Motor_Stop(MOTOR_1);
			Motor_Stop(MOTOR_2);
		break;
     1f4:	29 c0       	rjmp	.+82     	; 0x248 <Steering_SteerCar+0xae>
		case CAR_FORWARD:
			Motor_Direction(MOTOR_1,MOTOR_FORWARD);
     1f6:	61 e0       	ldi	r22, 0x01	; 1
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Motor_Direction>
			Motor_Direction(MOTOR_2,MOTOR_FORWARD);			
     1fe:	61 e0       	ldi	r22, 0x01	; 1
     200:	82 e0       	ldi	r24, 0x02	; 2
     202:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Motor_Direction>
	return fun_status;
}

ERROR_STATUS Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed)
{
	uint8_t fun_status = OK;
     206:	81 e0       	ldi	r24, 0x01	; 1
			Motor_Stop(MOTOR_2);
		break;
		case CAR_FORWARD:
			Motor_Direction(MOTOR_1,MOTOR_FORWARD);
			Motor_Direction(MOTOR_2,MOTOR_FORWARD);			
		break;
     208:	1f c0       	rjmp	.+62     	; 0x248 <Steering_SteerCar+0xae>
		case CAR_BACKWARD:
			Motor_Direction(MOTOR_1,MOTOR_BACKWARD);
     20a:	62 e0       	ldi	r22, 0x02	; 2
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Motor_Direction>
			Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
     212:	62 e0       	ldi	r22, 0x02	; 2
     214:	82 e0       	ldi	r24, 0x02	; 2
     216:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Motor_Direction>
	return fun_status;
}

ERROR_STATUS Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed)
{
	uint8_t fun_status = OK;
     21a:	81 e0       	ldi	r24, 0x01	; 1
			Motor_Direction(MOTOR_2,MOTOR_FORWARD);			
		break;
		case CAR_BACKWARD:
			Motor_Direction(MOTOR_1,MOTOR_BACKWARD);
			Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
		break;
     21c:	15 c0       	rjmp	.+42     	; 0x248 <Steering_SteerCar+0xae>
		case CAR_RIGHT:
			Motor_Direction(MOTOR_1,MOTOR_BACKWARD);
     21e:	62 e0       	ldi	r22, 0x02	; 2
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Motor_Direction>
			Motor_Direction(MOTOR_2,MOTOR_FORWARD);
     226:	61 e0       	ldi	r22, 0x01	; 1
     228:	82 e0       	ldi	r24, 0x02	; 2
     22a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Motor_Direction>
	return fun_status;
}

ERROR_STATUS Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed)
{
	uint8_t fun_status = OK;
     22e:	81 e0       	ldi	r24, 0x01	; 1
			Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
		break;
		case CAR_RIGHT:
			Motor_Direction(MOTOR_1,MOTOR_BACKWARD);
			Motor_Direction(MOTOR_2,MOTOR_FORWARD);
		break;
     230:	0b c0       	rjmp	.+22     	; 0x248 <Steering_SteerCar+0xae>
		case CAR_LEFT:
			Motor_Direction(MOTOR_1,MOTOR_FORWARD);
     232:	61 e0       	ldi	r22, 0x01	; 1
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Motor_Direction>
			Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
     23a:	62 e0       	ldi	r22, 0x02	; 2
     23c:	82 e0       	ldi	r24, 0x02	; 2
     23e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Motor_Direction>
	return fun_status;
}

ERROR_STATUS Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed)
{
	uint8_t fun_status = OK;
     242:	81 e0       	ldi	r24, 0x01	; 1
			Motor_Direction(MOTOR_2,MOTOR_FORWARD);
		break;
		case CAR_LEFT:
			Motor_Direction(MOTOR_1,MOTOR_FORWARD);
			Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
		break;
     244:	01 c0       	rjmp	.+2      	; 0x248 <Steering_SteerCar+0xae>
		default:
			fun_status = NOK;
     246:	8f ef       	ldi	r24, 0xFF	; 255
		break;
	}
	
	return fun_status;
     248:	df 91       	pop	r29
     24a:	cf 91       	pop	r28
     24c:	08 95       	ret

0000024e <Motor_Init>:
/*- APIs IMPLEMENTATION -----------------------------------*/



 ERROR_STATUS Motor_Init(uint8_t Motor_Number)
{
     24e:	0f 93       	push	r16
     250:	1f 93       	push	r17
     252:	cf 93       	push	r28
	uint8_t fun_status = OK;
	

	if(Motor_Number > MOTOR_2)
     254:	83 30       	cpi	r24, 0x03	; 3
     256:	c0 f5       	brcc	.+112    	; 0x2c8 <Motor_Init+0x7a>
	{
		fun_status = NOK;
	}
	else
	{
		switch(Motor_Number)
     258:	81 30       	cpi	r24, 0x01	; 1
     25a:	19 f0       	breq	.+6      	; 0x262 <Motor_Init+0x14>
     25c:	82 30       	cpi	r24, 0x02	; 2
     25e:	71 f0       	breq	.+28     	; 0x27c <Motor_Init+0x2e>
     260:	1a c0       	rjmp	.+52     	; 0x296 <Motor_Init+0x48>
		{
			case MOTOR_1:
				DIO_cfg.GPIO = MOTOR_EN_1_GPIO;
     262:	e7 e6       	ldi	r30, 0x67	; 103
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	83 e0       	ldi	r24, 0x03	; 3
     268:	80 83       	st	Z, r24
				DIO_cfg.dir  = OUTPUT;
     26a:	8f ef       	ldi	r24, 0xFF	; 255
     26c:	82 83       	std	Z+2, r24	; 0x02
				DIO_cfg.pins = (MOTOR_OUT_1A_BIT | MOTOR_OUT_1B_BIT | MOTOR_EN_1_BIT);
     26e:	8c e1       	ldi	r24, 0x1C	; 28
     270:	81 83       	std	Z+1, r24	; 0x01
				motor_1_init_status = TRUE;
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <motor_1_init_status>



 ERROR_STATUS Motor_Init(uint8_t Motor_Number)
{
	uint8_t fun_status = OK;
     278:	c1 e0       	ldi	r28, 0x01	; 1
			case MOTOR_1:
				DIO_cfg.GPIO = MOTOR_EN_1_GPIO;
				DIO_cfg.dir  = OUTPUT;
				DIO_cfg.pins = (MOTOR_OUT_1A_BIT | MOTOR_OUT_1B_BIT | MOTOR_EN_1_BIT);
				motor_1_init_status = TRUE;
			break;
     27a:	0e c0       	rjmp	.+28     	; 0x298 <Motor_Init+0x4a>
			case MOTOR_2:
				DIO_cfg.GPIO = MOTOR_EN_2_GPIO;
     27c:	e7 e6       	ldi	r30, 0x67	; 103
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	83 e0       	ldi	r24, 0x03	; 3
     282:	80 83       	st	Z, r24
				DIO_cfg.dir  = OUTPUT;
     284:	8f ef       	ldi	r24, 0xFF	; 255
     286:	82 83       	std	Z+2, r24	; 0x02
				DIO_cfg.pins = (MOTOR_OUT_2B_BIT|MOTOR_OUT_2A_BIT|MOTOR_EN_2_BIT);
     288:	80 ee       	ldi	r24, 0xE0	; 224
     28a:	81 83       	std	Z+1, r24	; 0x01
				motor_2_init_status = TRUE;
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <motor_2_init_status>



 ERROR_STATUS Motor_Init(uint8_t Motor_Number)
{
	uint8_t fun_status = OK;
     292:	c1 e0       	ldi	r28, 0x01	; 1
			case MOTOR_2:
				DIO_cfg.GPIO = MOTOR_EN_2_GPIO;
				DIO_cfg.dir  = OUTPUT;
				DIO_cfg.pins = (MOTOR_OUT_2B_BIT|MOTOR_OUT_2A_BIT|MOTOR_EN_2_BIT);
				motor_2_init_status = TRUE;
			break;
     294:	01 c0       	rjmp	.+2      	; 0x298 <Motor_Init+0x4a>
			default:
			fun_status = NOK;
     296:	cf ef       	ldi	r28, 0xFF	; 255
			break;
		}
			pwm_cfg.Channel = PWM_CH1A_B;
     298:	05 e6       	ldi	r16, 0x65	; 101
     29a:	10 e0       	ldi	r17, 0x00	; 0
     29c:	83 e0       	ldi	r24, 0x03	; 3
     29e:	f8 01       	movw	r30, r16
     2a0:	80 83       	st	Z, r24
			pwm_cfg.Prescaler = PWM_PRESCALER_8;
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	81 83       	std	Z+1, r24	; 0x01
			Pwm_Init(&pwm_cfg);
     2a6:	c8 01       	movw	r24, r16
     2a8:	0e 94 95 03 	call	0x72a	; 0x72a <Pwm_Init>
			DIO_init(&DIO_cfg);
     2ac:	87 e6       	ldi	r24, 0x67	; 103
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	0e 94 c6 02 	call	0x58c	; 0x58c <DIO_init>
			Pwm_Start(pwm_cfg.Channel,ZERO,MOTOR_FREQ);
     2b4:	22 e3       	ldi	r18, 0x32	; 50
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	40 e0       	ldi	r20, 0x00	; 0
     2ba:	50 e0       	ldi	r21, 0x00	; 0
     2bc:	60 e0       	ldi	r22, 0x00	; 0
     2be:	f8 01       	movw	r30, r16
     2c0:	80 81       	ld	r24, Z
     2c2:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <Pwm_Start>
     2c6:	01 c0       	rjmp	.+2      	; 0x2ca <Motor_Init+0x7c>
	uint8_t fun_status = OK;
	

	if(Motor_Number > MOTOR_2)
	{
		fun_status = NOK;
     2c8:	cf ef       	ldi	r28, 0xFF	; 255
			Pwm_Init(&pwm_cfg);
			DIO_init(&DIO_cfg);
			Pwm_Start(pwm_cfg.Channel,ZERO,MOTOR_FREQ);
	}
	return fun_status;
}
     2ca:	8c 2f       	mov	r24, r28
     2cc:	cf 91       	pop	r28
     2ce:	1f 91       	pop	r17
     2d0:	0f 91       	pop	r16
     2d2:	08 95       	ret

000002d4 <Motor_Direction>:

ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{
	uint8_t fun_status = OK;
	if(Motor_Number > MOTOR_2 ||  Motor_Direction > MOTOR_BACKWARD)
     2d4:	83 30       	cpi	r24, 0x03	; 3
     2d6:	08 f0       	brcs	.+2      	; 0x2da <Motor_Direction+0x6>
     2d8:	5c c0       	rjmp	.+184    	; 0x392 <Motor_Direction+0xbe>
     2da:	63 30       	cpi	r22, 0x03	; 3
     2dc:	08 f0       	brcs	.+2      	; 0x2e0 <Motor_Direction+0xc>
     2de:	5b c0       	rjmp	.+182    	; 0x396 <Motor_Direction+0xc2>
	{
		fun_status = NOK;
	}
	else
	{
		switch(Motor_Number)
     2e0:	81 30       	cpi	r24, 0x01	; 1
     2e2:	19 f0       	breq	.+6      	; 0x2ea <Motor_Direction+0x16>
     2e4:	82 30       	cpi	r24, 0x02	; 2
     2e6:	59 f1       	breq	.+86     	; 0x33e <Motor_Direction+0x6a>
     2e8:	58 c0       	rjmp	.+176    	; 0x39a <Motor_Direction+0xc6>
		{
			case MOTOR_1:
				switch(Motor_Direction)
     2ea:	61 30       	cpi	r22, 0x01	; 1
     2ec:	21 f0       	breq	.+8      	; 0x2f6 <Motor_Direction+0x22>
     2ee:	d8 f0       	brcs	.+54     	; 0x326 <Motor_Direction+0x52>
     2f0:	62 30       	cpi	r22, 0x02	; 2
     2f2:	69 f0       	breq	.+26     	; 0x30e <Motor_Direction+0x3a>
     2f4:	54 c0       	rjmp	.+168    	; 0x39e <Motor_Direction+0xca>
				{
					case MOTOR_FORWARD:
					DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,HIGH);
     2f6:	4f ef       	ldi	r20, 0xFF	; 255
     2f8:	64 e0       	ldi	r22, 0x04	; 4
     2fa:	83 e0       	ldi	r24, 0x03	; 3
     2fc:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_Write>
					DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
     300:	40 e0       	ldi	r20, 0x00	; 0
     302:	68 e0       	ldi	r22, 0x08	; 8
     304:	83 e0       	ldi	r24, 0x03	; 3
     306:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_Write>
	return fun_status;
}

ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{
	uint8_t fun_status = OK;
     30a:	81 e0       	ldi	r24, 0x01	; 1
				switch(Motor_Direction)
				{
					case MOTOR_FORWARD:
					DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,HIGH);
					DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
					break;
     30c:	08 95       	ret
					case MOTOR_BACKWARD:
					DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
     30e:	40 e0       	ldi	r20, 0x00	; 0
     310:	64 e0       	ldi	r22, 0x04	; 4
     312:	83 e0       	ldi	r24, 0x03	; 3
     314:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_Write>
					DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,HIGH);
     318:	4f ef       	ldi	r20, 0xFF	; 255
     31a:	68 e0       	ldi	r22, 0x08	; 8
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_Write>
	return fun_status;
}

ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{
	uint8_t fun_status = OK;
     322:	81 e0       	ldi	r24, 0x01	; 1
					DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
					break;
					case MOTOR_BACKWARD:
					DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
					DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,HIGH);
					break;
     324:	08 95       	ret
					case MOTOR_STOP:
					DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
     326:	40 e0       	ldi	r20, 0x00	; 0
     328:	64 e0       	ldi	r22, 0x04	; 4
     32a:	83 e0       	ldi	r24, 0x03	; 3
     32c:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_Write>
					DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
     330:	40 e0       	ldi	r20, 0x00	; 0
     332:	68 e0       	ldi	r22, 0x08	; 8
     334:	83 e0       	ldi	r24, 0x03	; 3
     336:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_Write>
	return fun_status;
}

ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{
	uint8_t fun_status = OK;
     33a:	81 e0       	ldi	r24, 0x01	; 1
					DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,HIGH);
					break;
					case MOTOR_STOP:
					DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
					DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
					break;
     33c:	08 95       	ret
						fun_status = NOK;
					break;
				}	
			break;
			case MOTOR_2:
				switch(Motor_Direction)
     33e:	61 30       	cpi	r22, 0x01	; 1
     340:	21 f0       	breq	.+8      	; 0x34a <Motor_Direction+0x76>
     342:	d8 f0       	brcs	.+54     	; 0x37a <Motor_Direction+0xa6>
     344:	62 30       	cpi	r22, 0x02	; 2
     346:	69 f0       	breq	.+26     	; 0x362 <Motor_Direction+0x8e>
     348:	2c c0       	rjmp	.+88     	; 0x3a2 <Motor_Direction+0xce>
				{
					case MOTOR_FORWARD:
					DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,HIGH);
     34a:	4f ef       	ldi	r20, 0xFF	; 255
     34c:	60 e4       	ldi	r22, 0x40	; 64
     34e:	83 e0       	ldi	r24, 0x03	; 3
     350:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_Write>
					DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
     354:	40 e0       	ldi	r20, 0x00	; 0
     356:	60 e8       	ldi	r22, 0x80	; 128
     358:	83 e0       	ldi	r24, 0x03	; 3
     35a:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_Write>
	return fun_status;
}

ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{
	uint8_t fun_status = OK;
     35e:	81 e0       	ldi	r24, 0x01	; 1
				switch(Motor_Direction)
				{
					case MOTOR_FORWARD:
					DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,HIGH);
					DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
					break;
     360:	08 95       	ret
					case MOTOR_BACKWARD:
					DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
     362:	40 e0       	ldi	r20, 0x00	; 0
     364:	60 e4       	ldi	r22, 0x40	; 64
     366:	83 e0       	ldi	r24, 0x03	; 3
     368:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_Write>
					DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,HIGH);
     36c:	4f ef       	ldi	r20, 0xFF	; 255
     36e:	60 e8       	ldi	r22, 0x80	; 128
     370:	83 e0       	ldi	r24, 0x03	; 3
     372:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_Write>
	return fun_status;
}

ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{
	uint8_t fun_status = OK;
     376:	81 e0       	ldi	r24, 0x01	; 1
					DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
					break;
					case MOTOR_BACKWARD:
					DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
					DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,HIGH);
					break;
     378:	08 95       	ret
					case MOTOR_STOP:
					DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
     37a:	40 e0       	ldi	r20, 0x00	; 0
     37c:	60 e4       	ldi	r22, 0x40	; 64
     37e:	83 e0       	ldi	r24, 0x03	; 3
     380:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_Write>
					DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
     384:	40 e0       	ldi	r20, 0x00	; 0
     386:	60 e8       	ldi	r22, 0x80	; 128
     388:	83 e0       	ldi	r24, 0x03	; 3
     38a:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_Write>
	return fun_status;
}

ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{
	uint8_t fun_status = OK;
     38e:	81 e0       	ldi	r24, 0x01	; 1
					DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,HIGH);
					break;
					case MOTOR_STOP:
					DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
					DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
					break;
     390:	08 95       	ret
ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{
	uint8_t fun_status = OK;
	if(Motor_Number > MOTOR_2 ||  Motor_Direction > MOTOR_BACKWARD)
	{
		fun_status = NOK;
     392:	8f ef       	ldi	r24, 0xFF	; 255
     394:	08 95       	ret
     396:	8f ef       	ldi	r24, 0xFF	; 255
     398:	08 95       	ret
					fun_status = NOK;
					break;
				}
			break;
			default:
				fun_status = NOK;
     39a:	8f ef       	ldi	r24, 0xFF	; 255
     39c:	08 95       	ret
					case MOTOR_STOP:
					DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
					DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
					break;
					default:
						fun_status = NOK;
     39e:	8f ef       	ldi	r24, 0xFF	; 255
     3a0:	08 95       	ret
					case MOTOR_STOP:
					DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
					DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
					break;
					default:
					fun_status = NOK;
     3a2:	8f ef       	ldi	r24, 0xFF	; 255
				fun_status = NOK;
			break;
		}
	}
	return fun_status;
}
     3a4:	08 95       	ret

000003a6 <Motor_Start>:

ERROR_STATUS Motor_Start(uint8_t Motor_Number, uint8_t Mot_Speed)
{
	uint8_t fun_status = OK;
	
	if(Motor_Number > MOTOR_2 || Mot_Speed > 100)
     3a6:	83 30       	cpi	r24, 0x03	; 3
     3a8:	d8 f4       	brcc	.+54     	; 0x3e0 <Motor_Start+0x3a>
     3aa:	65 36       	cpi	r22, 0x65	; 101
     3ac:	d8 f4       	brcc	.+54     	; 0x3e4 <Motor_Start+0x3e>
	{	
		fun_status = NOK;
	}
	else
	{
		switch(Motor_Number)
     3ae:	81 30       	cpi	r24, 0x01	; 1
     3b0:	19 f0       	breq	.+6      	; 0x3b8 <Motor_Start+0x12>
     3b2:	82 30       	cpi	r24, 0x02	; 2
     3b4:	59 f0       	breq	.+22     	; 0x3cc <Motor_Start+0x26>
     3b6:	18 c0       	rjmp	.+48     	; 0x3e8 <Motor_Start+0x42>
		{
			case MOTOR_1:
				Pwm_Start(pwm_cfg.Channel,Mot_Speed,MOTOR_FREQ);
     3b8:	22 e3       	ldi	r18, 0x32	; 50
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	40 e0       	ldi	r20, 0x00	; 0
     3be:	50 e0       	ldi	r21, 0x00	; 0
     3c0:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <pwm_cfg>
     3c4:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <Pwm_Start>
}


ERROR_STATUS Motor_Start(uint8_t Motor_Number, uint8_t Mot_Speed)
{
	uint8_t fun_status = OK;
     3c8:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(Motor_Number)
		{
			case MOTOR_1:
				Pwm_Start(pwm_cfg.Channel,Mot_Speed,MOTOR_FREQ);
			break;
     3ca:	08 95       	ret
			case MOTOR_2:
				Pwm_Start(pwm_cfg.Channel,Mot_Speed,MOTOR_FREQ);
     3cc:	22 e3       	ldi	r18, 0x32	; 50
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	40 e0       	ldi	r20, 0x00	; 0
     3d2:	50 e0       	ldi	r21, 0x00	; 0
     3d4:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <pwm_cfg>
     3d8:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <Pwm_Start>
}


ERROR_STATUS Motor_Start(uint8_t Motor_Number, uint8_t Mot_Speed)
{
	uint8_t fun_status = OK;
     3dc:	81 e0       	ldi	r24, 0x01	; 1
			case MOTOR_1:
				Pwm_Start(pwm_cfg.Channel,Mot_Speed,MOTOR_FREQ);
			break;
			case MOTOR_2:
				Pwm_Start(pwm_cfg.Channel,Mot_Speed,MOTOR_FREQ);
			break;
     3de:	08 95       	ret
{
	uint8_t fun_status = OK;
	
	if(Motor_Number > MOTOR_2 || Mot_Speed > 100)
	{	
		fun_status = NOK;
     3e0:	8f ef       	ldi	r24, 0xFF	; 255
     3e2:	08 95       	ret
     3e4:	8f ef       	ldi	r24, 0xFF	; 255
     3e6:	08 95       	ret
			break;
			case MOTOR_2:
				Pwm_Start(pwm_cfg.Channel,Mot_Speed,MOTOR_FREQ);
			break;
			default:
				fun_status = NOK;
     3e8:	8f ef       	ldi	r24, 0xFF	; 255
			break;
		}
	}
	return fun_status;
}
     3ea:	08 95       	ret

000003ec <Motor_SpeedUpdate>:

ERROR_STATUS Motor_SpeedUpdate(uint8_t Motor_Number, uint8_t Speed)
{
	uint8_t fun_status = OK;

	if(Motor_Number > MOTOR_2 || Speed > 100)
     3ec:	83 30       	cpi	r24, 0x03	; 3
     3ee:	d8 f4       	brcc	.+54     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     3f0:	65 36       	cpi	r22, 0x65	; 101
     3f2:	d8 f4       	brcc	.+54     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
	{
		fun_status = NOK;
	}
	else
	{
		switch(Motor_Number)
     3f4:	81 30       	cpi	r24, 0x01	; 1
     3f6:	19 f0       	breq	.+6      	; 0x3fe <Motor_SpeedUpdate+0x12>
     3f8:	82 30       	cpi	r24, 0x02	; 2
     3fa:	59 f0       	breq	.+22     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     3fc:	18 c0       	rjmp	.+48     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		{
			case MOTOR_1:
			Pwm_Update(pwm_cfg.Channel,Speed,MOTOR_FREQ);
     3fe:	22 e3       	ldi	r18, 0x32	; 50
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	40 e0       	ldi	r20, 0x00	; 0
     404:	50 e0       	ldi	r21, 0x00	; 0
     406:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <pwm_cfg>
     40a:	0e 94 25 04 	call	0x84a	; 0x84a <Pwm_Update>
	return fun_status;
}

ERROR_STATUS Motor_SpeedUpdate(uint8_t Motor_Number, uint8_t Speed)
{
	uint8_t fun_status = OK;
     40e:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(Motor_Number)
		{
			case MOTOR_1:
			Pwm_Update(pwm_cfg.Channel,Speed,MOTOR_FREQ);
			break;
     410:	08 95       	ret
			case MOTOR_2:
			Pwm_Update(pwm_cfg.Channel,Speed,MOTOR_FREQ);
     412:	22 e3       	ldi	r18, 0x32	; 50
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	40 e0       	ldi	r20, 0x00	; 0
     418:	50 e0       	ldi	r21, 0x00	; 0
     41a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <pwm_cfg>
     41e:	0e 94 25 04 	call	0x84a	; 0x84a <Pwm_Update>
	return fun_status;
}

ERROR_STATUS Motor_SpeedUpdate(uint8_t Motor_Number, uint8_t Speed)
{
	uint8_t fun_status = OK;
     422:	81 e0       	ldi	r24, 0x01	; 1
			case MOTOR_1:
			Pwm_Update(pwm_cfg.Channel,Speed,MOTOR_FREQ);
			break;
			case MOTOR_2:
			Pwm_Update(pwm_cfg.Channel,Speed,MOTOR_FREQ);
			break;
     424:	08 95       	ret
{
	uint8_t fun_status = OK;

	if(Motor_Number > MOTOR_2 || Speed > 100)
	{
		fun_status = NOK;
     426:	8f ef       	ldi	r24, 0xFF	; 255
     428:	08 95       	ret
     42a:	8f ef       	ldi	r24, 0xFF	; 255
     42c:	08 95       	ret
			break;
			case MOTOR_2:
			Pwm_Update(pwm_cfg.Channel,Speed,MOTOR_FREQ);
			break;
			default:
			fun_status = NOK;
     42e:	8f ef       	ldi	r24, 0xFF	; 255
			break;
		}
	}
	return fun_status;
}
     430:	08 95       	ret

00000432 <Motor_Stop>:

ERROR_STATUS Motor_Stop(uint8_t Motor_Number)
{
	uint8_t fun_status = OK;

	if(Motor_Number > MOTOR_2)
     432:	83 30       	cpi	r24, 0x03	; 3
     434:	d8 f4       	brcc	.+54     	; 0x46c <Motor_Stop+0x3a>
	{
		fun_status = NOK;
	}
	else
	{
		switch(Motor_Number)
     436:	81 30       	cpi	r24, 0x01	; 1
     438:	19 f0       	breq	.+6      	; 0x440 <Motor_Stop+0xe>
     43a:	82 30       	cpi	r24, 0x02	; 2
     43c:	61 f0       	breq	.+24     	; 0x456 <Motor_Stop+0x24>
     43e:	18 c0       	rjmp	.+48     	; 0x470 <Motor_Stop+0x3e>
		{
			case MOTOR_1:
			Pwm_Update(pwm_cfg.Channel,ZERO,MOTOR_FREQ);
     440:	22 e3       	ldi	r18, 0x32	; 50
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	40 e0       	ldi	r20, 0x00	; 0
     446:	50 e0       	ldi	r21, 0x00	; 0
     448:	60 e0       	ldi	r22, 0x00	; 0
     44a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <pwm_cfg>
     44e:	0e 94 25 04 	call	0x84a	; 0x84a <Pwm_Update>
	return fun_status;
}

ERROR_STATUS Motor_Stop(uint8_t Motor_Number)
{
	uint8_t fun_status = OK;
     452:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(Motor_Number)
		{
			case MOTOR_1:
			Pwm_Update(pwm_cfg.Channel,ZERO,MOTOR_FREQ);
			break;
     454:	08 95       	ret
			case MOTOR_2:
			Pwm_Update(pwm_cfg.Channel,ZERO,MOTOR_FREQ);
     456:	22 e3       	ldi	r18, 0x32	; 50
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	40 e0       	ldi	r20, 0x00	; 0
     45c:	50 e0       	ldi	r21, 0x00	; 0
     45e:	60 e0       	ldi	r22, 0x00	; 0
     460:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <pwm_cfg>
     464:	0e 94 25 04 	call	0x84a	; 0x84a <Pwm_Update>
	return fun_status;
}

ERROR_STATUS Motor_Stop(uint8_t Motor_Number)
{
	uint8_t fun_status = OK;
     468:	81 e0       	ldi	r24, 0x01	; 1
			case MOTOR_1:
			Pwm_Update(pwm_cfg.Channel,ZERO,MOTOR_FREQ);
			break;
			case MOTOR_2:
			Pwm_Update(pwm_cfg.Channel,ZERO,MOTOR_FREQ);
			break;
     46a:	08 95       	ret
{
	uint8_t fun_status = OK;

	if(Motor_Number > MOTOR_2)
	{
		fun_status = NOK;
     46c:	8f ef       	ldi	r24, 0xFF	; 255
     46e:	08 95       	ret
			break;
			case MOTOR_2:
			Pwm_Update(pwm_cfg.Channel,ZERO,MOTOR_FREQ);
			break;
			default:
			fun_status = NOK;
     470:	8f ef       	ldi	r24, 0xFF	; 255
			break;
		}
	}
	return fun_status;
}
     472:	08 95       	ret

00000474 <Us_Init>:
#define SHIFT_TO_UPPER_NIBBLE					4
#define	SHIFT_DIVIDE_BY_2						1
#define TICKS_FOR_ONE_ULTRA_SONIC_MICRO_SEC		58.0
#define TEN_DELAY								10
ERROR_STATUS Us_Init(void)
{
     474:	1f 93       	push	r17
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	00 d0       	rcall	.+0      	; 0x47c <Us_Init+0x8>
     47c:	00 d0       	rcall	.+0      	; 0x47e <Us_Init+0xa>
     47e:	1f 92       	push	r1
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
	*	3-set ekko pin as INPUT.
	*/
	uint8_t fun_status = OK;
	/*initalize software icu*/
	Icu_cfg_s icu_cfg;
	icu_cfg.ICU_Ch_No = ICU_CH2;
     484:	82 e0       	ldi	r24, 0x02	; 2
     486:	89 83       	std	Y+1, r24	; 0x01
	icu_cfg.ICU_Ch_Timer = ICU_TIMER_CH2;
     488:	8a 83       	std	Y+2, r24	; 0x02
	fun_status = Icu_Init(&icu_cfg);
     48a:	ce 01       	movw	r24, r28
     48c:	01 96       	adiw	r24, 0x01	; 1
     48e:	0e 94 94 06 	call	0xd28	; 0xd28 <Icu_Init>
	/*initalize trigger pin*/
	DIO_Cfg_s DIO_Cfg;
	DIO_Cfg.GPIO = ICU_TRIGGER_PORT;
     492:	83 e0       	ldi	r24, 0x03	; 3
     494:	8b 83       	std	Y+3, r24	; 0x03
	DIO_Cfg.pins = ICU_TRIGGER_PIN;
     496:	11 e0       	ldi	r17, 0x01	; 1
     498:	1c 83       	std	Y+4, r17	; 0x04
	DIO_Cfg.dir	 = OUTPUT;
     49a:	8f ef       	ldi	r24, 0xFF	; 255
     49c:	8d 83       	std	Y+5, r24	; 0x05
	DIO_init(&DIO_Cfg);
     49e:	ce 01       	movw	r24, r28
     4a0:	03 96       	adiw	r24, 0x03	; 3
     4a2:	0e 94 c6 02 	call	0x58c	; 0x58c <DIO_init>

	/*initalize ekko pin*/
	DIO_Cfg.GPIO = ICU_EKKO_PORT;
     4a6:	1b 83       	std	Y+3, r17	; 0x03
	DIO_Cfg.pins = ICU_EKKO_PIN;
     4a8:	84 e0       	ldi	r24, 0x04	; 4
     4aa:	8c 83       	std	Y+4, r24	; 0x04
	DIO_Cfg.dir	 = INPUT;
     4ac:	1d 82       	std	Y+5, r1	; 0x05
	fun_status = DIO_init(&DIO_Cfg); 
     4ae:	ce 01       	movw	r24, r28
     4b0:	03 96       	adiw	r24, 0x03	; 3
     4b2:	0e 94 c6 02 	call	0x58c	; 0x58c <DIO_init>
	return fun_status;
}
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
     4be:	0f 90       	pop	r0
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	1f 91       	pop	r17
     4c6:	08 95       	ret

000004c8 <Us_Trigger>:

ERROR_STATUS Us_Trigger(void)
{
	uint8_t fun_status = OK;
	
	fun_status = DIO_Write(ICU_TRIGGER_PORT,ICU_TRIGGER_PIN,HIGH);
     4c8:	4f ef       	ldi	r20, 0xFF	; 255
     4ca:	61 e0       	ldi	r22, 0x01	; 1
     4cc:	83 e0       	ldi	r24, 0x03	; 3
     4ce:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_Write>
     4d2:	8f e3       	ldi	r24, 0x3F	; 63
     4d4:	9c e9       	ldi	r25, 0x9C	; 156
     4d6:	01 97       	sbiw	r24, 0x01	; 1
     4d8:	f1 f7       	brne	.-4      	; 0x4d6 <Us_Trigger+0xe>
     4da:	00 c0       	rjmp	.+0      	; 0x4dc <Us_Trigger+0x14>
     4dc:	00 00       	nop
	_delay_ms(TEN_DELAY);
	fun_status = DIO_Write(ICU_TRIGGER_PORT,ICU_TRIGGER_PIN,LOW);
     4de:	40 e0       	ldi	r20, 0x00	; 0
     4e0:	61 e0       	ldi	r22, 0x01	; 1
     4e2:	83 e0       	ldi	r24, 0x03	; 3
     4e4:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_Write>
	
	return fun_status;
}
     4e8:	08 95       	ret

000004ea <Us_GetDistance>:

ERROR_STATUS Us_GetDistance(uint64_t *Distance)
{
     4ea:	ef 92       	push	r14
     4ec:	ff 92       	push	r15
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	cd b7       	in	r28, 0x3d	; 61
     4f8:	de b7       	in	r29, 0x3e	; 62
     4fa:	28 97       	sbiw	r28, 0x08	; 8
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	f8 94       	cli
     500:	de bf       	out	0x3e, r29	; 62
     502:	0f be       	out	0x3f, r0	; 63
     504:	cd bf       	out	0x3d, r28	; 61
     506:	7c 01       	movw	r14, r24
	uint8_t fun_status = OK;
	uint64_t ticks = ZERO;
     508:	19 82       	std	Y+1, r1	; 0x01
     50a:	1a 82       	std	Y+2, r1	; 0x02
     50c:	1b 82       	std	Y+3, r1	; 0x03
     50e:	1c 82       	std	Y+4, r1	; 0x04
     510:	1d 82       	std	Y+5, r1	; 0x05
     512:	1e 82       	std	Y+6, r1	; 0x06
     514:	1f 82       	std	Y+7, r1	; 0x07
     516:	18 86       	std	Y+8, r1	; 0x08

	fun_status = Icu_ReadTime(ICU_TIMER_CH2,ICU_FALE_TO_RISE,&ticks);
     518:	ae 01       	movw	r20, r28
     51a:	4f 5f       	subi	r20, 0xFF	; 255
     51c:	5f 4f       	sbci	r21, 0xFF	; 255
     51e:	62 e0       	ldi	r22, 0x02	; 2
     520:	82 e0       	ldi	r24, 0x02	; 2
     522:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <Icu_ReadTime>
     526:	18 2f       	mov	r17, r24
	*Distance = ((ticks>>SHIFT_DIVIDE_BY_2)/TICKS_FOR_ONE_ULTRA_SONIC_MICRO_SEC);
     528:	29 81       	ldd	r18, Y+1	; 0x01
     52a:	3a 81       	ldd	r19, Y+2	; 0x02
     52c:	4b 81       	ldd	r20, Y+3	; 0x03
     52e:	5c 81       	ldd	r21, Y+4	; 0x04
     530:	6d 81       	ldd	r22, Y+5	; 0x05
     532:	7e 81       	ldd	r23, Y+6	; 0x06
     534:	8f 81       	ldd	r24, Y+7	; 0x07
     536:	98 85       	ldd	r25, Y+8	; 0x08
     538:	01 e0       	ldi	r16, 0x01	; 1
     53a:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__lshrdi3>
     53e:	0e 94 11 08 	call	0x1022	; 0x1022 <__floatundisf>
     542:	20 e0       	ldi	r18, 0x00	; 0
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	48 e6       	ldi	r20, 0x68	; 104
     548:	52 e4       	ldi	r21, 0x42	; 66
     54a:	0e 94 63 07 	call	0xec6	; 0xec6 <__divsf3>
     54e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fixunssfdi>
     552:	f7 01       	movw	r30, r14
     554:	20 83       	st	Z, r18
     556:	31 83       	std	Z+1, r19	; 0x01
     558:	42 83       	std	Z+2, r20	; 0x02
     55a:	53 83       	std	Z+3, r21	; 0x03
     55c:	64 83       	std	Z+4, r22	; 0x04
     55e:	75 83       	std	Z+5, r23	; 0x05
     560:	86 83       	std	Z+6, r24	; 0x06
     562:	97 83       	std	Z+7, r25	; 0x07
	return fun_status;
}
     564:	81 2f       	mov	r24, r17
     566:	28 96       	adiw	r28, 0x08	; 8
     568:	0f b6       	in	r0, 0x3f	; 63
     56a:	f8 94       	cli
     56c:	de bf       	out	0x3e, r29	; 62
     56e:	0f be       	out	0x3f, r0	; 63
     570:	cd bf       	out	0x3d, r28	; 61
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	1f 91       	pop	r17
     578:	0f 91       	pop	r16
     57a:	ff 90       	pop	r15
     57c:	ef 90       	pop	r14
     57e:	08 95       	ret

00000580 <main>:
#include "Application/Steering/Steering.h"
#include "Application/CarSm/car_sm.h"

int main(void)
{
	sei();
     580:	78 94       	sei
	Car_SM_Init();
     582:	0e 94 51 00 	call	0xa2	; 0xa2 <Car_SM_Init>
	
    while (1) 
    {
		Car_SM_Update();
     586:	0e 94 56 00 	call	0xac	; 0xac <Car_SM_Update>
     58a:	fd cf       	rjmp	.-6      	; 0x586 <main+0x6>

0000058c <DIO_init>:

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t fun_status = OK;
    /*check for errors*/
	if((DIO_info->dir != OUTPUT && DIO_info->dir != INPUT) || 
     58c:	fc 01       	movw	r30, r24
     58e:	22 81       	ldd	r18, Z+2	; 0x02
     590:	3f ef       	ldi	r19, 0xFF	; 255
     592:	32 0f       	add	r19, r18
     594:	3e 3f       	cpi	r19, 0xFE	; 254
     596:	08 f4       	brcc	.+2      	; 0x59a <DIO_init+0xe>
     598:	5c c0       	rjmp	.+184    	; 0x652 <DIO_init+0xc6>
		DIO_info->GPIO > GPIOD)
     59a:	30 81       	ld	r19, Z

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t fun_status = OK;
    /*check for errors*/
	if((DIO_info->dir != OUTPUT && DIO_info->dir != INPUT) || 
     59c:	34 30       	cpi	r19, 0x04	; 4
     59e:	08 f0       	brcs	.+2      	; 0x5a2 <DIO_init+0x16>
     5a0:	5a c0       	rjmp	.+180    	; 0x656 <DIO_init+0xca>
		fun_status = NOK;
	}
	/*if input is ok proceed with fun process*/
	else
	{
			switch(DIO_info->GPIO)
     5a2:	31 30       	cpi	r19, 0x01	; 1
     5a4:	d1 f0       	breq	.+52     	; 0x5da <DIO_init+0x4e>
     5a6:	28 f0       	brcs	.+10     	; 0x5b2 <DIO_init+0x26>
     5a8:	32 30       	cpi	r19, 0x02	; 2
     5aa:	59 f1       	breq	.+86     	; 0x602 <DIO_init+0x76>
     5ac:	33 30       	cpi	r19, 0x03	; 3
     5ae:	e9 f1       	breq	.+122    	; 0x62a <DIO_init+0x9e>
     5b0:	54 c0       	rjmp	.+168    	; 0x65a <DIO_init+0xce>
			{
				case GPIOA:
					switch(DIO_info->dir)
     5b2:	22 23       	and	r18, r18
     5b4:	19 f0       	breq	.+6      	; 0x5bc <DIO_init+0x30>
     5b6:	2f 3f       	cpi	r18, 0xFF	; 255
     5b8:	49 f0       	breq	.+18     	; 0x5cc <DIO_init+0x40>
     5ba:	51 c0       	rjmp	.+162    	; 0x65e <DIO_init+0xd2>
					{
						case INPUT:
							CLEAR_MASK(PORTA_DIR,DIO_info->pins);
     5bc:	2a b3       	in	r18, 0x1a	; 26
     5be:	fc 01       	movw	r30, r24
     5c0:	81 81       	ldd	r24, Z+1	; 0x01
     5c2:	80 95       	com	r24
     5c4:	82 23       	and	r24, r18
     5c6:	8a bb       	out	0x1a, r24	; 26
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t fun_status = OK;
     5c8:	81 e0       	ldi	r24, 0x01	; 1
				case GPIOA:
					switch(DIO_info->dir)
					{
						case INPUT:
							CLEAR_MASK(PORTA_DIR,DIO_info->pins);
						break;
     5ca:	08 95       	ret
						case OUTPUT:
							SET_MASK(PORTA_DIR,DIO_info->pins);
     5cc:	2a b3       	in	r18, 0x1a	; 26
     5ce:	fc 01       	movw	r30, r24
     5d0:	81 81       	ldd	r24, Z+1	; 0x01
     5d2:	82 2b       	or	r24, r18
     5d4:	8a bb       	out	0x1a, r24	; 26
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t fun_status = OK;
     5d6:	81 e0       	ldi	r24, 0x01	; 1
						case INPUT:
							CLEAR_MASK(PORTA_DIR,DIO_info->pins);
						break;
						case OUTPUT:
							SET_MASK(PORTA_DIR,DIO_info->pins);
						break;
     5d8:	08 95       	ret
					}
				break;
				case GPIOB:
					switch(DIO_info->dir)
     5da:	22 23       	and	r18, r18
     5dc:	19 f0       	breq	.+6      	; 0x5e4 <DIO_init+0x58>
     5de:	2f 3f       	cpi	r18, 0xFF	; 255
     5e0:	49 f0       	breq	.+18     	; 0x5f4 <DIO_init+0x68>
     5e2:	3f c0       	rjmp	.+126    	; 0x662 <DIO_init+0xd6>
					{
						case INPUT:
						CLEAR_MASK(PORTB_DIR,DIO_info->pins);
     5e4:	27 b3       	in	r18, 0x17	; 23
     5e6:	fc 01       	movw	r30, r24
     5e8:	81 81       	ldd	r24, Z+1	; 0x01
     5ea:	80 95       	com	r24
     5ec:	82 23       	and	r24, r18
     5ee:	87 bb       	out	0x17, r24	; 23
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t fun_status = OK;
     5f0:	81 e0       	ldi	r24, 0x01	; 1
				case GPIOB:
					switch(DIO_info->dir)
					{
						case INPUT:
						CLEAR_MASK(PORTB_DIR,DIO_info->pins);
						break;
     5f2:	08 95       	ret
						case OUTPUT:
						SET_MASK(PORTB_DIR,DIO_info->pins);
     5f4:	27 b3       	in	r18, 0x17	; 23
     5f6:	fc 01       	movw	r30, r24
     5f8:	81 81       	ldd	r24, Z+1	; 0x01
     5fa:	82 2b       	or	r24, r18
     5fc:	87 bb       	out	0x17, r24	; 23
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t fun_status = OK;
     5fe:	81 e0       	ldi	r24, 0x01	; 1
						case INPUT:
						CLEAR_MASK(PORTB_DIR,DIO_info->pins);
						break;
						case OUTPUT:
						SET_MASK(PORTB_DIR,DIO_info->pins);
						break;
     600:	08 95       	ret
					}
				break;
				case GPIOC:
					switch(DIO_info->dir)
     602:	22 23       	and	r18, r18
     604:	19 f0       	breq	.+6      	; 0x60c <DIO_init+0x80>
     606:	2f 3f       	cpi	r18, 0xFF	; 255
     608:	49 f0       	breq	.+18     	; 0x61c <DIO_init+0x90>
     60a:	2d c0       	rjmp	.+90     	; 0x666 <DIO_init+0xda>
					{
						case INPUT:
						CLEAR_MASK(PORTC_DIR,DIO_info->pins);
     60c:	24 b3       	in	r18, 0x14	; 20
     60e:	fc 01       	movw	r30, r24
     610:	81 81       	ldd	r24, Z+1	; 0x01
     612:	80 95       	com	r24
     614:	82 23       	and	r24, r18
     616:	84 bb       	out	0x14, r24	; 20
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t fun_status = OK;
     618:	81 e0       	ldi	r24, 0x01	; 1
				case GPIOC:
					switch(DIO_info->dir)
					{
						case INPUT:
						CLEAR_MASK(PORTC_DIR,DIO_info->pins);
						break;
     61a:	08 95       	ret
						case OUTPUT:
						SET_MASK(PORTC_DIR,DIO_info->pins);
     61c:	24 b3       	in	r18, 0x14	; 20
     61e:	fc 01       	movw	r30, r24
     620:	81 81       	ldd	r24, Z+1	; 0x01
     622:	82 2b       	or	r24, r18
     624:	84 bb       	out	0x14, r24	; 20
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t fun_status = OK;
     626:	81 e0       	ldi	r24, 0x01	; 1
						case INPUT:
						CLEAR_MASK(PORTC_DIR,DIO_info->pins);
						break;
						case OUTPUT:
						SET_MASK(PORTC_DIR,DIO_info->pins);
						break;
     628:	08 95       	ret
					}
				break;
				case GPIOD:
					switch(DIO_info->dir)
     62a:	22 23       	and	r18, r18
     62c:	19 f0       	breq	.+6      	; 0x634 <DIO_init+0xa8>
     62e:	2f 3f       	cpi	r18, 0xFF	; 255
     630:	49 f0       	breq	.+18     	; 0x644 <DIO_init+0xb8>
     632:	1b c0       	rjmp	.+54     	; 0x66a <DIO_init+0xde>
					{
						case INPUT:
						CLEAR_MASK(PORTD_DIR,DIO_info->pins);
     634:	21 b3       	in	r18, 0x11	; 17
     636:	fc 01       	movw	r30, r24
     638:	81 81       	ldd	r24, Z+1	; 0x01
     63a:	80 95       	com	r24
     63c:	82 23       	and	r24, r18
     63e:	81 bb       	out	0x11, r24	; 17
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t fun_status = OK;
     640:	81 e0       	ldi	r24, 0x01	; 1
				case GPIOD:
					switch(DIO_info->dir)
					{
						case INPUT:
						CLEAR_MASK(PORTD_DIR,DIO_info->pins);
						break;
     642:	08 95       	ret
						case OUTPUT:
						SET_MASK(PORTD_DIR,DIO_info->pins);
     644:	21 b3       	in	r18, 0x11	; 17
     646:	fc 01       	movw	r30, r24
     648:	81 81       	ldd	r24, Z+1	; 0x01
     64a:	82 2b       	or	r24, r18
     64c:	81 bb       	out	0x11, r24	; 17
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t fun_status = OK;
     64e:	81 e0       	ldi	r24, 0x01	; 1
						case INPUT:
						CLEAR_MASK(PORTD_DIR,DIO_info->pins);
						break;
						case OUTPUT:
						SET_MASK(PORTD_DIR,DIO_info->pins);
						break;
     650:	08 95       	ret
	uint8_t fun_status = OK;
    /*check for errors*/
	if((DIO_info->dir != OUTPUT && DIO_info->dir != INPUT) || 
		DIO_info->GPIO > GPIOD)
	{
		fun_status = NOK;
     652:	8f ef       	ldi	r24, 0xFF	; 255
     654:	08 95       	ret
     656:	8f ef       	ldi	r24, 0xFF	; 255
     658:	08 95       	ret
						SET_MASK(PORTD_DIR,DIO_info->pins);
						break;
					}
				break;
				default:
					fun_status = NOK;
     65a:	8f ef       	ldi	r24, 0xFF	; 255
     65c:	08 95       	ret
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t fun_status = OK;
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	08 95       	ret
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	08 95       	ret
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	08 95       	ret
     66a:	81 e0       	ldi	r24, 0x01	; 1
					fun_status = NOK;
				break;
			}
	}
	return fun_status;
}
     66c:	08 95       	ret

0000066e <DIO_Write>:

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	uint8_t fun_status = OK;
	/*check for errors*/
	if(GPIO > GPIOD || (value != HIGH && value !=LOW))
     66e:	84 30       	cpi	r24, 0x04	; 4
     670:	08 f0       	brcs	.+2      	; 0x674 <DIO_Write+0x6>
     672:	4d c0       	rjmp	.+154    	; 0x70e <DIO_Write+0xa0>
     674:	9f ef       	ldi	r25, 0xFF	; 255
     676:	94 0f       	add	r25, r20
     678:	9e 3f       	cpi	r25, 0xFE	; 254
     67a:	08 f4       	brcc	.+2      	; 0x67e <DIO_Write+0x10>
     67c:	4a c0       	rjmp	.+148    	; 0x712 <DIO_Write+0xa4>
		fun_status = NOK;
	}
	/*if input is ok proceed with fun process*/
	else
	{
		switch(GPIO)
     67e:	81 30       	cpi	r24, 0x01	; 1
     680:	b1 f0       	breq	.+44     	; 0x6ae <DIO_Write+0x40>
     682:	28 f0       	brcs	.+10     	; 0x68e <DIO_Write+0x20>
     684:	82 30       	cpi	r24, 0x02	; 2
     686:	19 f1       	breq	.+70     	; 0x6ce <DIO_Write+0x60>
     688:	83 30       	cpi	r24, 0x03	; 3
     68a:	89 f1       	breq	.+98     	; 0x6ee <DIO_Write+0x80>
     68c:	44 c0       	rjmp	.+136    	; 0x716 <DIO_Write+0xa8>
		{
			case GPIOA:
			switch(value)
     68e:	44 23       	and	r20, r20
     690:	19 f0       	breq	.+6      	; 0x698 <DIO_Write+0x2a>
     692:	4f 3f       	cpi	r20, 0xFF	; 255
     694:	39 f0       	breq	.+14     	; 0x6a4 <DIO_Write+0x36>
     696:	41 c0       	rjmp	.+130    	; 0x71a <DIO_Write+0xac>
			{
				case LOW:
				CLEAR_MASK(PORTA_DATA,pins);
     698:	8b b3       	in	r24, 0x1b	; 27
     69a:	60 95       	com	r22
     69c:	68 23       	and	r22, r24
     69e:	6b bb       	out	0x1b, r22	; 27
}


ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	uint8_t fun_status = OK;
     6a0:	81 e0       	ldi	r24, 0x01	; 1
			case GPIOA:
			switch(value)
			{
				case LOW:
				CLEAR_MASK(PORTA_DATA,pins);
				break;
     6a2:	08 95       	ret
				case HIGH:
				SET_MASK(PORTA_DATA,pins);
     6a4:	8b b3       	in	r24, 0x1b	; 27
     6a6:	68 2b       	or	r22, r24
     6a8:	6b bb       	out	0x1b, r22	; 27
}


ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	uint8_t fun_status = OK;
     6aa:	81 e0       	ldi	r24, 0x01	; 1
				case LOW:
				CLEAR_MASK(PORTA_DATA,pins);
				break;
				case HIGH:
				SET_MASK(PORTA_DATA,pins);
				break;
     6ac:	08 95       	ret
			}
			break;
			case GPIOB:
			switch(value)
     6ae:	44 23       	and	r20, r20
     6b0:	19 f0       	breq	.+6      	; 0x6b8 <DIO_Write+0x4a>
     6b2:	4f 3f       	cpi	r20, 0xFF	; 255
     6b4:	39 f0       	breq	.+14     	; 0x6c4 <DIO_Write+0x56>
     6b6:	33 c0       	rjmp	.+102    	; 0x71e <DIO_Write+0xb0>
			{
				case LOW:
				CLEAR_MASK(PORTB_DATA,pins);
     6b8:	88 b3       	in	r24, 0x18	; 24
     6ba:	60 95       	com	r22
     6bc:	68 23       	and	r22, r24
     6be:	68 bb       	out	0x18, r22	; 24
}


ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	uint8_t fun_status = OK;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
			case GPIOB:
			switch(value)
			{
				case LOW:
				CLEAR_MASK(PORTB_DATA,pins);
				break;
     6c2:	08 95       	ret
				case HIGH:
				SET_MASK(PORTB_DATA,pins);
     6c4:	88 b3       	in	r24, 0x18	; 24
     6c6:	68 2b       	or	r22, r24
     6c8:	68 bb       	out	0x18, r22	; 24
}


ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	uint8_t fun_status = OK;
     6ca:	81 e0       	ldi	r24, 0x01	; 1
				case LOW:
				CLEAR_MASK(PORTB_DATA,pins);
				break;
				case HIGH:
				SET_MASK(PORTB_DATA,pins);
				break;
     6cc:	08 95       	ret
			}
			break;
			case GPIOC:
			switch(value)
     6ce:	44 23       	and	r20, r20
     6d0:	19 f0       	breq	.+6      	; 0x6d8 <DIO_Write+0x6a>
     6d2:	4f 3f       	cpi	r20, 0xFF	; 255
     6d4:	39 f0       	breq	.+14     	; 0x6e4 <DIO_Write+0x76>
     6d6:	25 c0       	rjmp	.+74     	; 0x722 <DIO_Write+0xb4>
			{
				case INPUT:
				CLEAR_MASK(PORTC_DATA,pins);
     6d8:	85 b3       	in	r24, 0x15	; 21
     6da:	60 95       	com	r22
     6dc:	68 23       	and	r22, r24
     6de:	65 bb       	out	0x15, r22	; 21
}


ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	uint8_t fun_status = OK;
     6e0:	81 e0       	ldi	r24, 0x01	; 1
			case GPIOC:
			switch(value)
			{
				case INPUT:
				CLEAR_MASK(PORTC_DATA,pins);
				break;
     6e2:	08 95       	ret
				case OUTPUT:
				SET_MASK(PORTC_DATA,pins);
     6e4:	85 b3       	in	r24, 0x15	; 21
     6e6:	68 2b       	or	r22, r24
     6e8:	65 bb       	out	0x15, r22	; 21
}


ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	uint8_t fun_status = OK;
     6ea:	81 e0       	ldi	r24, 0x01	; 1
				case INPUT:
				CLEAR_MASK(PORTC_DATA,pins);
				break;
				case OUTPUT:
				SET_MASK(PORTC_DATA,pins);
				break;
     6ec:	08 95       	ret
			}
			break;
			case GPIOD:
			switch(value)
     6ee:	44 23       	and	r20, r20
     6f0:	19 f0       	breq	.+6      	; 0x6f8 <DIO_Write+0x8a>
     6f2:	4f 3f       	cpi	r20, 0xFF	; 255
     6f4:	39 f0       	breq	.+14     	; 0x704 <DIO_Write+0x96>
     6f6:	17 c0       	rjmp	.+46     	; 0x726 <DIO_Write+0xb8>
			{
				case INPUT:
				CLEAR_MASK(PORTD_DATA,pins);
     6f8:	82 b3       	in	r24, 0x12	; 18
     6fa:	60 95       	com	r22
     6fc:	68 23       	and	r22, r24
     6fe:	62 bb       	out	0x12, r22	; 18
}


ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	uint8_t fun_status = OK;
     700:	81 e0       	ldi	r24, 0x01	; 1
			case GPIOD:
			switch(value)
			{
				case INPUT:
				CLEAR_MASK(PORTD_DATA,pins);
				break;
     702:	08 95       	ret
				case OUTPUT:
				SET_MASK(PORTD_DATA,pins);
     704:	82 b3       	in	r24, 0x12	; 18
     706:	68 2b       	or	r22, r24
     708:	62 bb       	out	0x12, r22	; 18
}


ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	uint8_t fun_status = OK;
     70a:	81 e0       	ldi	r24, 0x01	; 1
				case INPUT:
				CLEAR_MASK(PORTD_DATA,pins);
				break;
				case OUTPUT:
				SET_MASK(PORTD_DATA,pins);
				break;
     70c:	08 95       	ret
{
	uint8_t fun_status = OK;
	/*check for errors*/
	if(GPIO > GPIOD || (value != HIGH && value !=LOW))
	{
		fun_status = NOK;
     70e:	8f ef       	ldi	r24, 0xFF	; 255
     710:	08 95       	ret
     712:	8f ef       	ldi	r24, 0xFF	; 255
     714:	08 95       	ret
				SET_MASK(PORTD_DATA,pins);
				break;
			}
			break;
			default:
			fun_status = NOK;
     716:	8f ef       	ldi	r24, 0xFF	; 255
     718:	08 95       	ret
}


ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	uint8_t fun_status = OK;
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	08 95       	ret
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	08 95       	ret
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	08 95       	ret
     726:	81 e0       	ldi	r24, 0x01	; 1
			fun_status = NOK;
			break;
		}
	}
	return fun_status;
}
     728:	08 95       	ret

0000072a <Pwm_Init>:
}
static ERROR_STATUS validate_cnfg(Pwm_Cfg_s *Pwm_Cfg)
{
	uint8_t fun_status = OK;

	if(Pwm_Cfg->Channel > PWM_CH2 || Pwm_Cfg == NULL)
     72a:	fc 01       	movw	r30, r24
     72c:	20 81       	ld	r18, Z
     72e:	25 30       	cpi	r18, 0x05	; 5
     730:	b0 f4       	brcc	.+44     	; 0x75e <Pwm_Init+0x34>
     732:	00 97       	sbiw	r24, 0x00	; 0
     734:	d1 f4       	brne	.+52     	; 0x76a <Pwm_Init+0x40>
     736:	15 c0       	rjmp	.+42     	; 0x762 <Pwm_Init+0x38>
			break;
			case PWM_CH1B:
			break;
			case PWM_CH1A_B:
				/*set pwm mod as phase correct with OCR1A as top value*/
				TCCR1 |=T1_PWM_PC_ICR1_TOP;
     738:	8e b5       	in	r24, 0x2e	; 46
     73a:	9f b5       	in	r25, 0x2f	; 47
     73c:	80 61       	ori	r24, 0x10	; 16
     73e:	92 60       	ori	r25, 0x02	; 2
     740:	9f bd       	out	0x2f, r25	; 47
     742:	8e bd       	out	0x2e, r24	; 46
				TCCR1 |= (T1_OC1A_CLEAR|T1_OC1B_CLEAR);
     744:	8e b5       	in	r24, 0x2e	; 46
     746:	9f b5       	in	r25, 0x2f	; 47
     748:	90 6a       	ori	r25, 0xA0	; 160
     74a:	9f bd       	out	0x2f, r25	; 47
     74c:	8e bd       	out	0x2e, r24	; 46
				gPWM_prescaler = T1_PRESCALER_256 ;
     74e:	84 e0       	ldi	r24, 0x04	; 4
     750:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <gPWM_prescaler>
				/*set OCR1A AND OCR1B AS OUTPUT*/
				PORTD_DIR |= (OCR1B_BIT|OCR1A_BIT);
     754:	81 b3       	in	r24, 0x11	; 17
     756:	80 63       	ori	r24, 0x30	; 48
     758:	81 bb       	out	0x11, r24	; 17
		}
	return fun_status;
}
static ERROR_STATUS validate_cnfg(Pwm_Cfg_s *Pwm_Cfg)
{
	uint8_t fun_status = OK;
     75a:	81 e0       	ldi	r24, 0x01	; 1
				TCCR1 |=T1_PWM_PC_ICR1_TOP;
				TCCR1 |= (T1_OC1A_CLEAR|T1_OC1B_CLEAR);
				gPWM_prescaler = T1_PRESCALER_256 ;
				/*set OCR1A AND OCR1B AS OUTPUT*/
				PORTD_DIR |= (OCR1B_BIT|OCR1A_BIT);
			break;
     75c:	08 95       	ret
}
static ERROR_STATUS validate_cnfg(Pwm_Cfg_s *Pwm_Cfg)
{
	uint8_t fun_status = OK;

	if(Pwm_Cfg->Channel > PWM_CH2 || Pwm_Cfg == NULL)
     75e:	8f ef       	ldi	r24, 0xFF	; 255
     760:	08 95       	ret
     762:	8f ef       	ldi	r24, 0xFF	; 255
     764:	08 95       	ret
		}
	return fun_status;
}
static ERROR_STATUS validate_cnfg(Pwm_Cfg_s *Pwm_Cfg)
{
	uint8_t fun_status = OK;
     766:	81 e0       	ldi	r24, 0x01	; 1
			break;
			case PWM_CH2:
			break;
		}
	}
	return fun_status;
     768:	08 95       	ret
		/*zero all registers
		* TCCR1 = TCTN1 = OCR1A = OCR1B = ICR1 = ZERO
		* TIMSK CLEAR BITS [TICIE1 OCIE1A OCIE1B TOIE1]
		* TIFR  CLEAR BITS [ICF1 OCF1A OCF1B TOV1]
		**/
		TCCR1   =  ZERO;
     76a:	1f bc       	out	0x2f, r1	; 47
     76c:	1e bc       	out	0x2e, r1	; 46
		TCNT1   =  ZERO;
     76e:	1d bc       	out	0x2d, r1	; 45
     770:	1c bc       	out	0x2c, r1	; 44
		OCR1A   =  ZERO;
     772:	1b bc       	out	0x2b, r1	; 43
     774:	1a bc       	out	0x2a, r1	; 42
		OCR1B   =  ZERO;
     776:	19 bc       	out	0x29, r1	; 41
     778:	18 bc       	out	0x28, r1	; 40
		ICR1	=  ZERO;
     77a:	17 bc       	out	0x27, r1	; 39
     77c:	16 bc       	out	0x26, r1	; 38
	
		CLEAR_BIT(TIMSK,TICIE1_BIT);
     77e:	29 b7       	in	r18, 0x39	; 57
     780:	2f 7d       	andi	r18, 0xDF	; 223
     782:	29 bf       	out	0x39, r18	; 57
		CLEAR_BIT(TIMSK,OCIE1A_BIT);
     784:	29 b7       	in	r18, 0x39	; 57
     786:	2f 7e       	andi	r18, 0xEF	; 239
     788:	29 bf       	out	0x39, r18	; 57
		CLEAR_BIT(TIMSK,OCIE1B_BIT);
     78a:	29 b7       	in	r18, 0x39	; 57
     78c:	27 7f       	andi	r18, 0xF7	; 247
     78e:	29 bf       	out	0x39, r18	; 57
		CLEAR_BIT(TIMSK,TOIE1_BIT);
     790:	29 b7       	in	r18, 0x39	; 57
     792:	2b 7f       	andi	r18, 0xFB	; 251
     794:	29 bf       	out	0x39, r18	; 57

		SET_BIT(TIFR,ICF1_BIT);
     796:	28 b7       	in	r18, 0x38	; 56
     798:	20 62       	ori	r18, 0x20	; 32
     79a:	28 bf       	out	0x38, r18	; 56
		SET_BIT(TIFR,OCF1A_BIT);
     79c:	28 b7       	in	r18, 0x38	; 56
     79e:	20 61       	ori	r18, 0x10	; 16
     7a0:	28 bf       	out	0x38, r18	; 56
		SET_BIT(TIFR,OCF1B_BIT);
     7a2:	28 b7       	in	r18, 0x38	; 56
     7a4:	28 60       	ori	r18, 0x08	; 8
     7a6:	28 bf       	out	0x38, r18	; 56
		SET_BIT(TIFR,TOV1_BIT);
     7a8:	28 b7       	in	r18, 0x38	; 56
     7aa:	24 60       	ori	r18, 0x04	; 4
     7ac:	28 bf       	out	0x38, r18	; 56
		
		/*set OCR1A OCR1B*/
		switch(Pwm_Cfg->Channel)
     7ae:	fc 01       	movw	r30, r24
     7b0:	80 81       	ld	r24, Z
     7b2:	83 30       	cpi	r24, 0x03	; 3
     7b4:	09 f2       	breq	.-126    	; 0x738 <Pwm_Init+0xe>
     7b6:	d7 cf       	rjmp	.-82     	; 0x766 <Pwm_Init+0x3c>

000007b8 <Pwm_Start>:
	}
	return fun_status;
}

ERROR_STATUS Pwm_Start(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{	
     7b8:	cf 92       	push	r12
     7ba:	df 92       	push	r13
     7bc:	ef 92       	push	r14
     7be:	ff 92       	push	r15
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	d6 2f       	mov	r29, r22
	*	1-validate input
	*	2-evaluate ticks TCNT value and OCR1A value
	*	3-set prescaler to enable pwm                                                                      
	7************************************************************************/
	uint8_t fun_status = OK;
	if(Frequncy < MIN_FREQ || Frequncy > MAX_FREQ || Channel > PWM_CH2 )
     7c6:	69 01       	movw	r12, r18
     7c8:	7a 01       	movw	r14, r20
     7ca:	95 ef       	ldi	r25, 0xF5	; 245
     7cc:	c9 1a       	sub	r12, r25
     7ce:	d1 08       	sbc	r13, r1
     7d0:	e1 08       	sbc	r14, r1
     7d2:	f1 08       	sbc	r15, r1
     7d4:	9d e7       	ldi	r25, 0x7D	; 125
     7d6:	c9 16       	cp	r12, r25
     7d8:	91 e0       	ldi	r25, 0x01	; 1
     7da:	d9 06       	cpc	r13, r25
     7dc:	e1 04       	cpc	r14, r1
     7de:	f1 04       	cpc	r15, r1
     7e0:	20 f4       	brcc	.+8      	; 0x7ea <Pwm_Start+0x32>
     7e2:	85 30       	cpi	r24, 0x05	; 5
     7e4:	20 f0       	brcs	.+8      	; 0x7ee <Pwm_Start+0x36>
	{
		fun_status = NOK;
     7e6:	cf ef       	ldi	r28, 0xFF	; 255
     7e8:	03 c0       	rjmp	.+6      	; 0x7f0 <Pwm_Start+0x38>
     7ea:	cf ef       	ldi	r28, 0xFF	; 255
     7ec:	01 c0       	rjmp	.+2      	; 0x7f0 <Pwm_Start+0x38>
	/************************************************************************
	*	1-validate input
	*	2-evaluate ticks TCNT value and OCR1A value
	*	3-set prescaler to enable pwm                                                                      
	7************************************************************************/
	uint8_t fun_status = OK;
     7ee:	c1 e0       	ldi	r28, 0x01	; 1
	/*multiply freq by 2 as Phase correct operates on half of the given freq*/
	Frequncy +=Frequncy;
	uint32_t ticks		=  ((FCPU/PRESCALER_256)/Frequncy);
	uint32_t duty_value	=  (((ticks*Duty)/HUNDERED_PRESENT));

	switch(Channel)
     7f0:	83 30       	cpi	r24, 0x03	; 3
     7f2:	e1 f4       	brne	.+56     	; 0x82c <Pwm_Start+0x74>
	{
		fun_status = NOK;
	}
	/*multiply freq by 2 as Phase correct operates on half of the given freq*/
	Frequncy +=Frequncy;
	uint32_t ticks		=  ((FCPU/PRESCALER_256)/Frequncy);
     7f4:	22 0f       	add	r18, r18
     7f6:	33 1f       	adc	r19, r19
     7f8:	44 1f       	adc	r20, r20
     7fa:	55 1f       	adc	r21, r21
     7fc:	64 e2       	ldi	r22, 0x24	; 36
     7fe:	74 ef       	ldi	r23, 0xF4	; 244
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	0e 94 b0 08 	call	0x1160	; 0x1160 <__udivmodsi4>
		break;
		case PWM_CH1B:
		break;
		case PWM_CH1A_B:
		/*set TCNT1 to zero and OCR1A */
		TCNT1 = ZERO;
     808:	1d bc       	out	0x2d, r1	; 45
     80a:	1c bc       	out	0x2c, r1	; 44
		ICR1  = ticks;
     80c:	37 bd       	out	0x27, r19	; 39
     80e:	26 bd       	out	0x26, r18	; 38
		OCR1A = duty_value;
     810:	ad 2f       	mov	r26, r29
     812:	b0 e0       	ldi	r27, 0x00	; 0
     814:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__muluhisi3>
     818:	24 e6       	ldi	r18, 0x64	; 100
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	40 e0       	ldi	r20, 0x00	; 0
     81e:	50 e0       	ldi	r21, 0x00	; 0
     820:	0e 94 b0 08 	call	0x1160	; 0x1160 <__udivmodsi4>
     824:	3b bd       	out	0x2b, r19	; 43
     826:	2a bd       	out	0x2a, r18	; 42
		OCR1B = duty_value;
     828:	39 bd       	out	0x29, r19	; 41
     82a:	28 bd       	out	0x28, r18	; 40
		break;
		case PWM_CH2:
		break;
	} 
	TCCR1 |= gPWM_prescaler;
     82c:	8e b5       	in	r24, 0x2e	; 46
     82e:	9f b5       	in	r25, 0x2f	; 47
     830:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <gPWM_prescaler>
     834:	82 2b       	or	r24, r18
     836:	9f bd       	out	0x2f, r25	; 47
     838:	8e bd       	out	0x2e, r24	; 46
	return fun_status;
}
     83a:	8c 2f       	mov	r24, r28
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	ff 90       	pop	r15
     842:	ef 90       	pop	r14
     844:	df 90       	pop	r13
     846:	cf 90       	pop	r12
     848:	08 95       	ret

0000084a <Pwm_Update>:


ERROR_STATUS Pwm_Update(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{
     84a:	cf 92       	push	r12
     84c:	df 92       	push	r13
     84e:	ef 92       	push	r14
     850:	ff 92       	push	r15
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	d6 2f       	mov	r29, r22
	*	1-validate input
	*	2-evaluate ticks TCNT value and OCR1A value
	*	3-set prescaler to enable pwm                                                                      
	7************************************************************************/
	uint8_t fun_status = OK;
	if(Frequncy < MIN_FREQ || Frequncy > MAX_FREQ || Channel > PWM_CH2 )
     858:	69 01       	movw	r12, r18
     85a:	7a 01       	movw	r14, r20
     85c:	95 ef       	ldi	r25, 0xF5	; 245
     85e:	c9 1a       	sub	r12, r25
     860:	d1 08       	sbc	r13, r1
     862:	e1 08       	sbc	r14, r1
     864:	f1 08       	sbc	r15, r1
     866:	9d e7       	ldi	r25, 0x7D	; 125
     868:	c9 16       	cp	r12, r25
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	d9 06       	cpc	r13, r25
     86e:	e1 04       	cpc	r14, r1
     870:	f1 04       	cpc	r15, r1
     872:	20 f4       	brcc	.+8      	; 0x87c <__stack+0x1d>
     874:	85 30       	cpi	r24, 0x05	; 5
     876:	20 f0       	brcs	.+8      	; 0x880 <__stack+0x21>
	{
		fun_status = NOK;
     878:	cf ef       	ldi	r28, 0xFF	; 255
     87a:	03 c0       	rjmp	.+6      	; 0x882 <__stack+0x23>
     87c:	cf ef       	ldi	r28, 0xFF	; 255
     87e:	01 c0       	rjmp	.+2      	; 0x882 <__stack+0x23>
/************************************************************************
	*	1-validate input
	*	2-evaluate ticks TCNT value and OCR1A value
	*	3-set prescaler to enable pwm                                                                      
	7************************************************************************/
	uint8_t fun_status = OK;
     880:	c1 e0       	ldi	r28, 0x01	; 1
	/*multiply freq by 2 as Phase correct operates on half of the given freq*/
	Frequncy +=Frequncy;
	uint32_t ticks		=  ((FCPU/PRESCALER_256)/Frequncy);
	uint32_t duty_value	=  (((ticks*Duty)/HUNDERED_PRESENT));

	switch(Channel)
     882:	83 30       	cpi	r24, 0x03	; 3
     884:	e1 f4       	brne	.+56     	; 0x8be <__stack+0x5f>
	{
		fun_status = NOK;
	}
	/*multiply freq by 2 as Phase correct operates on half of the given freq*/
	Frequncy +=Frequncy;
	uint32_t ticks		=  ((FCPU/PRESCALER_256)/Frequncy);
     886:	22 0f       	add	r18, r18
     888:	33 1f       	adc	r19, r19
     88a:	44 1f       	adc	r20, r20
     88c:	55 1f       	adc	r21, r21
     88e:	64 e2       	ldi	r22, 0x24	; 36
     890:	74 ef       	ldi	r23, 0xF4	; 244
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	0e 94 b0 08 	call	0x1160	; 0x1160 <__udivmodsi4>
		break;
		case PWM_CH1B:
		break;
		case PWM_CH1A_B:
		/*set TCNT1 to zero and OCR1A */
		TCNT1 = ZERO;
     89a:	1d bc       	out	0x2d, r1	; 45
     89c:	1c bc       	out	0x2c, r1	; 44
		ICR1  = ticks;
     89e:	37 bd       	out	0x27, r19	; 39
     8a0:	26 bd       	out	0x26, r18	; 38
		OCR1A = duty_value;
     8a2:	ad 2f       	mov	r26, r29
     8a4:	b0 e0       	ldi	r27, 0x00	; 0
     8a6:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__muluhisi3>
     8aa:	24 e6       	ldi	r18, 0x64	; 100
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	40 e0       	ldi	r20, 0x00	; 0
     8b0:	50 e0       	ldi	r21, 0x00	; 0
     8b2:	0e 94 b0 08 	call	0x1160	; 0x1160 <__udivmodsi4>
     8b6:	3b bd       	out	0x2b, r19	; 43
     8b8:	2a bd       	out	0x2a, r18	; 42
		OCR1B = duty_value;
     8ba:	39 bd       	out	0x29, r19	; 41
     8bc:	28 bd       	out	0x28, r18	; 40
		break;
		case PWM_CH2:
		break;
	} 
	return fun_status;
}
     8be:	8c 2f       	mov	r24, r28
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	ff 90       	pop	r15
     8c6:	ef 90       	pop	r14
     8c8:	df 90       	pop	r13
     8ca:	cf 90       	pop	r12
     8cc:	08 95       	ret

000008ce <Timer_Init>:
		default:
			fun_status = NOK;
		break;
	}
	return fun_status;
}
     8ce:	fc 01       	movw	r30, r24
     8d0:	80 81       	ld	r24, Z
     8d2:	81 30       	cpi	r24, 0x01	; 1
     8d4:	09 f4       	brne	.+2      	; 0x8d8 <Timer_Init+0xa>
     8d6:	42 c0       	rjmp	.+132    	; 0x95c <Timer_Init+0x8e>
     8d8:	20 f0       	brcs	.+8      	; 0x8e2 <Timer_Init+0x14>
     8da:	82 30       	cpi	r24, 0x02	; 2
     8dc:	09 f4       	brne	.+2      	; 0x8e0 <Timer_Init+0x12>
     8de:	98 c0       	rjmp	.+304    	; 0xa10 <Timer_Init+0x142>
     8e0:	ca c0       	rjmp	.+404    	; 0xa76 <Timer_Init+0x1a8>
     8e2:	13 be       	out	0x33, r1	; 51
     8e4:	12 be       	out	0x32, r1	; 50
     8e6:	89 b7       	in	r24, 0x39	; 57
     8e8:	8e 7f       	andi	r24, 0xFE	; 254
     8ea:	89 bf       	out	0x39, r24	; 57
     8ec:	89 b7       	in	r24, 0x39	; 57
     8ee:	8d 7f       	andi	r24, 0xFD	; 253
     8f0:	89 bf       	out	0x39, r24	; 57
     8f2:	88 b7       	in	r24, 0x38	; 56
     8f4:	81 60       	ori	r24, 0x01	; 1
     8f6:	88 bf       	out	0x38, r24	; 56
     8f8:	81 81       	ldd	r24, Z+1	; 0x01
     8fa:	81 30       	cpi	r24, 0x01	; 1
     8fc:	41 f0       	breq	.+16     	; 0x90e <Timer_Init+0x40>
     8fe:	18 f0       	brcs	.+6      	; 0x906 <Timer_Init+0x38>
     900:	82 30       	cpi	r24, 0x02	; 2
     902:	51 f0       	breq	.+20     	; 0x918 <Timer_Init+0x4a>
     904:	0e c0       	rjmp	.+28     	; 0x922 <Timer_Init+0x54>
     906:	83 b7       	in	r24, 0x33	; 51
     908:	83 bf       	out	0x33, r24	; 51
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	0b c0       	rjmp	.+22     	; 0x924 <Timer_Init+0x56>
     90e:	83 b7       	in	r24, 0x33	; 51
     910:	87 60       	ori	r24, 0x07	; 7
     912:	83 bf       	out	0x33, r24	; 51
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	06 c0       	rjmp	.+12     	; 0x924 <Timer_Init+0x56>
     918:	83 b7       	in	r24, 0x33	; 51
     91a:	86 60       	ori	r24, 0x06	; 6
     91c:	83 bf       	out	0x33, r24	; 51
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	01 c0       	rjmp	.+2      	; 0x924 <Timer_Init+0x56>
     922:	8f ef       	ldi	r24, 0xFF	; 255
     924:	93 81       	ldd	r25, Z+3	; 0x03
     926:	94 30       	cpi	r25, 0x04	; 4
     928:	41 f0       	breq	.+16     	; 0x93a <Timer_Init+0x6c>
     92a:	18 f4       	brcc	.+6      	; 0x932 <Timer_Init+0x64>
     92c:	93 30       	cpi	r25, 0x03	; 3
     92e:	40 f4       	brcc	.+16     	; 0x940 <Timer_Init+0x72>
     930:	04 c0       	rjmp	.+8      	; 0x93a <Timer_Init+0x6c>
     932:	2a ef       	ldi	r18, 0xFA	; 250
     934:	29 0f       	add	r18, r25
     936:	22 30       	cpi	r18, 0x02	; 2
     938:	18 f4       	brcc	.+6      	; 0x940 <Timer_Init+0x72>
     93a:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <genu_timer0prescaler>
     93e:	01 c0       	rjmp	.+2      	; 0x942 <Timer_Init+0x74>
     940:	8f ef       	ldi	r24, 0xFF	; 255
     942:	92 81       	ldd	r25, Z+2	; 0x02
     944:	99 23       	and	r25, r25
     946:	19 f0       	breq	.+6      	; 0x94e <Timer_Init+0x80>
     948:	91 30       	cpi	r25, 0x01	; 1
     94a:	21 f0       	breq	.+8      	; 0x954 <Timer_Init+0x86>
     94c:	96 c0       	rjmp	.+300    	; 0xa7a <Timer_Init+0x1ac>
     94e:	99 b7       	in	r25, 0x39	; 57
     950:	99 bf       	out	0x39, r25	; 57
     952:	08 95       	ret
     954:	99 b7       	in	r25, 0x39	; 57
     956:	91 60       	ori	r25, 0x01	; 1
     958:	99 bf       	out	0x39, r25	; 57
     95a:	08 95       	ret
     95c:	1f bc       	out	0x2f, r1	; 47
     95e:	1e bc       	out	0x2e, r1	; 46
     960:	1d bc       	out	0x2d, r1	; 45
     962:	1c bc       	out	0x2c, r1	; 44
     964:	1b bc       	out	0x2b, r1	; 43
     966:	1a bc       	out	0x2a, r1	; 42
     968:	19 bc       	out	0x29, r1	; 41
     96a:	18 bc       	out	0x28, r1	; 40
     96c:	17 bc       	out	0x27, r1	; 39
     96e:	16 bc       	out	0x26, r1	; 38
     970:	89 b7       	in	r24, 0x39	; 57
     972:	8f 7d       	andi	r24, 0xDF	; 223
     974:	89 bf       	out	0x39, r24	; 57
     976:	89 b7       	in	r24, 0x39	; 57
     978:	8f 7e       	andi	r24, 0xEF	; 239
     97a:	89 bf       	out	0x39, r24	; 57
     97c:	89 b7       	in	r24, 0x39	; 57
     97e:	87 7f       	andi	r24, 0xF7	; 247
     980:	89 bf       	out	0x39, r24	; 57
     982:	89 b7       	in	r24, 0x39	; 57
     984:	8b 7f       	andi	r24, 0xFB	; 251
     986:	89 bf       	out	0x39, r24	; 57
     988:	88 b7       	in	r24, 0x38	; 56
     98a:	80 62       	ori	r24, 0x20	; 32
     98c:	88 bf       	out	0x38, r24	; 56
     98e:	88 b7       	in	r24, 0x38	; 56
     990:	80 61       	ori	r24, 0x10	; 16
     992:	88 bf       	out	0x38, r24	; 56
     994:	88 b7       	in	r24, 0x38	; 56
     996:	88 60       	ori	r24, 0x08	; 8
     998:	88 bf       	out	0x38, r24	; 56
     99a:	88 b7       	in	r24, 0x38	; 56
     99c:	84 60       	ori	r24, 0x04	; 4
     99e:	88 bf       	out	0x38, r24	; 56
     9a0:	81 81       	ldd	r24, Z+1	; 0x01
     9a2:	81 30       	cpi	r24, 0x01	; 1
     9a4:	51 f0       	breq	.+20     	; 0x9ba <Timer_Init+0xec>
     9a6:	18 f0       	brcs	.+6      	; 0x9ae <Timer_Init+0xe0>
     9a8:	82 30       	cpi	r24, 0x02	; 2
     9aa:	71 f0       	breq	.+28     	; 0x9c8 <Timer_Init+0xfa>
     9ac:	14 c0       	rjmp	.+40     	; 0x9d6 <Timer_Init+0x108>
     9ae:	8e b5       	in	r24, 0x2e	; 46
     9b0:	9f b5       	in	r25, 0x2f	; 47
     9b2:	9f bd       	out	0x2f, r25	; 47
     9b4:	8e bd       	out	0x2e, r24	; 46
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	0f c0       	rjmp	.+30     	; 0x9d8 <Timer_Init+0x10a>
     9ba:	8e b5       	in	r24, 0x2e	; 46
     9bc:	9f b5       	in	r25, 0x2f	; 47
     9be:	87 60       	ori	r24, 0x07	; 7
     9c0:	9f bd       	out	0x2f, r25	; 47
     9c2:	8e bd       	out	0x2e, r24	; 46
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	08 c0       	rjmp	.+16     	; 0x9d8 <Timer_Init+0x10a>
     9c8:	8e b5       	in	r24, 0x2e	; 46
     9ca:	9f b5       	in	r25, 0x2f	; 47
     9cc:	86 60       	ori	r24, 0x06	; 6
     9ce:	9f bd       	out	0x2f, r25	; 47
     9d0:	8e bd       	out	0x2e, r24	; 46
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	01 c0       	rjmp	.+2      	; 0x9d8 <Timer_Init+0x10a>
     9d6:	8f ef       	ldi	r24, 0xFF	; 255
     9d8:	93 81       	ldd	r25, Z+3	; 0x03
     9da:	94 30       	cpi	r25, 0x04	; 4
     9dc:	41 f0       	breq	.+16     	; 0x9ee <Timer_Init+0x120>
     9de:	18 f4       	brcc	.+6      	; 0x9e6 <Timer_Init+0x118>
     9e0:	93 30       	cpi	r25, 0x03	; 3
     9e2:	40 f4       	brcc	.+16     	; 0x9f4 <Timer_Init+0x126>
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <Timer_Init+0x120>
     9e6:	2a ef       	ldi	r18, 0xFA	; 250
     9e8:	29 0f       	add	r18, r25
     9ea:	22 30       	cpi	r18, 0x02	; 2
     9ec:	18 f4       	brcc	.+6      	; 0x9f4 <Timer_Init+0x126>
     9ee:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <genu_timer1prescaler>
     9f2:	01 c0       	rjmp	.+2      	; 0x9f6 <Timer_Init+0x128>
     9f4:	8f ef       	ldi	r24, 0xFF	; 255
     9f6:	92 81       	ldd	r25, Z+2	; 0x02
     9f8:	99 23       	and	r25, r25
     9fa:	19 f0       	breq	.+6      	; 0xa02 <Timer_Init+0x134>
     9fc:	91 30       	cpi	r25, 0x01	; 1
     9fe:	21 f0       	breq	.+8      	; 0xa08 <Timer_Init+0x13a>
     a00:	08 95       	ret
     a02:	99 b7       	in	r25, 0x39	; 57
     a04:	99 bf       	out	0x39, r25	; 57
     a06:	08 95       	ret
     a08:	99 b7       	in	r25, 0x39	; 57
     a0a:	94 60       	ori	r25, 0x04	; 4
     a0c:	99 bf       	out	0x39, r25	; 57
     a0e:	08 95       	ret
     a10:	15 bc       	out	0x25, r1	; 37
     a12:	14 bc       	out	0x24, r1	; 36
     a14:	89 b7       	in	r24, 0x39	; 57
     a16:	8f 7b       	andi	r24, 0xBF	; 191
     a18:	89 bf       	out	0x39, r24	; 57
     a1a:	89 b7       	in	r24, 0x39	; 57
     a1c:	8f 77       	andi	r24, 0x7F	; 127
     a1e:	89 bf       	out	0x39, r24	; 57
     a20:	88 b7       	in	r24, 0x38	; 56
     a22:	80 64       	ori	r24, 0x40	; 64
     a24:	88 bf       	out	0x38, r24	; 56
     a26:	82 b5       	in	r24, 0x22	; 34
     a28:	87 7f       	andi	r24, 0xF7	; 247
     a2a:	82 bd       	out	0x22, r24	; 34
     a2c:	81 81       	ldd	r24, Z+1	; 0x01
     a2e:	88 23       	and	r24, r24
     a30:	19 f0       	breq	.+6      	; 0xa38 <Timer_Init+0x16a>
     a32:	81 30       	cpi	r24, 0x01	; 1
     a34:	31 f0       	breq	.+12     	; 0xa42 <Timer_Init+0x174>
     a36:	0a c0       	rjmp	.+20     	; 0xa4c <Timer_Init+0x17e>
     a38:	82 b5       	in	r24, 0x22	; 34
     a3a:	87 7f       	andi	r24, 0xF7	; 247
     a3c:	82 bd       	out	0x22, r24	; 34
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	06 c0       	rjmp	.+12     	; 0xa4e <Timer_Init+0x180>
     a42:	82 b5       	in	r24, 0x22	; 34
     a44:	88 60       	ori	r24, 0x08	; 8
     a46:	82 bd       	out	0x22, r24	; 34
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	01 c0       	rjmp	.+2      	; 0xa4e <Timer_Init+0x180>
     a4c:	8f ef       	ldi	r24, 0xFF	; 255
     a4e:	93 81       	ldd	r25, Z+3	; 0x03
     a50:	98 30       	cpi	r25, 0x08	; 8
     a52:	18 f4       	brcc	.+6      	; 0xa5a <Timer_Init+0x18c>
     a54:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <genu_timer2prescaler>
     a58:	01 c0       	rjmp	.+2      	; 0xa5c <Timer_Init+0x18e>
     a5a:	8f ef       	ldi	r24, 0xFF	; 255
     a5c:	92 81       	ldd	r25, Z+2	; 0x02
     a5e:	99 23       	and	r25, r25
     a60:	19 f0       	breq	.+6      	; 0xa68 <Timer_Init+0x19a>
     a62:	91 30       	cpi	r25, 0x01	; 1
     a64:	21 f0       	breq	.+8      	; 0xa6e <Timer_Init+0x1a0>
     a66:	08 95       	ret
     a68:	99 b7       	in	r25, 0x39	; 57
     a6a:	99 bf       	out	0x39, r25	; 57
     a6c:	08 95       	ret
     a6e:	99 b7       	in	r25, 0x39	; 57
     a70:	90 64       	ori	r25, 0x40	; 64
     a72:	99 bf       	out	0x39, r25	; 57
     a74:	08 95       	ret
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	08 95       	ret
     a7a:	8f ef       	ldi	r24, 0xFF	; 255
     a7c:	08 95       	ret

00000a7e <Timer_Start>:
     a7e:	81 30       	cpi	r24, 0x01	; 1
     a80:	d1 f1       	breq	.+116    	; 0xaf6 <Timer_Start+0x78>
     a82:	20 f0       	brcs	.+8      	; 0xa8c <Timer_Start+0xe>
     a84:	82 30       	cpi	r24, 0x02	; 2
     a86:	09 f4       	brne	.+2      	; 0xa8a <Timer_Start+0xc>
     a88:	78 c0       	rjmp	.+240    	; 0xb7a <Timer_Start+0xfc>
     a8a:	af c0       	rjmp	.+350    	; 0xbea <Timer_Start+0x16c>
     a8c:	6f 3f       	cpi	r22, 0xFF	; 255
     a8e:	71 05       	cpc	r23, r1
     a90:	11 f0       	breq	.+4      	; 0xa96 <Timer_Start+0x18>
     a92:	08 f0       	brcs	.+2      	; 0xa96 <Timer_Start+0x18>
     a94:	ac c0       	rjmp	.+344    	; 0xbee <Timer_Start+0x170>
     a96:	62 bf       	out	0x32, r22	; 50
     a98:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <genu_timer0prescaler>
     a9c:	82 30       	cpi	r24, 0x02	; 2
     a9e:	b9 f0       	breq	.+46     	; 0xace <Timer_Start+0x50>
     aa0:	28 f4       	brcc	.+10     	; 0xaac <Timer_Start+0x2e>
     aa2:	88 23       	and	r24, r24
     aa4:	59 f0       	breq	.+22     	; 0xabc <Timer_Start+0x3e>
     aa6:	81 30       	cpi	r24, 0x01	; 1
     aa8:	69 f0       	breq	.+26     	; 0xac4 <Timer_Start+0x46>
     aaa:	a3 c0       	rjmp	.+326    	; 0xbf2 <Timer_Start+0x174>
     aac:	86 30       	cpi	r24, 0x06	; 6
     aae:	c9 f0       	breq	.+50     	; 0xae2 <Timer_Start+0x64>
     ab0:	87 30       	cpi	r24, 0x07	; 7
     ab2:	e1 f0       	breq	.+56     	; 0xaec <Timer_Start+0x6e>
     ab4:	84 30       	cpi	r24, 0x04	; 4
     ab6:	09 f0       	breq	.+2      	; 0xaba <Timer_Start+0x3c>
     ab8:	9c c0       	rjmp	.+312    	; 0xbf2 <Timer_Start+0x174>
     aba:	0e c0       	rjmp	.+28     	; 0xad8 <Timer_Start+0x5a>
     abc:	83 b7       	in	r24, 0x33	; 51
     abe:	83 bf       	out	0x33, r24	; 51
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	08 95       	ret
     ac4:	83 b7       	in	r24, 0x33	; 51
     ac6:	81 60       	ori	r24, 0x01	; 1
     ac8:	83 bf       	out	0x33, r24	; 51
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	08 95       	ret
     ace:	83 b7       	in	r24, 0x33	; 51
     ad0:	82 60       	ori	r24, 0x02	; 2
     ad2:	83 bf       	out	0x33, r24	; 51
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	08 95       	ret
     ad8:	83 b7       	in	r24, 0x33	; 51
     ada:	83 60       	ori	r24, 0x03	; 3
     adc:	83 bf       	out	0x33, r24	; 51
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	08 95       	ret
     ae2:	83 b7       	in	r24, 0x33	; 51
     ae4:	84 60       	ori	r24, 0x04	; 4
     ae6:	83 bf       	out	0x33, r24	; 51
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	08 95       	ret
     aec:	83 b7       	in	r24, 0x33	; 51
     aee:	85 60       	ori	r24, 0x05	; 5
     af0:	83 bf       	out	0x33, r24	; 51
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	08 95       	ret
     af6:	7d bd       	out	0x2d, r23	; 45
     af8:	6c bd       	out	0x2c, r22	; 44
     afa:	8e b5       	in	r24, 0x2e	; 46
     afc:	9f b5       	in	r25, 0x2f	; 47
     afe:	88 7f       	andi	r24, 0xF8	; 248
     b00:	9f bd       	out	0x2f, r25	; 47
     b02:	8e bd       	out	0x2e, r24	; 46
     b04:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <genu_timer1prescaler>
     b08:	82 30       	cpi	r24, 0x02	; 2
     b0a:	d9 f0       	breq	.+54     	; 0xb42 <Timer_Start+0xc4>
     b0c:	28 f4       	brcc	.+10     	; 0xb18 <Timer_Start+0x9a>
     b0e:	88 23       	and	r24, r24
     b10:	59 f0       	breq	.+22     	; 0xb28 <Timer_Start+0xaa>
     b12:	81 30       	cpi	r24, 0x01	; 1
     b14:	79 f0       	breq	.+30     	; 0xb34 <Timer_Start+0xb6>
     b16:	6f c0       	rjmp	.+222    	; 0xbf6 <Timer_Start+0x178>
     b18:	86 30       	cpi	r24, 0x06	; 6
     b1a:	09 f1       	breq	.+66     	; 0xb5e <Timer_Start+0xe0>
     b1c:	87 30       	cpi	r24, 0x07	; 7
     b1e:	31 f1       	breq	.+76     	; 0xb6c <Timer_Start+0xee>
     b20:	84 30       	cpi	r24, 0x04	; 4
     b22:	09 f0       	breq	.+2      	; 0xb26 <Timer_Start+0xa8>
     b24:	68 c0       	rjmp	.+208    	; 0xbf6 <Timer_Start+0x178>
     b26:	14 c0       	rjmp	.+40     	; 0xb50 <Timer_Start+0xd2>
     b28:	8e b5       	in	r24, 0x2e	; 46
     b2a:	9f b5       	in	r25, 0x2f	; 47
     b2c:	9f bd       	out	0x2f, r25	; 47
     b2e:	8e bd       	out	0x2e, r24	; 46
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	08 95       	ret
     b34:	8e b5       	in	r24, 0x2e	; 46
     b36:	9f b5       	in	r25, 0x2f	; 47
     b38:	81 60       	ori	r24, 0x01	; 1
     b3a:	9f bd       	out	0x2f, r25	; 47
     b3c:	8e bd       	out	0x2e, r24	; 46
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	08 95       	ret
     b42:	8e b5       	in	r24, 0x2e	; 46
     b44:	9f b5       	in	r25, 0x2f	; 47
     b46:	82 60       	ori	r24, 0x02	; 2
     b48:	9f bd       	out	0x2f, r25	; 47
     b4a:	8e bd       	out	0x2e, r24	; 46
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	08 95       	ret
     b50:	8e b5       	in	r24, 0x2e	; 46
     b52:	9f b5       	in	r25, 0x2f	; 47
     b54:	83 60       	ori	r24, 0x03	; 3
     b56:	9f bd       	out	0x2f, r25	; 47
     b58:	8e bd       	out	0x2e, r24	; 46
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	08 95       	ret
     b5e:	8e b5       	in	r24, 0x2e	; 46
     b60:	9f b5       	in	r25, 0x2f	; 47
     b62:	84 60       	ori	r24, 0x04	; 4
     b64:	9f bd       	out	0x2f, r25	; 47
     b66:	8e bd       	out	0x2e, r24	; 46
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	08 95       	ret
     b6c:	8e b5       	in	r24, 0x2e	; 46
     b6e:	9f b5       	in	r25, 0x2f	; 47
     b70:	85 60       	ori	r24, 0x05	; 5
     b72:	9f bd       	out	0x2f, r25	; 47
     b74:	8e bd       	out	0x2e, r24	; 46
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	08 95       	ret
     b7a:	6f 3f       	cpi	r22, 0xFF	; 255
     b7c:	71 05       	cpc	r23, r1
     b7e:	09 f0       	breq	.+2      	; 0xb82 <Timer_Start+0x104>
     b80:	e0 f5       	brcc	.+120    	; 0xbfa <Timer_Start+0x17c>
     b82:	64 bd       	out	0x24, r22	; 36
     b84:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <genu_timer2prescaler>
     b88:	8e 2f       	mov	r24, r30
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	88 30       	cpi	r24, 0x08	; 8
     b8e:	91 05       	cpc	r25, r1
     b90:	b0 f5       	brcc	.+108    	; 0xbfe <Timer_Start+0x180>
     b92:	fc 01       	movw	r30, r24
     b94:	e6 5d       	subi	r30, 0xD6	; 214
     b96:	ff 4f       	sbci	r31, 0xFF	; 255
     b98:	0c 94 d2 08 	jmp	0x11a4	; 0x11a4 <__tablejump2__>
     b9c:	85 b5       	in	r24, 0x25	; 37
     b9e:	85 bd       	out	0x25, r24	; 37
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	08 95       	ret
     ba4:	85 b5       	in	r24, 0x25	; 37
     ba6:	81 60       	ori	r24, 0x01	; 1
     ba8:	85 bd       	out	0x25, r24	; 37
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	08 95       	ret
     bae:	85 b5       	in	r24, 0x25	; 37
     bb0:	82 60       	ori	r24, 0x02	; 2
     bb2:	85 bd       	out	0x25, r24	; 37
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	08 95       	ret
     bb8:	85 b5       	in	r24, 0x25	; 37
     bba:	83 60       	ori	r24, 0x03	; 3
     bbc:	85 bd       	out	0x25, r24	; 37
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	08 95       	ret
     bc2:	85 b5       	in	r24, 0x25	; 37
     bc4:	84 60       	ori	r24, 0x04	; 4
     bc6:	85 bd       	out	0x25, r24	; 37
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	08 95       	ret
     bcc:	85 b5       	in	r24, 0x25	; 37
     bce:	85 60       	ori	r24, 0x05	; 5
     bd0:	85 bd       	out	0x25, r24	; 37
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	08 95       	ret
     bd6:	85 b5       	in	r24, 0x25	; 37
     bd8:	86 60       	ori	r24, 0x06	; 6
     bda:	85 bd       	out	0x25, r24	; 37
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	08 95       	ret
     be0:	85 b5       	in	r24, 0x25	; 37
     be2:	87 60       	ori	r24, 0x07	; 7
     be4:	85 bd       	out	0x25, r24	; 37
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	08 95       	ret
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	08 95       	ret
     bee:	8f ef       	ldi	r24, 0xFF	; 255
     bf0:	08 95       	ret
     bf2:	8f ef       	ldi	r24, 0xFF	; 255
     bf4:	08 95       	ret
     bf6:	8f ef       	ldi	r24, 0xFF	; 255
     bf8:	08 95       	ret
     bfa:	8f ef       	ldi	r24, 0xFF	; 255
     bfc:	08 95       	ret
     bfe:	8f ef       	ldi	r24, 0xFF	; 255
     c00:	08 95       	ret

00000c02 <Timer_Stop>:
     c02:	81 30       	cpi	r24, 0x01	; 1
     c04:	49 f0       	breq	.+18     	; 0xc18 <Timer_Stop+0x16>
     c06:	18 f0       	brcs	.+6      	; 0xc0e <Timer_Stop+0xc>
     c08:	82 30       	cpi	r24, 0x02	; 2
     c0a:	69 f0       	breq	.+26     	; 0xc26 <Timer_Stop+0x24>
     c0c:	11 c0       	rjmp	.+34     	; 0xc30 <Timer_Stop+0x2e>
     c0e:	83 b7       	in	r24, 0x33	; 51
     c10:	88 7f       	andi	r24, 0xF8	; 248
     c12:	83 bf       	out	0x33, r24	; 51
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	08 95       	ret
     c18:	8e b5       	in	r24, 0x2e	; 46
     c1a:	9f b5       	in	r25, 0x2f	; 47
     c1c:	88 7f       	andi	r24, 0xF8	; 248
     c1e:	9f bd       	out	0x2f, r25	; 47
     c20:	8e bd       	out	0x2e, r24	; 46
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	08 95       	ret
     c26:	85 b5       	in	r24, 0x25	; 37
     c28:	88 7f       	andi	r24, 0xF8	; 248
     c2a:	85 bd       	out	0x25, r24	; 37
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	08 95       	ret
     c30:	8f ef       	ldi	r24, 0xFF	; 255
     c32:	08 95       	ret

00000c34 <Timer_GetValue>:

ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	uint8_t fun_status = OK;
	switch(Timer_CH_NO)
     c34:	81 30       	cpi	r24, 0x01	; 1
     c36:	59 f0       	breq	.+22     	; 0xc4e <Timer_GetValue+0x1a>
     c38:	18 f0       	brcs	.+6      	; 0xc40 <Timer_GetValue+0xc>
     c3a:	82 30       	cpi	r24, 0x02	; 2
     c3c:	79 f0       	breq	.+30     	; 0xc5c <Timer_GetValue+0x28>
     c3e:	15 c0       	rjmp	.+42     	; 0xc6a <Timer_GetValue+0x36>
	{
		case TIMER_CH0:
			*Data = TCNT0;
     c40:	82 b7       	in	r24, 0x32	; 50
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	fb 01       	movw	r30, r22
     c46:	91 83       	std	Z+1, r25	; 0x01
     c48:	80 83       	st	Z, r24
	return fun_status;
}

ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	uint8_t fun_status = OK;
     c4a:	81 e0       	ldi	r24, 0x01	; 1
	switch(Timer_CH_NO)
	{
		case TIMER_CH0:
			*Data = TCNT0;
		break;
     c4c:	08 95       	ret
		case TIMER_CH1:
			*Data = TCNT1;
     c4e:	8c b5       	in	r24, 0x2c	; 44
     c50:	9d b5       	in	r25, 0x2d	; 45
     c52:	fb 01       	movw	r30, r22
     c54:	91 83       	std	Z+1, r25	; 0x01
     c56:	80 83       	st	Z, r24
	return fun_status;
}

ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	uint8_t fun_status = OK;
     c58:	81 e0       	ldi	r24, 0x01	; 1
		case TIMER_CH0:
			*Data = TCNT0;
		break;
		case TIMER_CH1:
			*Data = TCNT1;
		break;
     c5a:	08 95       	ret
		case TIMER_CH2:
			*Data = TCNT2;
     c5c:	84 b5       	in	r24, 0x24	; 36
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	fb 01       	movw	r30, r22
     c62:	91 83       	std	Z+1, r25	; 0x01
     c64:	80 83       	st	Z, r24
	return fun_status;
}

ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	uint8_t fun_status = OK;
     c66:	81 e0       	ldi	r24, 0x01	; 1
		case TIMER_CH1:
			*Data = TCNT1;
		break;
		case TIMER_CH2:
			*Data = TCNT2;
		break;
     c68:	08 95       	ret
		default:
			fun_status = NOK;
     c6a:	8f ef       	ldi	r24, 0xFF	; 255
		break;
	}
	return fun_status;
     c6c:	08 95       	ret

00000c6e <__vector_3>:
/*- GLOBAL EXTERN VARIABLES -------------------------------*/
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/


ISR(INT2_vect)
{
     c6e:	78 94       	sei
     c70:	1f 92       	push	r1
     c72:	0f 92       	push	r0
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	0f 92       	push	r0
     c78:	11 24       	eor	r1, r1
     c7a:	2f 93       	push	r18
     c7c:	3f 93       	push	r19
     c7e:	4f 93       	push	r20
     c80:	5f 93       	push	r21
     c82:	6f 93       	push	r22
     c84:	7f 93       	push	r23
     c86:	8f 93       	push	r24
     c88:	9f 93       	push	r25
     c8a:	af 93       	push	r26
     c8c:	bf 93       	push	r27
     c8e:	ef 93       	push	r30
     c90:	ff 93       	push	r31
	//Led_Toggle(LED_0);
	/*	check for value of overflows
	*	EVEN VALUE start timer 0
	*	ODD value stop timer 0
	*/
	PORTA_DIR   = 0xff;
     c92:	8f ef       	ldi	r24, 0xFF	; 255
     c94:	8a bb       	out	0x1a, r24	; 26
	
	Timer_Start(TIMER_CH2,ZERO);
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	82 e0       	ldi	r24, 0x02	; 2
     c9c:	0e 94 3f 05 	call	0xa7e	; 0xa7e <Timer_Start>
	if(gu8SwICU_INT2_vec_enteranceFlag&1)
     ca0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <gu8SwICU_INT2_vec_enteranceFlag>
     ca4:	80 ff       	sbrs	r24, 0
     ca6:	0c c0       	rjmp	.+24     	; 0xcc0 <__vector_3+0x52>
}


void SwICU_Stop(void){
	/*stop timer */
	Timer_Stop(TIMER_CH2);
     ca8:	82 e0       	ldi	r24, 0x02	; 2
     caa:	0e 94 01 06 	call	0xc02	; 0xc02 <Timer_Stop>
	
	Timer_Start(TIMER_CH2,ZERO);
	if(gu8SwICU_INT2_vec_enteranceFlag&1)
	{
		SwICU_Stop();
		gu8SwICU_INT2_vec_enteranceFlag = FALSE;
     cae:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <gu8SwICU_INT2_vec_enteranceFlag>
		gu8SwICU_Timer2_Stop_Flag = TRUE;
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <gu8SwICU_Timer2_Stop_Flag>
		case EN_INT2:
			switch(swICU_Edge)
			{
				case ICU_FALE_TO_RISE:
					
					SET_BIT(MCUCSR,ISC2);
     cb8:	84 b7       	in	r24, 0x34	; 52
     cba:	80 64       	ori	r24, 0x40	; 64
     cbc:	84 bf       	out	0x34, r24	; 52
     cbe:	0b c0       	rjmp	.+22     	; 0xcd6 <__vector_3+0x68>


void SwICU_Start(void)
{
	/*start timer*/
	Timer_Start(TIMER_CH2,ZERO);
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	82 e0       	ldi	r24, 0x02	; 2
     cc6:	0e 94 3f 05 	call	0xa7e	; 0xa7e <Timer_Start>
		SwICU_SetCfgEdge(ICU_FALE_TO_RISE);
	}
	else
	{
		SwICU_Start();
		gu8SwICU_INT2_vec_enteranceFlag = TRUE;
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <gu8SwICU_INT2_vec_enteranceFlag>
					
					SET_BIT(MCUCSR,ISC2);

				break;
				case ICU_RISE_TO_FALL:
					CLEAR_BIT(MCUCSR,ISC2);
     cd0:	84 b7       	in	r24, 0x34	; 52
     cd2:	8f 7b       	andi	r24, 0xBF	; 191
     cd4:	84 bf       	out	0x34, r24	; 52
	{
		SwICU_Start();
		gu8SwICU_INT2_vec_enteranceFlag = TRUE;
		SwICU_SetCfgEdge(ICU_RISE_TO_FALL);
	}
}
     cd6:	ff 91       	pop	r31
     cd8:	ef 91       	pop	r30
     cda:	bf 91       	pop	r27
     cdc:	af 91       	pop	r26
     cde:	9f 91       	pop	r25
     ce0:	8f 91       	pop	r24
     ce2:	7f 91       	pop	r23
     ce4:	6f 91       	pop	r22
     ce6:	5f 91       	pop	r21
     ce8:	4f 91       	pop	r20
     cea:	3f 91       	pop	r19
     cec:	2f 91       	pop	r18
     cee:	0f 90       	pop	r0
     cf0:	0f be       	out	0x3f, r0	; 63
     cf2:	0f 90       	pop	r0
     cf4:	1f 90       	pop	r1
     cf6:	18 95       	reti

00000cf8 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
     cf8:	78 94       	sei
     cfa:	1f 92       	push	r1
     cfc:	0f 92       	push	r0
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	0f 92       	push	r0
     d02:	11 24       	eor	r1, r1
     d04:	8f 93       	push	r24
     d06:	9f 93       	push	r25
	++gu16SwICU_timer2_Overflow_Counts;
     d08:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <gu16SwICU_timer2_Overflow_Counts>
     d0c:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <gu16SwICU_timer2_Overflow_Counts+0x1>
     d10:	01 96       	adiw	r24, 0x01	; 1
     d12:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <gu16SwICU_timer2_Overflow_Counts+0x1>
     d16:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <gu16SwICU_timer2_Overflow_Counts>
}
     d1a:	9f 91       	pop	r25
     d1c:	8f 91       	pop	r24
     d1e:	0f 90       	pop	r0
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	0f 90       	pop	r0
     d24:	1f 90       	pop	r1
     d26:	18 95       	reti

00000d28 <Icu_Init>:

/*- APIs IMPLEMENTATION -----------------------------------*/


ERROR_STATUS Icu_Init(Icu_cfg_s * Icu_Cfg)
{
     d28:	0f 93       	push	r16
     d2a:	1f 93       	push	r17
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	00 d0       	rcall	.+0      	; 0xd32 <Icu_Init+0xa>
     d32:	00 d0       	rcall	.+0      	; 0xd34 <Icu_Init+0xc>
     d34:	00 d0       	rcall	.+0      	; 0xd36 <Icu_Init+0xe>
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
	/*validate input*/
	uint8_t fun_status = OK;

		if(Icu_Cfg == NULL || Icu_Cfg->ICU_Ch_No > ICU_CH2 || 
     d3a:	00 97       	sbiw	r24, 0x00	; 0
     d3c:	09 f4       	brne	.+2      	; 0xd40 <Icu_Init+0x18>
     d3e:	48 c0       	rjmp	.+144    	; 0xdd0 <Icu_Init+0xa8>
     d40:	fc 01       	movw	r30, r24
     d42:	20 81       	ld	r18, Z
     d44:	23 30       	cpi	r18, 0x03	; 3
     d46:	08 f0       	brcs	.+2      	; 0xd4a <Icu_Init+0x22>
     d48:	45 c0       	rjmp	.+138    	; 0xdd4 <Icu_Init+0xac>
     d4a:	31 81       	ldd	r19, Z+1	; 0x01
     d4c:	33 30       	cpi	r19, 0x03	; 3
     d4e:	08 f0       	brcs	.+2      	; 0xd52 <Icu_Init+0x2a>
     d50:	43 c0       	rjmp	.+134    	; 0xdd8 <Icu_Init+0xb0>
     d52:	8c 01       	movw	r16, r24
*				MCUCR [ISC11 ISC10 ISC01 ISC00]
*				MCUCSR [ISCR2]
*/
static void external_Int_Enable(uint8_t en_externalInt,uint8_t swICU_Edge)
{
	switch (en_externalInt)
     d54:	22 30       	cpi	r18, 0x02	; 2
     d56:	b1 f4       	brne	.+44     	; 0xd84 <Icu_Init+0x5c>
				*  3-clear INT2 flag in GIFR.INTF2
				*  4-enable INT2 in GUCR.INT2
				*  5-make pin direction input POTTB.PIN2
				*  6-enbale global int sei()
				*/
				CLEAR_BIT(GICR,INT2);
     d58:	8b b7       	in	r24, 0x3b	; 59
     d5a:	8f 7d       	andi	r24, 0xDF	; 223
     d5c:	8b bf       	out	0x3b, r24	; 59
				SET_BIT(MCUCSR,ISC2);
     d5e:	84 b7       	in	r24, 0x34	; 52
     d60:	80 64       	ori	r24, 0x40	; 64
     d62:	84 bf       	out	0x34, r24	; 52
				SET_BIT(GIFR,INTF2);/*CLEAR INT FLAG BY SET IT'S BIT TO 1*/
     d64:	8a b7       	in	r24, 0x3a	; 58
     d66:	80 62       	ori	r24, 0x20	; 32
     d68:	8a bf       	out	0x3a, r24	; 58
				SET_BIT(GICR,INT2);
     d6a:	8b b7       	in	r24, 0x3b	; 59
     d6c:	80 62       	ori	r24, 0x20	; 32
     d6e:	8b bf       	out	0x3b, r24	; 59
				DIO_Cfg_s DIO_Cfg;
				DIO_Cfg.dir  = INPUT;
     d70:	1b 82       	std	Y+3, r1	; 0x03
				DIO_Cfg.GPIO = GPIOB;
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	89 83       	std	Y+1, r24	; 0x01
				DIO_Cfg.pins = BIT2;
     d76:	84 e0       	ldi	r24, 0x04	; 4
     d78:	8a 83       	std	Y+2, r24	; 0x02
				DIO_init(&DIO_Cfg);
     d7a:	ce 01       	movw	r24, r28
     d7c:	01 96       	adiw	r24, 0x01	; 1
     d7e:	0e 94 c6 02 	call	0x58c	; 0x58c <DIO_init>
				sei();
     d82:	78 94       	sei
			*  3-zero all used variables
			*/
			Timer_cfg_s timer_cfg;

			external_Int_Enable(Icu_Cfg->ICU_Ch_No,ICU_FALE_TO_RISE);
			switch(Icu_Cfg->ICU_Ch_Timer)
     d84:	f8 01       	movw	r30, r16
     d86:	81 81       	ldd	r24, Z+1	; 0x01
     d88:	88 23       	and	r24, r24
     d8a:	19 f0       	breq	.+6      	; 0xd92 <Icu_Init+0x6a>
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	61 f0       	breq	.+24     	; 0xda8 <Icu_Init+0x80>
     d90:	15 c0       	rjmp	.+42     	; 0xdbc <Icu_Init+0x94>
			{
				case TIMER_CH0:
						timer_cfg.Timer_CH_NO				    =	TIMER_CH0;
     d92:	19 82       	std	Y+1, r1	; 0x01
						timer_cfg.Timer_Mode					=	TIMER_MODE;
     d94:	1a 82       	std	Y+2, r1	; 0x02
						timer_cfg.Timer_Polling_Or_Interrupt	=	TIMER_INTERRUPT_MODE;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	8b 83       	std	Y+3, r24	; 0x03
						timer_cfg.Timer_Prescaler				=   TIMER_PRESCALER_256;
     d9a:	86 e0       	ldi	r24, 0x06	; 6
     d9c:	8c 83       	std	Y+4, r24	; 0x04
						Timer_Init(&timer_cfg);
     d9e:	ce 01       	movw	r24, r28
     da0:	01 96       	adiw	r24, 0x01	; 1
     da2:	0e 94 67 04 	call	0x8ce	; 0x8ce <Timer_Init>
				break;
     da6:	0a c0       	rjmp	.+20     	; 0xdbc <Icu_Init+0x94>
				case TIMER_CH1:
				break;
				case TIMER_CH2:
						timer_cfg.Timer_CH_NO				    =	TIMER_CH2;
     da8:	82 e0       	ldi	r24, 0x02	; 2
     daa:	89 83       	std	Y+1, r24	; 0x01
						timer_cfg.Timer_Mode					=	TIMER_MODE;
     dac:	1a 82       	std	Y+2, r1	; 0x02
						timer_cfg.Timer_Polling_Or_Interrupt	=	TIMER_INTERRUPT_MODE;
     dae:	91 e0       	ldi	r25, 0x01	; 1
     db0:	9b 83       	std	Y+3, r25	; 0x03
						timer_cfg.Timer_Prescaler				=   TIMER_PRESCALER_8;
     db2:	8c 83       	std	Y+4, r24	; 0x04
						Timer_Init(&timer_cfg);
     db4:	ce 01       	movw	r24, r28
     db6:	01 96       	adiw	r24, 0x01	; 1
     db8:	0e 94 67 04 	call	0x8ce	; 0x8ce <Timer_Init>
				break;
			}
			gu16SwICU_timer2_Overflow_Counts = ZERO;
     dbc:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <gu16SwICU_timer2_Overflow_Counts+0x1>
     dc0:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <gu16SwICU_timer2_Overflow_Counts>
			gu8SwICU_INT2_vec_enteranceFlag = ZERO;
     dc4:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <gu8SwICU_INT2_vec_enteranceFlag>
			gu8SwICU_Timer2_Stop_Flag = FALSE;
     dc8:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <gu8SwICU_Timer2_Stop_Flag>


ERROR_STATUS Icu_Init(Icu_cfg_s * Icu_Cfg)
{
	/*validate input*/
	uint8_t fun_status = OK;
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	05 c0       	rjmp	.+10     	; 0xdda <Icu_Init+0xb2>

		if(Icu_Cfg == NULL || Icu_Cfg->ICU_Ch_No > ICU_CH2 || 
			Icu_Cfg->ICU_Ch_Timer > ICU_TIMER_CH2)
		{
				fun_status = NOK;
     dd0:	8f ef       	ldi	r24, 0xFF	; 255
     dd2:	03 c0       	rjmp	.+6      	; 0xdda <Icu_Init+0xb2>
     dd4:	8f ef       	ldi	r24, 0xFF	; 255
     dd6:	01 c0       	rjmp	.+2      	; 0xdda <Icu_Init+0xb2>
     dd8:	8f ef       	ldi	r24, 0xFF	; 255
			gu16SwICU_timer2_Overflow_Counts = ZERO;
			gu8SwICU_INT2_vec_enteranceFlag = ZERO;
			gu8SwICU_Timer2_Stop_Flag = FALSE;
		}
		return fun_status;
}
     dda:	26 96       	adiw	r28, 0x06	; 6
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	f8 94       	cli
     de0:	de bf       	out	0x3e, r29	; 62
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	cd bf       	out	0x3d, r28	; 61
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	1f 91       	pop	r17
     dec:	0f 91       	pop	r16
     dee:	08 95       	ret

00000df0 <Icu_ReadTime>:

ERROR_STATUS Icu_ReadTime(uint8_t Icu_Channel,
						 uint8_t Icu_EdgeToEdge, uint64_t * Icu_Time)
{
     df0:	8f 92       	push	r8
     df2:	9f 92       	push	r9
     df4:	af 92       	push	r10
     df6:	bf 92       	push	r11
     df8:	cf 92       	push	r12
     dfa:	df 92       	push	r13
     dfc:	ef 92       	push	r14
     dfe:	ff 92       	push	r15
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	2a 97       	sbiw	r28, 0x0a	; 10
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	de bf       	out	0x3e, r29	; 62
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	cd bf       	out	0x3d, r28	; 61
	uint8_t fun_status = OK;
	
	if(Icu_Channel > ICU_TIMER_CH2 || Icu_EdgeToEdge > ICU_FALE_TO_RISE || 
     e18:	83 30       	cpi	r24, 0x03	; 3
     e1a:	e8 f5       	brcc	.+122    	; 0xe96 <Icu_ReadTime+0xa6>
     e1c:	63 30       	cpi	r22, 0x03	; 3
     e1e:	e8 f5       	brcc	.+122    	; 0xe9a <Icu_ReadTime+0xaa>
     e20:	41 15       	cp	r20, r1
     e22:	51 05       	cpc	r21, r1
     e24:	e1 f1       	breq	.+120    	; 0xe9e <Icu_ReadTime+0xae>
	* read ticks value
	* set Timer0_Stop_Flag t0 false
	* zero the number of overflow
	* reinitialize timer0 to reset it
	*/
	while(gu8SwICU_Timer2_Stop_Flag == FALSE);
     e26:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <gu8SwICU_Timer2_Stop_Flag>
     e2a:	88 23       	and	r24, r24
     e2c:	e1 f3       	breq	.-8      	; 0xe26 <Icu_ReadTime+0x36>
     e2e:	4a 01       	movw	r8, r20
	uint16_t timerRead ;
	Timer_GetValue(TIMER_CH2,&timerRead);
     e30:	be 01       	movw	r22, r28
     e32:	6f 5f       	subi	r22, 0xFF	; 255
     e34:	7f 4f       	sbci	r23, 0xFF	; 255
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	0e 94 1a 06 	call	0xc34	; 0xc34 <Timer_GetValue>
	*Icu_Time = (gu16SwICU_timer2_Overflow_Counts*(uint64_t)SWICU_TIMER2_RESLUTION)+timerRead;
     e3c:	40 91 70 00 	lds	r20, 0x0070	; 0x800070 <gu16SwICU_timer2_Overflow_Counts>
     e40:	50 91 71 00 	lds	r21, 0x0071	; 0x800071 <gu16SwICU_timer2_Overflow_Counts+0x1>
     e44:	24 2f       	mov	r18, r20
     e46:	35 2f       	mov	r19, r21
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	50 e0       	ldi	r21, 0x00	; 0
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	08 e0       	ldi	r16, 0x08	; 8
     e56:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__ashldi3>
     e5a:	e9 81       	ldd	r30, Y+1	; 0x01
     e5c:	fa 81       	ldd	r31, Y+2	; 0x02
     e5e:	5f 01       	movw	r10, r30
     e60:	c1 2c       	mov	r12, r1
     e62:	d1 2c       	mov	r13, r1
     e64:	e1 2c       	mov	r14, r1
     e66:	f1 2c       	mov	r15, r1
     e68:	00 e0       	ldi	r16, 0x00	; 0
     e6a:	10 e0       	ldi	r17, 0x00	; 0
     e6c:	0e 94 1a 09 	call	0x1234	; 0x1234 <__adddi3>
     e70:	f4 01       	movw	r30, r8
     e72:	20 83       	st	Z, r18
     e74:	31 83       	std	Z+1, r19	; 0x01
     e76:	42 83       	std	Z+2, r20	; 0x02
     e78:	53 83       	std	Z+3, r21	; 0x03
     e7a:	64 83       	std	Z+4, r22	; 0x04
     e7c:	75 83       	std	Z+5, r23	; 0x05
     e7e:	86 83       	std	Z+6, r24	; 0x06
     e80:	97 83       	std	Z+7, r25	; 0x07
	
	gu16SwICU_timer2_Overflow_Counts = ZERO;
     e82:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <gu16SwICU_timer2_Overflow_Counts+0x1>
     e86:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <gu16SwICU_timer2_Overflow_Counts>
	gu8SwICU_INT2_vec_enteranceFlag = ZERO;
     e8a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <gu8SwICU_INT2_vec_enteranceFlag>
	gu8SwICU_Timer2_Stop_Flag = FALSE;
     e8e:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <gu8SwICU_Timer2_Stop_Flag>
}

ERROR_STATUS Icu_ReadTime(uint8_t Icu_Channel,
						 uint8_t Icu_EdgeToEdge, uint64_t * Icu_Time)
{
	uint8_t fun_status = OK;
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	05 c0       	rjmp	.+10     	; 0xea0 <Icu_ReadTime+0xb0>
	
	if(Icu_Channel > ICU_TIMER_CH2 || Icu_EdgeToEdge > ICU_FALE_TO_RISE || 
		Icu_Time == NULL)
	{
		fun_status = NOK;
     e96:	8f ef       	ldi	r24, 0xFF	; 255
     e98:	03 c0       	rjmp	.+6      	; 0xea0 <Icu_ReadTime+0xb0>
     e9a:	8f ef       	ldi	r24, 0xFF	; 255
     e9c:	01 c0       	rjmp	.+2      	; 0xea0 <Icu_ReadTime+0xb0>
     e9e:	8f ef       	ldi	r24, 0xFF	; 255
	gu16SwICU_timer2_Overflow_Counts = ZERO;
	gu8SwICU_INT2_vec_enteranceFlag = ZERO;
	gu8SwICU_Timer2_Stop_Flag = FALSE;
	}
	return fun_status;
}
     ea0:	2a 96       	adiw	r28, 0x0a	; 10
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	cd bf       	out	0x3d, r28	; 61
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	ff 90       	pop	r15
     eb6:	ef 90       	pop	r14
     eb8:	df 90       	pop	r13
     eba:	cf 90       	pop	r12
     ebc:	bf 90       	pop	r11
     ebe:	af 90       	pop	r10
     ec0:	9f 90       	pop	r9
     ec2:	8f 90       	pop	r8
     ec4:	08 95       	ret

00000ec6 <__divsf3>:
     ec6:	0e 94 77 07 	call	0xeee	; 0xeee <__divsf3x>
     eca:	0c 94 76 08 	jmp	0x10ec	; 0x10ec <__fp_round>
     ece:	0e 94 6f 08 	call	0x10de	; 0x10de <__fp_pscB>
     ed2:	58 f0       	brcs	.+22     	; 0xeea <__divsf3+0x24>
     ed4:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__fp_pscA>
     ed8:	40 f0       	brcs	.+16     	; 0xeea <__divsf3+0x24>
     eda:	29 f4       	brne	.+10     	; 0xee6 <__divsf3+0x20>
     edc:	5f 3f       	cpi	r21, 0xFF	; 255
     ede:	29 f0       	breq	.+10     	; 0xeea <__divsf3+0x24>
     ee0:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__fp_inf>
     ee4:	51 11       	cpse	r21, r1
     ee6:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <__fp_szero>
     eea:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <__fp_nan>

00000eee <__divsf3x>:
     eee:	0e 94 87 08 	call	0x110e	; 0x110e <__fp_split3>
     ef2:	68 f3       	brcs	.-38     	; 0xece <__divsf3+0x8>

00000ef4 <__divsf3_pse>:
     ef4:	99 23       	and	r25, r25
     ef6:	b1 f3       	breq	.-20     	; 0xee4 <__divsf3+0x1e>
     ef8:	55 23       	and	r21, r21
     efa:	91 f3       	breq	.-28     	; 0xee0 <__divsf3+0x1a>
     efc:	95 1b       	sub	r25, r21
     efe:	55 0b       	sbc	r21, r21
     f00:	bb 27       	eor	r27, r27
     f02:	aa 27       	eor	r26, r26
     f04:	62 17       	cp	r22, r18
     f06:	73 07       	cpc	r23, r19
     f08:	84 07       	cpc	r24, r20
     f0a:	38 f0       	brcs	.+14     	; 0xf1a <__divsf3_pse+0x26>
     f0c:	9f 5f       	subi	r25, 0xFF	; 255
     f0e:	5f 4f       	sbci	r21, 0xFF	; 255
     f10:	22 0f       	add	r18, r18
     f12:	33 1f       	adc	r19, r19
     f14:	44 1f       	adc	r20, r20
     f16:	aa 1f       	adc	r26, r26
     f18:	a9 f3       	breq	.-22     	; 0xf04 <__divsf3_pse+0x10>
     f1a:	35 d0       	rcall	.+106    	; 0xf86 <__divsf3_pse+0x92>
     f1c:	0e 2e       	mov	r0, r30
     f1e:	3a f0       	brmi	.+14     	; 0xf2e <__divsf3_pse+0x3a>
     f20:	e0 e8       	ldi	r30, 0x80	; 128
     f22:	32 d0       	rcall	.+100    	; 0xf88 <__divsf3_pse+0x94>
     f24:	91 50       	subi	r25, 0x01	; 1
     f26:	50 40       	sbci	r21, 0x00	; 0
     f28:	e6 95       	lsr	r30
     f2a:	00 1c       	adc	r0, r0
     f2c:	ca f7       	brpl	.-14     	; 0xf20 <__divsf3_pse+0x2c>
     f2e:	2b d0       	rcall	.+86     	; 0xf86 <__divsf3_pse+0x92>
     f30:	fe 2f       	mov	r31, r30
     f32:	29 d0       	rcall	.+82     	; 0xf86 <__divsf3_pse+0x92>
     f34:	66 0f       	add	r22, r22
     f36:	77 1f       	adc	r23, r23
     f38:	88 1f       	adc	r24, r24
     f3a:	bb 1f       	adc	r27, r27
     f3c:	26 17       	cp	r18, r22
     f3e:	37 07       	cpc	r19, r23
     f40:	48 07       	cpc	r20, r24
     f42:	ab 07       	cpc	r26, r27
     f44:	b0 e8       	ldi	r27, 0x80	; 128
     f46:	09 f0       	breq	.+2      	; 0xf4a <__divsf3_pse+0x56>
     f48:	bb 0b       	sbc	r27, r27
     f4a:	80 2d       	mov	r24, r0
     f4c:	bf 01       	movw	r22, r30
     f4e:	ff 27       	eor	r31, r31
     f50:	93 58       	subi	r25, 0x83	; 131
     f52:	5f 4f       	sbci	r21, 0xFF	; 255
     f54:	3a f0       	brmi	.+14     	; 0xf64 <__divsf3_pse+0x70>
     f56:	9e 3f       	cpi	r25, 0xFE	; 254
     f58:	51 05       	cpc	r21, r1
     f5a:	78 f0       	brcs	.+30     	; 0xf7a <__divsf3_pse+0x86>
     f5c:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__fp_inf>
     f60:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <__fp_szero>
     f64:	5f 3f       	cpi	r21, 0xFF	; 255
     f66:	e4 f3       	brlt	.-8      	; 0xf60 <__divsf3_pse+0x6c>
     f68:	98 3e       	cpi	r25, 0xE8	; 232
     f6a:	d4 f3       	brlt	.-12     	; 0xf60 <__divsf3_pse+0x6c>
     f6c:	86 95       	lsr	r24
     f6e:	77 95       	ror	r23
     f70:	67 95       	ror	r22
     f72:	b7 95       	ror	r27
     f74:	f7 95       	ror	r31
     f76:	9f 5f       	subi	r25, 0xFF	; 255
     f78:	c9 f7       	brne	.-14     	; 0xf6c <__divsf3_pse+0x78>
     f7a:	88 0f       	add	r24, r24
     f7c:	91 1d       	adc	r25, r1
     f7e:	96 95       	lsr	r25
     f80:	87 95       	ror	r24
     f82:	97 f9       	bld	r25, 7
     f84:	08 95       	ret
     f86:	e1 e0       	ldi	r30, 0x01	; 1
     f88:	66 0f       	add	r22, r22
     f8a:	77 1f       	adc	r23, r23
     f8c:	88 1f       	adc	r24, r24
     f8e:	bb 1f       	adc	r27, r27
     f90:	62 17       	cp	r22, r18
     f92:	73 07       	cpc	r23, r19
     f94:	84 07       	cpc	r24, r20
     f96:	ba 07       	cpc	r27, r26
     f98:	20 f0       	brcs	.+8      	; 0xfa2 <__divsf3_pse+0xae>
     f9a:	62 1b       	sub	r22, r18
     f9c:	73 0b       	sbc	r23, r19
     f9e:	84 0b       	sbc	r24, r20
     fa0:	ba 0b       	sbc	r27, r26
     fa2:	ee 1f       	adc	r30, r30
     fa4:	88 f7       	brcc	.-30     	; 0xf88 <__divsf3_pse+0x94>
     fa6:	e0 95       	com	r30
     fa8:	08 95       	ret

00000faa <__fixsfdi>:
     faa:	be e3       	ldi	r27, 0x3E	; 62
     fac:	04 d0       	rcall	.+8      	; 0xfb6 <__fixunssfdi+0x2>
     fae:	08 f4       	brcc	.+2      	; 0xfb2 <__fixsfdi+0x8>
     fb0:	90 e8       	ldi	r25, 0x80	; 128
     fb2:	08 95       	ret

00000fb4 <__fixunssfdi>:
     fb4:	bf e3       	ldi	r27, 0x3F	; 63
     fb6:	22 27       	eor	r18, r18
     fb8:	33 27       	eor	r19, r19
     fba:	a9 01       	movw	r20, r18
     fbc:	0e 94 8f 08 	call	0x111e	; 0x111e <__fp_splitA>
     fc0:	60 f1       	brcs	.+88     	; 0x101a <__fixunssfdi+0x66>
     fc2:	9f 57       	subi	r25, 0x7F	; 127
     fc4:	48 f1       	brcs	.+82     	; 0x1018 <__fixunssfdi+0x64>
     fc6:	b9 17       	cp	r27, r25
     fc8:	40 f1       	brcs	.+80     	; 0x101a <__fixunssfdi+0x66>
     fca:	bf e3       	ldi	r27, 0x3F	; 63
     fcc:	b9 1b       	sub	r27, r25
     fce:	99 27       	eor	r25, r25
     fd0:	b8 50       	subi	r27, 0x08	; 8
     fd2:	3a f4       	brpl	.+14     	; 0xfe2 <__fixunssfdi+0x2e>
     fd4:	66 0f       	add	r22, r22
     fd6:	77 1f       	adc	r23, r23
     fd8:	88 1f       	adc	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	b3 95       	inc	r27
     fde:	d2 f3       	brmi	.-12     	; 0xfd4 <__fixunssfdi+0x20>
     fe0:	16 c0       	rjmp	.+44     	; 0x100e <__fixunssfdi+0x5a>
     fe2:	b8 50       	subi	r27, 0x08	; 8
     fe4:	4a f0       	brmi	.+18     	; 0xff8 <__fixunssfdi+0x44>
     fe6:	23 2f       	mov	r18, r19
     fe8:	34 2f       	mov	r19, r20
     fea:	45 2f       	mov	r20, r21
     fec:	56 2f       	mov	r21, r22
     fee:	67 2f       	mov	r22, r23
     ff0:	78 2f       	mov	r23, r24
     ff2:	88 27       	eor	r24, r24
     ff4:	b8 50       	subi	r27, 0x08	; 8
     ff6:	ba f7       	brpl	.-18     	; 0xfe6 <__fixunssfdi+0x32>
     ff8:	b8 5f       	subi	r27, 0xF8	; 248
     ffa:	49 f0       	breq	.+18     	; 0x100e <__fixunssfdi+0x5a>
     ffc:	86 95       	lsr	r24
     ffe:	77 95       	ror	r23
    1000:	67 95       	ror	r22
    1002:	57 95       	ror	r21
    1004:	47 95       	ror	r20
    1006:	37 95       	ror	r19
    1008:	27 95       	ror	r18
    100a:	ba 95       	dec	r27
    100c:	b9 f7       	brne	.-18     	; 0xffc <__fixunssfdi+0x48>
    100e:	16 f4       	brtc	.+4      	; 0x1014 <__fixunssfdi+0x60>
    1010:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__fp_negdi>
    1014:	88 94       	clc
    1016:	08 95       	ret
    1018:	88 94       	clc
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	cb 01       	movw	r24, r22
    1020:	08 95       	ret

00001022 <__floatundisf>:
    1022:	e8 94       	clt

00001024 <__fp_di2sf>:
    1024:	f9 2f       	mov	r31, r25
    1026:	96 eb       	ldi	r25, 0xB6	; 182
    1028:	ff 23       	and	r31, r31
    102a:	81 f0       	breq	.+32     	; 0x104c <__fp_di2sf+0x28>
    102c:	12 16       	cp	r1, r18
    102e:	13 06       	cpc	r1, r19
    1030:	14 06       	cpc	r1, r20
    1032:	44 0b       	sbc	r20, r20
    1034:	93 95       	inc	r25
    1036:	f6 95       	lsr	r31
    1038:	87 95       	ror	r24
    103a:	77 95       	ror	r23
    103c:	67 95       	ror	r22
    103e:	57 95       	ror	r21
    1040:	40 40       	sbci	r20, 0x00	; 0
    1042:	ff 23       	and	r31, r31
    1044:	b9 f7       	brne	.-18     	; 0x1034 <__fp_di2sf+0x10>
    1046:	1b c0       	rjmp	.+54     	; 0x107e <__fp_di2sf+0x5a>
    1048:	99 27       	eor	r25, r25
    104a:	08 95       	ret
    104c:	88 23       	and	r24, r24
    104e:	51 f4       	brne	.+20     	; 0x1064 <__fp_di2sf+0x40>
    1050:	98 50       	subi	r25, 0x08	; 8
    1052:	d2 f7       	brpl	.-12     	; 0x1048 <__fp_di2sf+0x24>
    1054:	87 2b       	or	r24, r23
    1056:	76 2f       	mov	r23, r22
    1058:	65 2f       	mov	r22, r21
    105a:	54 2f       	mov	r21, r20
    105c:	43 2f       	mov	r20, r19
    105e:	32 2f       	mov	r19, r18
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	b1 f3       	breq	.-20     	; 0x1050 <__fp_di2sf+0x2c>
    1064:	12 16       	cp	r1, r18
    1066:	13 06       	cpc	r1, r19
    1068:	14 06       	cpc	r1, r20
    106a:	44 0b       	sbc	r20, r20
    106c:	88 23       	and	r24, r24
    106e:	3a f0       	brmi	.+14     	; 0x107e <__fp_di2sf+0x5a>
    1070:	9a 95       	dec	r25
    1072:	44 0f       	add	r20, r20
    1074:	55 1f       	adc	r21, r21
    1076:	66 1f       	adc	r22, r22
    1078:	77 1f       	adc	r23, r23
    107a:	88 1f       	adc	r24, r24
    107c:	ca f7       	brpl	.-14     	; 0x1070 <__fp_di2sf+0x4c>
    107e:	55 23       	and	r21, r21
    1080:	4a f4       	brpl	.+18     	; 0x1094 <__fp_di2sf+0x70>
    1082:	44 0f       	add	r20, r20
    1084:	55 1f       	adc	r21, r21
    1086:	11 f4       	brne	.+4      	; 0x108c <__fp_di2sf+0x68>
    1088:	60 ff       	sbrs	r22, 0
    108a:	04 c0       	rjmp	.+8      	; 0x1094 <__fp_di2sf+0x70>
    108c:	6f 5f       	subi	r22, 0xFF	; 255
    108e:	7f 4f       	sbci	r23, 0xFF	; 255
    1090:	8f 4f       	sbci	r24, 0xFF	; 255
    1092:	9f 4f       	sbci	r25, 0xFF	; 255
    1094:	88 0f       	add	r24, r24
    1096:	96 95       	lsr	r25
    1098:	87 95       	ror	r24
    109a:	97 f9       	bld	r25, 7
    109c:	08 95       	ret

0000109e <__fp_inf>:
    109e:	97 f9       	bld	r25, 7
    10a0:	9f 67       	ori	r25, 0x7F	; 127
    10a2:	80 e8       	ldi	r24, 0x80	; 128
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	08 95       	ret

000010aa <__fp_nan>:
    10aa:	9f ef       	ldi	r25, 0xFF	; 255
    10ac:	80 ec       	ldi	r24, 0xC0	; 192
    10ae:	08 95       	ret

000010b0 <__fp_negdi>:
    10b0:	90 95       	com	r25
    10b2:	80 95       	com	r24
    10b4:	70 95       	com	r23
    10b6:	60 95       	com	r22
    10b8:	50 95       	com	r21
    10ba:	40 95       	com	r20
    10bc:	30 95       	com	r19
    10be:	21 95       	neg	r18
    10c0:	3f 4f       	sbci	r19, 0xFF	; 255
    10c2:	4f 4f       	sbci	r20, 0xFF	; 255
    10c4:	5f 4f       	sbci	r21, 0xFF	; 255
    10c6:	6f 4f       	sbci	r22, 0xFF	; 255
    10c8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ca:	8f 4f       	sbci	r24, 0xFF	; 255
    10cc:	9f 4f       	sbci	r25, 0xFF	; 255
    10ce:	08 95       	ret

000010d0 <__fp_pscA>:
    10d0:	00 24       	eor	r0, r0
    10d2:	0a 94       	dec	r0
    10d4:	16 16       	cp	r1, r22
    10d6:	17 06       	cpc	r1, r23
    10d8:	18 06       	cpc	r1, r24
    10da:	09 06       	cpc	r0, r25
    10dc:	08 95       	ret

000010de <__fp_pscB>:
    10de:	00 24       	eor	r0, r0
    10e0:	0a 94       	dec	r0
    10e2:	12 16       	cp	r1, r18
    10e4:	13 06       	cpc	r1, r19
    10e6:	14 06       	cpc	r1, r20
    10e8:	05 06       	cpc	r0, r21
    10ea:	08 95       	ret

000010ec <__fp_round>:
    10ec:	09 2e       	mov	r0, r25
    10ee:	03 94       	inc	r0
    10f0:	00 0c       	add	r0, r0
    10f2:	11 f4       	brne	.+4      	; 0x10f8 <__fp_round+0xc>
    10f4:	88 23       	and	r24, r24
    10f6:	52 f0       	brmi	.+20     	; 0x110c <__fp_round+0x20>
    10f8:	bb 0f       	add	r27, r27
    10fa:	40 f4       	brcc	.+16     	; 0x110c <__fp_round+0x20>
    10fc:	bf 2b       	or	r27, r31
    10fe:	11 f4       	brne	.+4      	; 0x1104 <__fp_round+0x18>
    1100:	60 ff       	sbrs	r22, 0
    1102:	04 c0       	rjmp	.+8      	; 0x110c <__fp_round+0x20>
    1104:	6f 5f       	subi	r22, 0xFF	; 255
    1106:	7f 4f       	sbci	r23, 0xFF	; 255
    1108:	8f 4f       	sbci	r24, 0xFF	; 255
    110a:	9f 4f       	sbci	r25, 0xFF	; 255
    110c:	08 95       	ret

0000110e <__fp_split3>:
    110e:	57 fd       	sbrc	r21, 7
    1110:	90 58       	subi	r25, 0x80	; 128
    1112:	44 0f       	add	r20, r20
    1114:	55 1f       	adc	r21, r21
    1116:	59 f0       	breq	.+22     	; 0x112e <__fp_splitA+0x10>
    1118:	5f 3f       	cpi	r21, 0xFF	; 255
    111a:	71 f0       	breq	.+28     	; 0x1138 <__fp_splitA+0x1a>
    111c:	47 95       	ror	r20

0000111e <__fp_splitA>:
    111e:	88 0f       	add	r24, r24
    1120:	97 fb       	bst	r25, 7
    1122:	99 1f       	adc	r25, r25
    1124:	61 f0       	breq	.+24     	; 0x113e <__fp_splitA+0x20>
    1126:	9f 3f       	cpi	r25, 0xFF	; 255
    1128:	79 f0       	breq	.+30     	; 0x1148 <__fp_splitA+0x2a>
    112a:	87 95       	ror	r24
    112c:	08 95       	ret
    112e:	12 16       	cp	r1, r18
    1130:	13 06       	cpc	r1, r19
    1132:	14 06       	cpc	r1, r20
    1134:	55 1f       	adc	r21, r21
    1136:	f2 cf       	rjmp	.-28     	; 0x111c <__fp_split3+0xe>
    1138:	46 95       	lsr	r20
    113a:	f1 df       	rcall	.-30     	; 0x111e <__fp_splitA>
    113c:	08 c0       	rjmp	.+16     	; 0x114e <__fp_splitA+0x30>
    113e:	16 16       	cp	r1, r22
    1140:	17 06       	cpc	r1, r23
    1142:	18 06       	cpc	r1, r24
    1144:	99 1f       	adc	r25, r25
    1146:	f1 cf       	rjmp	.-30     	; 0x112a <__fp_splitA+0xc>
    1148:	86 95       	lsr	r24
    114a:	71 05       	cpc	r23, r1
    114c:	61 05       	cpc	r22, r1
    114e:	08 94       	sec
    1150:	08 95       	ret

00001152 <__fp_zero>:
    1152:	e8 94       	clt

00001154 <__fp_szero>:
    1154:	bb 27       	eor	r27, r27
    1156:	66 27       	eor	r22, r22
    1158:	77 27       	eor	r23, r23
    115a:	cb 01       	movw	r24, r22
    115c:	97 f9       	bld	r25, 7
    115e:	08 95       	ret

00001160 <__udivmodsi4>:
    1160:	a1 e2       	ldi	r26, 0x21	; 33
    1162:	1a 2e       	mov	r1, r26
    1164:	aa 1b       	sub	r26, r26
    1166:	bb 1b       	sub	r27, r27
    1168:	fd 01       	movw	r30, r26
    116a:	0d c0       	rjmp	.+26     	; 0x1186 <__udivmodsi4_ep>

0000116c <__udivmodsi4_loop>:
    116c:	aa 1f       	adc	r26, r26
    116e:	bb 1f       	adc	r27, r27
    1170:	ee 1f       	adc	r30, r30
    1172:	ff 1f       	adc	r31, r31
    1174:	a2 17       	cp	r26, r18
    1176:	b3 07       	cpc	r27, r19
    1178:	e4 07       	cpc	r30, r20
    117a:	f5 07       	cpc	r31, r21
    117c:	20 f0       	brcs	.+8      	; 0x1186 <__udivmodsi4_ep>
    117e:	a2 1b       	sub	r26, r18
    1180:	b3 0b       	sbc	r27, r19
    1182:	e4 0b       	sbc	r30, r20
    1184:	f5 0b       	sbc	r31, r21

00001186 <__udivmodsi4_ep>:
    1186:	66 1f       	adc	r22, r22
    1188:	77 1f       	adc	r23, r23
    118a:	88 1f       	adc	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	1a 94       	dec	r1
    1190:	69 f7       	brne	.-38     	; 0x116c <__udivmodsi4_loop>
    1192:	60 95       	com	r22
    1194:	70 95       	com	r23
    1196:	80 95       	com	r24
    1198:	90 95       	com	r25
    119a:	9b 01       	movw	r18, r22
    119c:	ac 01       	movw	r20, r24
    119e:	bd 01       	movw	r22, r26
    11a0:	cf 01       	movw	r24, r30
    11a2:	08 95       	ret

000011a4 <__tablejump2__>:
    11a4:	ee 0f       	add	r30, r30
    11a6:	ff 1f       	adc	r31, r31
    11a8:	05 90       	lpm	r0, Z+
    11aa:	f4 91       	lpm	r31, Z
    11ac:	e0 2d       	mov	r30, r0
    11ae:	09 94       	ijmp

000011b0 <__muluhisi3>:
    11b0:	0e 94 3b 09 	call	0x1276	; 0x1276 <__umulhisi3>
    11b4:	a5 9f       	mul	r26, r21
    11b6:	90 0d       	add	r25, r0
    11b8:	b4 9f       	mul	r27, r20
    11ba:	90 0d       	add	r25, r0
    11bc:	a4 9f       	mul	r26, r20
    11be:	80 0d       	add	r24, r0
    11c0:	91 1d       	adc	r25, r1
    11c2:	11 24       	eor	r1, r1
    11c4:	08 95       	ret

000011c6 <__ashldi3>:
    11c6:	0f 93       	push	r16
    11c8:	08 30       	cpi	r16, 0x08	; 8
    11ca:	90 f0       	brcs	.+36     	; 0x11f0 <__ashldi3+0x2a>
    11cc:	98 2f       	mov	r25, r24
    11ce:	87 2f       	mov	r24, r23
    11d0:	76 2f       	mov	r23, r22
    11d2:	65 2f       	mov	r22, r21
    11d4:	54 2f       	mov	r21, r20
    11d6:	43 2f       	mov	r20, r19
    11d8:	32 2f       	mov	r19, r18
    11da:	22 27       	eor	r18, r18
    11dc:	08 50       	subi	r16, 0x08	; 8
    11de:	f4 cf       	rjmp	.-24     	; 0x11c8 <__ashldi3+0x2>
    11e0:	22 0f       	add	r18, r18
    11e2:	33 1f       	adc	r19, r19
    11e4:	44 1f       	adc	r20, r20
    11e6:	55 1f       	adc	r21, r21
    11e8:	66 1f       	adc	r22, r22
    11ea:	77 1f       	adc	r23, r23
    11ec:	88 1f       	adc	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	0a 95       	dec	r16
    11f2:	b2 f7       	brpl	.-20     	; 0x11e0 <__ashldi3+0x1a>
    11f4:	0f 91       	pop	r16
    11f6:	08 95       	ret

000011f8 <__ashrdi3>:
    11f8:	97 fb       	bst	r25, 7
    11fa:	10 f8       	bld	r1, 0

000011fc <__lshrdi3>:
    11fc:	16 94       	lsr	r1
    11fe:	00 08       	sbc	r0, r0
    1200:	0f 93       	push	r16
    1202:	08 30       	cpi	r16, 0x08	; 8
    1204:	98 f0       	brcs	.+38     	; 0x122c <__lshrdi3+0x30>
    1206:	08 50       	subi	r16, 0x08	; 8
    1208:	23 2f       	mov	r18, r19
    120a:	34 2f       	mov	r19, r20
    120c:	45 2f       	mov	r20, r21
    120e:	56 2f       	mov	r21, r22
    1210:	67 2f       	mov	r22, r23
    1212:	78 2f       	mov	r23, r24
    1214:	89 2f       	mov	r24, r25
    1216:	90 2d       	mov	r25, r0
    1218:	f4 cf       	rjmp	.-24     	; 0x1202 <__lshrdi3+0x6>
    121a:	05 94       	asr	r0
    121c:	97 95       	ror	r25
    121e:	87 95       	ror	r24
    1220:	77 95       	ror	r23
    1222:	67 95       	ror	r22
    1224:	57 95       	ror	r21
    1226:	47 95       	ror	r20
    1228:	37 95       	ror	r19
    122a:	27 95       	ror	r18
    122c:	0a 95       	dec	r16
    122e:	aa f7       	brpl	.-22     	; 0x121a <__lshrdi3+0x1e>
    1230:	0f 91       	pop	r16
    1232:	08 95       	ret

00001234 <__adddi3>:
    1234:	2a 0d       	add	r18, r10
    1236:	3b 1d       	adc	r19, r11
    1238:	4c 1d       	adc	r20, r12
    123a:	5d 1d       	adc	r21, r13
    123c:	6e 1d       	adc	r22, r14
    123e:	7f 1d       	adc	r23, r15
    1240:	80 1f       	adc	r24, r16
    1242:	91 1f       	adc	r25, r17
    1244:	08 95       	ret

00001246 <__adddi3_s8>:
    1246:	00 24       	eor	r0, r0
    1248:	a7 fd       	sbrc	r26, 7
    124a:	00 94       	com	r0
    124c:	2a 0f       	add	r18, r26
    124e:	30 1d       	adc	r19, r0
    1250:	40 1d       	adc	r20, r0
    1252:	50 1d       	adc	r21, r0
    1254:	60 1d       	adc	r22, r0
    1256:	70 1d       	adc	r23, r0
    1258:	80 1d       	adc	r24, r0
    125a:	90 1d       	adc	r25, r0
    125c:	08 95       	ret

0000125e <__cmpdi2_s8>:
    125e:	00 24       	eor	r0, r0
    1260:	a7 fd       	sbrc	r26, 7
    1262:	00 94       	com	r0
    1264:	2a 17       	cp	r18, r26
    1266:	30 05       	cpc	r19, r0
    1268:	40 05       	cpc	r20, r0
    126a:	50 05       	cpc	r21, r0
    126c:	60 05       	cpc	r22, r0
    126e:	70 05       	cpc	r23, r0
    1270:	80 05       	cpc	r24, r0
    1272:	90 05       	cpc	r25, r0
    1274:	08 95       	ret

00001276 <__umulhisi3>:
    1276:	a2 9f       	mul	r26, r18
    1278:	b0 01       	movw	r22, r0
    127a:	b3 9f       	mul	r27, r19
    127c:	c0 01       	movw	r24, r0
    127e:	a3 9f       	mul	r26, r19
    1280:	70 0d       	add	r23, r0
    1282:	81 1d       	adc	r24, r1
    1284:	11 24       	eor	r1, r1
    1286:	91 1d       	adc	r25, r1
    1288:	b2 9f       	mul	r27, r18
    128a:	70 0d       	add	r23, r0
    128c:	81 1d       	adc	r24, r1
    128e:	11 24       	eor	r1, r1
    1290:	91 1d       	adc	r25, r1
    1292:	08 95       	ret

00001294 <_exit>:
    1294:	f8 94       	cli

00001296 <__stop_program>:
    1296:	ff cf       	rjmp	.-2      	; 0x1296 <__stop_program>
