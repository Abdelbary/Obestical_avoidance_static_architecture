
CarStaticDesign.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001012  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000cc  00800060  00001012  000010a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  0080012c  0080012c  00001172  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001172  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018da  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bce  00000000  00000000  00002c36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000113f  00000000  00000000  00003804  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003dc  00000000  00000000  00004944  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aa2  00000000  00000000  00004d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001686  00000000  00000000  000057c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00006e48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 14 03 	jmp	0x628	; 0x628 <__vector_3>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <__vector_5>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	c8 02       	muls	r28, r24
      56:	cc 02       	muls	r28, r28
      58:	d1 02       	muls	r29, r17
      5a:	d6 02       	muls	r29, r22
      5c:	db 02       	muls	r29, r27
      5e:	e0 02       	muls	r30, r16
      60:	e5 02       	muls	r30, r21
      62:	ea 02       	muls	r30, r26

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e2 e1       	ldi	r30, 0x12	; 18
      78:	f0 e1       	ldi	r31, 0x10	; 16
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	ac 32       	cpi	r26, 0x2C	; 44
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	21 e0       	ldi	r18, 0x01	; 1
      88:	ac e2       	ldi	r26, 0x2C	; 44
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	ab 33       	cpi	r26, 0x3B	; 59
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
      9a:	0c 94 07 08 	jmp	0x100e	; 0x100e <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <Us_Init>:
#define	SHIFT_DIVIDE_BY_2						1
#define TICKS_FOR_ONE_ULTRA_SONIC_MICRO_SEC		58.0
#define TEN_DELAY								10

ERROR_STATUS Us_Init(void)
{
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	00 d0       	rcall	.+0      	; 0xac <Us_Init+0xa>
      ac:	00 d0       	rcall	.+0      	; 0xae <Us_Init+0xc>
      ae:	1f 92       	push	r1
      b0:	cd b7       	in	r28, 0x3d	; 61
      b2:	de b7       	in	r29, 0x3e	; 62
	*	3-set ekko pin as INPUT.
	*/
	uint8_t fun_status = OK;
	/*initalize software icu*/
	Icu_cfg_s icu_cfg;
	icu_cfg.ICU_Ch_No = ICU_CH2;
      b4:	82 e0       	ldi	r24, 0x02	; 2
      b6:	89 83       	std	Y+1, r24	; 0x01
	icu_cfg.ICU_Ch_Timer = ICU_TIMER_CH2;
      b8:	8a 83       	std	Y+2, r24	; 0x02
	fun_status &= Icu_Init(&icu_cfg);
      ba:	ce 01       	movw	r24, r28
      bc:	01 96       	adiw	r24, 0x01	; 1
      be:	0e 94 71 03 	call	0x6e2	; 0x6e2 <Icu_Init>
      c2:	18 2f       	mov	r17, r24
	/*initalize trigger pin*/
	DIO_Cfg_s DIO_Cfg;
	DIO_Cfg.GPIO = ICU_TRIGGER_PORT;
      c4:	83 e0       	ldi	r24, 0x03	; 3
      c6:	8b 83       	std	Y+3, r24	; 0x03
	DIO_Cfg.pins = ICU_TRIGGER_PIN;
      c8:	01 e0       	ldi	r16, 0x01	; 1
      ca:	0c 83       	std	Y+4, r16	; 0x04
	DIO_Cfg.dir	 = OUTPUT;
      cc:	8f ef       	ldi	r24, 0xFF	; 255
      ce:	8d 83       	std	Y+5, r24	; 0x05
	fun_status &= DIO_init(&DIO_Cfg);
      d0:	ce 01       	movw	r24, r28
      d2:	03 96       	adiw	r24, 0x03	; 3
      d4:	0e 94 92 00 	call	0x124	; 0x124 <DIO_init>
      d8:	81 23       	and	r24, r17
      da:	18 2f       	mov	r17, r24
      dc:	11 70       	andi	r17, 0x01	; 1

	/*initalize ekko pin*/
	DIO_Cfg.GPIO = ICU_EKKO_PORT;
      de:	0b 83       	std	Y+3, r16	; 0x03
	DIO_Cfg.pins = ICU_EKKO_PIN;
      e0:	84 e0       	ldi	r24, 0x04	; 4
      e2:	8c 83       	std	Y+4, r24	; 0x04
	DIO_Cfg.dir	 = INPUT;
      e4:	1d 82       	std	Y+5, r1	; 0x05
	fun_status &= DIO_init(&DIO_Cfg);
      e6:	ce 01       	movw	r24, r28
      e8:	03 96       	adiw	r24, 0x03	; 3
      ea:	0e 94 92 00 	call	0x124	; 0x124 <DIO_init>
 
	return fun_status;
}
      ee:	81 23       	and	r24, r17
      f0:	0f 90       	pop	r0
      f2:	0f 90       	pop	r0
      f4:	0f 90       	pop	r0
      f6:	0f 90       	pop	r0
      f8:	0f 90       	pop	r0
      fa:	df 91       	pop	r29
      fc:	cf 91       	pop	r28
      fe:	1f 91       	pop	r17
     100:	0f 91       	pop	r16
     102:	08 95       	ret

00000104 <Us_Trigger>:

ERROR_STATUS Us_Trigger(void)
{
	uint8_t fun_status = OK;
	
	fun_status = DIO_Write(ICU_TRIGGER_PORT,ICU_TRIGGER_PIN,HIGH);
     104:	4f ef       	ldi	r20, 0xFF	; 255
     106:	61 e0       	ldi	r22, 0x01	; 1
     108:	83 e0       	ldi	r24, 0x03	; 3
     10a:	0e 94 03 01 	call	0x206	; 0x206 <DIO_Write>
	//_delay_ms(TEN_DELAY);
	fun_status = DIO_Write(ICU_TRIGGER_PORT,ICU_TRIGGER_PIN,LOW);
     10e:	40 e0       	ldi	r20, 0x00	; 0
     110:	61 e0       	ldi	r22, 0x01	; 1
     112:	83 e0       	ldi	r24, 0x03	; 3
     114:	0e 94 03 01 	call	0x206	; 0x206 <DIO_Write>
	
	return fun_status;
}
     118:	08 95       	ret

0000011a <main>:
#include "Application/Steering/Steering.h"
#include "Application/CarSm/car_sm.h"
#include "Test/Us_test/UltraSonic_test.h"
int main(void)
{
	Us_Module_Test();
     11a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <Us_Module_Test>
	
    while (1) 
    {
		Car_SM_Update();
    }*/
}
     11e:	80 e0       	ldi	r24, 0x00	; 0
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	08 95       	ret

00000124 <DIO_init>:

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t u8_fun_status = OK;
    /*check for errors*/
	if((DIO_info->dir != OUTPUT && DIO_info->dir != INPUT) || 
     124:	fc 01       	movw	r30, r24
     126:	22 81       	ldd	r18, Z+2	; 0x02
     128:	3f ef       	ldi	r19, 0xFF	; 255
     12a:	32 0f       	add	r19, r18
     12c:	3e 3f       	cpi	r19, 0xFE	; 254
     12e:	08 f4       	brcc	.+2      	; 0x132 <DIO_init+0xe>
     130:	5c c0       	rjmp	.+184    	; 0x1ea <DIO_init+0xc6>
		DIO_info->GPIO > GPIOD)
     132:	30 81       	ld	r19, Z

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t u8_fun_status = OK;
    /*check for errors*/
	if((DIO_info->dir != OUTPUT && DIO_info->dir != INPUT) || 
     134:	34 30       	cpi	r19, 0x04	; 4
     136:	08 f0       	brcs	.+2      	; 0x13a <DIO_init+0x16>
     138:	5a c0       	rjmp	.+180    	; 0x1ee <DIO_init+0xca>
		u8_fun_status = NOK;
	}
	/*if input is ok proceed with fun process*/
	else
	{
			switch(DIO_info->GPIO)
     13a:	31 30       	cpi	r19, 0x01	; 1
     13c:	d1 f0       	breq	.+52     	; 0x172 <DIO_init+0x4e>
     13e:	28 f0       	brcs	.+10     	; 0x14a <DIO_init+0x26>
     140:	32 30       	cpi	r19, 0x02	; 2
     142:	59 f1       	breq	.+86     	; 0x19a <DIO_init+0x76>
     144:	33 30       	cpi	r19, 0x03	; 3
     146:	e9 f1       	breq	.+122    	; 0x1c2 <DIO_init+0x9e>
     148:	54 c0       	rjmp	.+168    	; 0x1f2 <DIO_init+0xce>
			{
				case GPIOA:
					switch(DIO_info->dir)
     14a:	22 23       	and	r18, r18
     14c:	19 f0       	breq	.+6      	; 0x154 <DIO_init+0x30>
     14e:	2f 3f       	cpi	r18, 0xFF	; 255
     150:	49 f0       	breq	.+18     	; 0x164 <DIO_init+0x40>
     152:	51 c0       	rjmp	.+162    	; 0x1f6 <DIO_init+0xd2>
					{
						case INPUT:
							CLEAR_MASK(PORTA_DIR,DIO_info->pins);
     154:	2a b3       	in	r18, 0x1a	; 26
     156:	fc 01       	movw	r30, r24
     158:	81 81       	ldd	r24, Z+1	; 0x01
     15a:	80 95       	com	r24
     15c:	82 23       	and	r24, r18
     15e:	8a bb       	out	0x1a, r24	; 26
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t u8_fun_status = OK;
     160:	81 e0       	ldi	r24, 0x01	; 1
				case GPIOA:
					switch(DIO_info->dir)
					{
						case INPUT:
							CLEAR_MASK(PORTA_DIR,DIO_info->pins);
						break;
     162:	08 95       	ret
						case OUTPUT:
							SET_MASK(PORTA_DIR,DIO_info->pins);
     164:	2a b3       	in	r18, 0x1a	; 26
     166:	fc 01       	movw	r30, r24
     168:	81 81       	ldd	r24, Z+1	; 0x01
     16a:	82 2b       	or	r24, r18
     16c:	8a bb       	out	0x1a, r24	; 26
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t u8_fun_status = OK;
     16e:	81 e0       	ldi	r24, 0x01	; 1
						case INPUT:
							CLEAR_MASK(PORTA_DIR,DIO_info->pins);
						break;
						case OUTPUT:
							SET_MASK(PORTA_DIR,DIO_info->pins);
						break;
     170:	08 95       	ret
					}
				break;
				case GPIOB:
					switch(DIO_info->dir)
     172:	22 23       	and	r18, r18
     174:	19 f0       	breq	.+6      	; 0x17c <DIO_init+0x58>
     176:	2f 3f       	cpi	r18, 0xFF	; 255
     178:	49 f0       	breq	.+18     	; 0x18c <DIO_init+0x68>
     17a:	3f c0       	rjmp	.+126    	; 0x1fa <DIO_init+0xd6>
					{
						case INPUT:
						CLEAR_MASK(PORTB_DIR,DIO_info->pins);
     17c:	27 b3       	in	r18, 0x17	; 23
     17e:	fc 01       	movw	r30, r24
     180:	81 81       	ldd	r24, Z+1	; 0x01
     182:	80 95       	com	r24
     184:	82 23       	and	r24, r18
     186:	87 bb       	out	0x17, r24	; 23
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t u8_fun_status = OK;
     188:	81 e0       	ldi	r24, 0x01	; 1
				case GPIOB:
					switch(DIO_info->dir)
					{
						case INPUT:
						CLEAR_MASK(PORTB_DIR,DIO_info->pins);
						break;
     18a:	08 95       	ret
						case OUTPUT:
						SET_MASK(PORTB_DIR,DIO_info->pins);
     18c:	27 b3       	in	r18, 0x17	; 23
     18e:	fc 01       	movw	r30, r24
     190:	81 81       	ldd	r24, Z+1	; 0x01
     192:	82 2b       	or	r24, r18
     194:	87 bb       	out	0x17, r24	; 23
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t u8_fun_status = OK;
     196:	81 e0       	ldi	r24, 0x01	; 1
						case INPUT:
						CLEAR_MASK(PORTB_DIR,DIO_info->pins);
						break;
						case OUTPUT:
						SET_MASK(PORTB_DIR,DIO_info->pins);
						break;
     198:	08 95       	ret
					}
				break;
				case GPIOC:
					switch(DIO_info->dir)
     19a:	22 23       	and	r18, r18
     19c:	19 f0       	breq	.+6      	; 0x1a4 <DIO_init+0x80>
     19e:	2f 3f       	cpi	r18, 0xFF	; 255
     1a0:	49 f0       	breq	.+18     	; 0x1b4 <DIO_init+0x90>
     1a2:	2d c0       	rjmp	.+90     	; 0x1fe <DIO_init+0xda>
					{
						case INPUT:
						CLEAR_MASK(PORTC_DIR,DIO_info->pins);
     1a4:	24 b3       	in	r18, 0x14	; 20
     1a6:	fc 01       	movw	r30, r24
     1a8:	81 81       	ldd	r24, Z+1	; 0x01
     1aa:	80 95       	com	r24
     1ac:	82 23       	and	r24, r18
     1ae:	84 bb       	out	0x14, r24	; 20
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t u8_fun_status = OK;
     1b0:	81 e0       	ldi	r24, 0x01	; 1
				case GPIOC:
					switch(DIO_info->dir)
					{
						case INPUT:
						CLEAR_MASK(PORTC_DIR,DIO_info->pins);
						break;
     1b2:	08 95       	ret
						case OUTPUT:
						SET_MASK(PORTC_DIR,DIO_info->pins);
     1b4:	24 b3       	in	r18, 0x14	; 20
     1b6:	fc 01       	movw	r30, r24
     1b8:	81 81       	ldd	r24, Z+1	; 0x01
     1ba:	82 2b       	or	r24, r18
     1bc:	84 bb       	out	0x14, r24	; 20
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t u8_fun_status = OK;
     1be:	81 e0       	ldi	r24, 0x01	; 1
						case INPUT:
						CLEAR_MASK(PORTC_DIR,DIO_info->pins);
						break;
						case OUTPUT:
						SET_MASK(PORTC_DIR,DIO_info->pins);
						break;
     1c0:	08 95       	ret
					}
				break;
				case GPIOD:
					switch(DIO_info->dir)
     1c2:	22 23       	and	r18, r18
     1c4:	19 f0       	breq	.+6      	; 0x1cc <DIO_init+0xa8>
     1c6:	2f 3f       	cpi	r18, 0xFF	; 255
     1c8:	49 f0       	breq	.+18     	; 0x1dc <DIO_init+0xb8>
     1ca:	1b c0       	rjmp	.+54     	; 0x202 <DIO_init+0xde>
					{
						case INPUT:
						CLEAR_MASK(PORTD_DIR,DIO_info->pins);
     1cc:	21 b3       	in	r18, 0x11	; 17
     1ce:	fc 01       	movw	r30, r24
     1d0:	81 81       	ldd	r24, Z+1	; 0x01
     1d2:	80 95       	com	r24
     1d4:	82 23       	and	r24, r18
     1d6:	81 bb       	out	0x11, r24	; 17
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t u8_fun_status = OK;
     1d8:	81 e0       	ldi	r24, 0x01	; 1
				case GPIOD:
					switch(DIO_info->dir)
					{
						case INPUT:
						CLEAR_MASK(PORTD_DIR,DIO_info->pins);
						break;
     1da:	08 95       	ret
						case OUTPUT:
						SET_MASK(PORTD_DIR,DIO_info->pins);
     1dc:	21 b3       	in	r18, 0x11	; 17
     1de:	fc 01       	movw	r30, r24
     1e0:	81 81       	ldd	r24, Z+1	; 0x01
     1e2:	82 2b       	or	r24, r18
     1e4:	81 bb       	out	0x11, r24	; 17
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t u8_fun_status = OK;
     1e6:	81 e0       	ldi	r24, 0x01	; 1
						case INPUT:
						CLEAR_MASK(PORTD_DIR,DIO_info->pins);
						break;
						case OUTPUT:
						SET_MASK(PORTD_DIR,DIO_info->pins);
						break;
     1e8:	08 95       	ret
	uint8_t u8_fun_status = OK;
    /*check for errors*/
	if((DIO_info->dir != OUTPUT && DIO_info->dir != INPUT) || 
		DIO_info->GPIO > GPIOD)
	{
		u8_fun_status = NOK;
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	08 95       	ret
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	08 95       	ret
						SET_MASK(PORTD_DIR,DIO_info->pins);
						break;
					}
				break;
				default:
					u8_fun_status = NOK;
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	08 95       	ret
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t u8_fun_status = OK;
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	08 95       	ret
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	08 95       	ret
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	08 95       	ret
     202:	81 e0       	ldi	r24, 0x01	; 1
					u8_fun_status = NOK;
				break;
			}
	}
	return u8_fun_status;
}
     204:	08 95       	ret

00000206 <DIO_Write>:

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	uint8_t u8_fun_status = OK;
	/*check for errors*/
	if(GPIO > GPIOD || (value != HIGH && value !=LOW))
     206:	84 30       	cpi	r24, 0x04	; 4
     208:	08 f0       	brcs	.+2      	; 0x20c <DIO_Write+0x6>
     20a:	4d c0       	rjmp	.+154    	; 0x2a6 <DIO_Write+0xa0>
     20c:	9f ef       	ldi	r25, 0xFF	; 255
     20e:	94 0f       	add	r25, r20
     210:	9e 3f       	cpi	r25, 0xFE	; 254
     212:	08 f4       	brcc	.+2      	; 0x216 <DIO_Write+0x10>
     214:	4a c0       	rjmp	.+148    	; 0x2aa <DIO_Write+0xa4>
		u8_fun_status = NOK;
	}
	/*if input is ok proceed with fun process*/
	else
	{
		switch(GPIO)
     216:	81 30       	cpi	r24, 0x01	; 1
     218:	b1 f0       	breq	.+44     	; 0x246 <DIO_Write+0x40>
     21a:	28 f0       	brcs	.+10     	; 0x226 <DIO_Write+0x20>
     21c:	82 30       	cpi	r24, 0x02	; 2
     21e:	19 f1       	breq	.+70     	; 0x266 <DIO_Write+0x60>
     220:	83 30       	cpi	r24, 0x03	; 3
     222:	89 f1       	breq	.+98     	; 0x286 <DIO_Write+0x80>
     224:	44 c0       	rjmp	.+136    	; 0x2ae <DIO_Write+0xa8>
		{
			case GPIOA:
			switch(value)
     226:	44 23       	and	r20, r20
     228:	19 f0       	breq	.+6      	; 0x230 <DIO_Write+0x2a>
     22a:	4f 3f       	cpi	r20, 0xFF	; 255
     22c:	39 f0       	breq	.+14     	; 0x23c <DIO_Write+0x36>
     22e:	41 c0       	rjmp	.+130    	; 0x2b2 <DIO_Write+0xac>
			{
				case LOW:
				CLEAR_MASK(PORTA_DATA,pins);
     230:	8b b3       	in	r24, 0x1b	; 27
     232:	60 95       	com	r22
     234:	68 23       	and	r22, r24
     236:	6b bb       	out	0x1b, r22	; 27
}


ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	uint8_t u8_fun_status = OK;
     238:	81 e0       	ldi	r24, 0x01	; 1
			case GPIOA:
			switch(value)
			{
				case LOW:
				CLEAR_MASK(PORTA_DATA,pins);
				break;
     23a:	08 95       	ret
				case HIGH:
				SET_MASK(PORTA_DATA,pins);
     23c:	8b b3       	in	r24, 0x1b	; 27
     23e:	68 2b       	or	r22, r24
     240:	6b bb       	out	0x1b, r22	; 27
}


ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	uint8_t u8_fun_status = OK;
     242:	81 e0       	ldi	r24, 0x01	; 1
				case LOW:
				CLEAR_MASK(PORTA_DATA,pins);
				break;
				case HIGH:
				SET_MASK(PORTA_DATA,pins);
				break;
     244:	08 95       	ret
			}
			break;
			case GPIOB:
			switch(value)
     246:	44 23       	and	r20, r20
     248:	19 f0       	breq	.+6      	; 0x250 <DIO_Write+0x4a>
     24a:	4f 3f       	cpi	r20, 0xFF	; 255
     24c:	39 f0       	breq	.+14     	; 0x25c <DIO_Write+0x56>
     24e:	33 c0       	rjmp	.+102    	; 0x2b6 <DIO_Write+0xb0>
			{
				case LOW:
				CLEAR_MASK(PORTB_DATA,pins);
     250:	88 b3       	in	r24, 0x18	; 24
     252:	60 95       	com	r22
     254:	68 23       	and	r22, r24
     256:	68 bb       	out	0x18, r22	; 24
}


ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	uint8_t u8_fun_status = OK;
     258:	81 e0       	ldi	r24, 0x01	; 1
			case GPIOB:
			switch(value)
			{
				case LOW:
				CLEAR_MASK(PORTB_DATA,pins);
				break;
     25a:	08 95       	ret
				case HIGH:
				SET_MASK(PORTB_DATA,pins);
     25c:	88 b3       	in	r24, 0x18	; 24
     25e:	68 2b       	or	r22, r24
     260:	68 bb       	out	0x18, r22	; 24
}


ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	uint8_t u8_fun_status = OK;
     262:	81 e0       	ldi	r24, 0x01	; 1
				case LOW:
				CLEAR_MASK(PORTB_DATA,pins);
				break;
				case HIGH:
				SET_MASK(PORTB_DATA,pins);
				break;
     264:	08 95       	ret
			}
			break;
			case GPIOC:
			switch(value)
     266:	44 23       	and	r20, r20
     268:	19 f0       	breq	.+6      	; 0x270 <DIO_Write+0x6a>
     26a:	4f 3f       	cpi	r20, 0xFF	; 255
     26c:	39 f0       	breq	.+14     	; 0x27c <DIO_Write+0x76>
     26e:	25 c0       	rjmp	.+74     	; 0x2ba <DIO_Write+0xb4>
			{
				case INPUT:
				CLEAR_MASK(PORTC_DATA,pins);
     270:	85 b3       	in	r24, 0x15	; 21
     272:	60 95       	com	r22
     274:	68 23       	and	r22, r24
     276:	65 bb       	out	0x15, r22	; 21
}


ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	uint8_t u8_fun_status = OK;
     278:	81 e0       	ldi	r24, 0x01	; 1
			case GPIOC:
			switch(value)
			{
				case INPUT:
				CLEAR_MASK(PORTC_DATA,pins);
				break;
     27a:	08 95       	ret
				case OUTPUT:
				SET_MASK(PORTC_DATA,pins);
     27c:	85 b3       	in	r24, 0x15	; 21
     27e:	68 2b       	or	r22, r24
     280:	65 bb       	out	0x15, r22	; 21
}


ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	uint8_t u8_fun_status = OK;
     282:	81 e0       	ldi	r24, 0x01	; 1
				case INPUT:
				CLEAR_MASK(PORTC_DATA,pins);
				break;
				case OUTPUT:
				SET_MASK(PORTC_DATA,pins);
				break;
     284:	08 95       	ret
			}
			break;
			case GPIOD:
			switch(value)
     286:	44 23       	and	r20, r20
     288:	19 f0       	breq	.+6      	; 0x290 <DIO_Write+0x8a>
     28a:	4f 3f       	cpi	r20, 0xFF	; 255
     28c:	39 f0       	breq	.+14     	; 0x29c <DIO_Write+0x96>
     28e:	17 c0       	rjmp	.+46     	; 0x2be <DIO_Write+0xb8>
			{
				case INPUT:
				CLEAR_MASK(PORTD_DATA,pins);
     290:	82 b3       	in	r24, 0x12	; 18
     292:	60 95       	com	r22
     294:	68 23       	and	r22, r24
     296:	62 bb       	out	0x12, r22	; 18
}


ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	uint8_t u8_fun_status = OK;
     298:	81 e0       	ldi	r24, 0x01	; 1
			case GPIOD:
			switch(value)
			{
				case INPUT:
				CLEAR_MASK(PORTD_DATA,pins);
				break;
     29a:	08 95       	ret
				case OUTPUT:
				SET_MASK(PORTD_DATA,pins);
     29c:	82 b3       	in	r24, 0x12	; 18
     29e:	68 2b       	or	r22, r24
     2a0:	62 bb       	out	0x12, r22	; 18
}


ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	uint8_t u8_fun_status = OK;
     2a2:	81 e0       	ldi	r24, 0x01	; 1
				case INPUT:
				CLEAR_MASK(PORTD_DATA,pins);
				break;
				case OUTPUT:
				SET_MASK(PORTD_DATA,pins);
				break;
     2a4:	08 95       	ret
{
	uint8_t u8_fun_status = OK;
	/*check for errors*/
	if(GPIO > GPIOD || (value != HIGH && value !=LOW))
	{
		u8_fun_status = NOK;
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	08 95       	ret
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	08 95       	ret
				SET_MASK(PORTD_DATA,pins);
				break;
			}
			break;
			default:
			u8_fun_status = NOK;
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	08 95       	ret
}


ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	uint8_t u8_fun_status = OK;
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	08 95       	ret
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	08 95       	ret
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	08 95       	ret
     2be:	81 e0       	ldi	r24, 0x01	; 1
			u8_fun_status = NOK;
			break;
		}
	}
	return u8_fun_status;
}
     2c0:	08 95       	ret

000002c2 <Timer_Init>:
/*- GLOBAL EXTERN VARIABLES -------------------------------*/ 
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/ 
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
     2c2:	fc 01       	movw	r30, r24
	uint8_t u8_fun_status = OK;
	switch(Timer_cfg->Timer_CH_NO){
     2c4:	80 81       	ld	r24, Z
     2c6:	81 30       	cpi	r24, 0x01	; 1
     2c8:	09 f4       	brne	.+2      	; 0x2cc <Timer_Init+0xa>
     2ca:	42 c0       	rjmp	.+132    	; 0x350 <Timer_Init+0x8e>
     2cc:	20 f0       	brcs	.+8      	; 0x2d6 <Timer_Init+0x14>
     2ce:	82 30       	cpi	r24, 0x02	; 2
     2d0:	09 f4       	brne	.+2      	; 0x2d4 <Timer_Init+0x12>
     2d2:	98 c0       	rjmp	.+304    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     2d4:	ca c0       	rjmp	.+404    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		case TIMER_CH0:
			/*zero all bits & registers*/
			TCCR0   =  ZERO;
     2d6:	13 be       	out	0x33, r1	; 51
			TCNT0   =  ZERO;
     2d8:	12 be       	out	0x32, r1	; 50
			CLEAR_BIT(TIMSK,TOIE0_BIT);
     2da:	89 b7       	in	r24, 0x39	; 57
     2dc:	8e 7f       	andi	r24, 0xFE	; 254
     2de:	89 bf       	out	0x39, r24	; 57
			CLEAR_BIT(TIMSK,OCIE0_BIT);
     2e0:	89 b7       	in	r24, 0x39	; 57
     2e2:	8d 7f       	andi	r24, 0xFD	; 253
     2e4:	89 bf       	out	0x39, r24	; 57
			SET_BIT(TIFR,TOV0_BIT);/*inturrept flag bit cleared by writing 1 to it*/
     2e6:	88 b7       	in	r24, 0x38	; 56
     2e8:	81 60       	ori	r24, 0x01	; 1
     2ea:	88 bf       	out	0x38, r24	; 56
			
			/* timer mode specify timer clk source either internal or 
			* external clk specified in the prescaler
			*/
			switch(Timer_cfg->Timer_Mode)
     2ec:	81 81       	ldd	r24, Z+1	; 0x01
     2ee:	81 30       	cpi	r24, 0x01	; 1
     2f0:	41 f0       	breq	.+16     	; 0x302 <Timer_Init+0x40>
     2f2:	18 f0       	brcs	.+6      	; 0x2fa <Timer_Init+0x38>
     2f4:	82 30       	cpi	r24, 0x02	; 2
     2f6:	51 f0       	breq	.+20     	; 0x30c <Timer_Init+0x4a>
     2f8:	0e c0       	rjmp	.+28     	; 0x316 <Timer_Init+0x54>
			{
				case TIMER_MODE:
					SET_MASK(TCCR0,T0_timerMod);
     2fa:	83 b7       	in	r24, 0x33	; 51
     2fc:	83 bf       	out	0x33, r24	; 51
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/ 
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
	uint8_t u8_fun_status = OK;
     2fe:	81 e0       	ldi	r24, 0x01	; 1
			*/
			switch(Timer_cfg->Timer_Mode)
			{
				case TIMER_MODE:
					SET_MASK(TCCR0,T0_timerMod);
				break;
     300:	0b c0       	rjmp	.+22     	; 0x318 <Timer_Init+0x56>
				case COUNTER_RISING_MODE:
					SET_MASK(TCCR0,T0_CounterRisingMod);
     302:	83 b7       	in	r24, 0x33	; 51
     304:	87 60       	ori	r24, 0x07	; 7
     306:	83 bf       	out	0x33, r24	; 51
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/ 
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
	uint8_t u8_fun_status = OK;
     308:	81 e0       	ldi	r24, 0x01	; 1
				case TIMER_MODE:
					SET_MASK(TCCR0,T0_timerMod);
				break;
				case COUNTER_RISING_MODE:
					SET_MASK(TCCR0,T0_CounterRisingMod);
				break;
     30a:	06 c0       	rjmp	.+12     	; 0x318 <Timer_Init+0x56>
				case COUNTER_FALLING_MODE:
					SET_MASK(TCCR0,T0_CounterFallingMod);
     30c:	83 b7       	in	r24, 0x33	; 51
     30e:	86 60       	ori	r24, 0x06	; 6
     310:	83 bf       	out	0x33, r24	; 51
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/ 
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
	uint8_t u8_fun_status = OK;
     312:	81 e0       	ldi	r24, 0x01	; 1
				case COUNTER_RISING_MODE:
					SET_MASK(TCCR0,T0_CounterRisingMod);
				break;
				case COUNTER_FALLING_MODE:
					SET_MASK(TCCR0,T0_CounterFallingMod);
				break;
     314:	01 c0       	rjmp	.+2      	; 0x318 <Timer_Init+0x56>
				default:
				u8_fun_status = NOK;
     316:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
			/*check for valid prescaler*/
			switch(Timer_cfg->Timer_Prescaler)
     318:	93 81       	ldd	r25, Z+3	; 0x03
     31a:	94 30       	cpi	r25, 0x04	; 4
     31c:	41 f0       	breq	.+16     	; 0x32e <Timer_Init+0x6c>
     31e:	18 f4       	brcc	.+6      	; 0x326 <Timer_Init+0x64>
     320:	93 30       	cpi	r25, 0x03	; 3
     322:	40 f4       	brcc	.+16     	; 0x334 <Timer_Init+0x72>
     324:	04 c0       	rjmp	.+8      	; 0x32e <Timer_Init+0x6c>
     326:	2a ef       	ldi	r18, 0xFA	; 250
     328:	29 0f       	add	r18, r25
     32a:	22 30       	cpi	r18, 0x02	; 2
     32c:	18 f4       	brcc	.+6      	; 0x334 <Timer_Init+0x72>
				case TIMER_PRESCALER_8:
				case TIMER_PRESCALER_64:
				case TIMER_PRESCALER_256:
				case TIMER_PRESCALER_1024:
					/*valid prescaler*/
					gu8_timer0prescaler	=	Timer_cfg->Timer_Prescaler;
     32e:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <gu8_timer0prescaler>
				break;
     332:	01 c0       	rjmp	.+2      	; 0x336 <Timer_Init+0x74>
				default:
					u8_fun_status = NOK;
     334:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
			switch(Timer_cfg->Timer_Polling_Or_Interrupt)
     336:	92 81       	ldd	r25, Z+2	; 0x02
     338:	99 23       	and	r25, r25
     33a:	19 f0       	breq	.+6      	; 0x342 <Timer_Init+0x80>
     33c:	91 30       	cpi	r25, 0x01	; 1
     33e:	21 f0       	breq	.+8      	; 0x348 <Timer_Init+0x86>
     340:	96 c0       	rjmp	.+300    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
			{
				case TIMER_POLLING_MODE:
					SET_MASK(TIMSK,T0_POLLING);
     342:	99 b7       	in	r25, 0x39	; 57
     344:	99 bf       	out	0x39, r25	; 57
				break;
     346:	08 95       	ret
				case TIMER_INTERRUPT_MODE:
					SET_MASK(TIMSK,T0_INTERRUPT_NORMAL);
     348:	99 b7       	in	r25, 0x39	; 57
     34a:	91 60       	ori	r25, 0x01	; 1
     34c:	99 bf       	out	0x39, r25	; 57
				break;
     34e:	08 95       	ret
			/*zero all registers
			* TCCR1 = TCTN1 = OCR1A = OCR1B = ICR1 = ZERO
			* TIMSK CLEAR BITS [TICIE1 OCIE1A OCIE1B TOIE1]
			* TIFR  CLEAR BITS [ICF1 OCF1A OCF1B TOV1]
			**/
			TCCR1   =  ZERO;
     350:	1f bc       	out	0x2f, r1	; 47
     352:	1e bc       	out	0x2e, r1	; 46
			TCNT1   =  ZERO;
     354:	1d bc       	out	0x2d, r1	; 45
     356:	1c bc       	out	0x2c, r1	; 44
			OCR1A   =  ZERO;
     358:	1b bc       	out	0x2b, r1	; 43
     35a:	1a bc       	out	0x2a, r1	; 42
			OCR1B   =  ZERO;
     35c:	19 bc       	out	0x29, r1	; 41
     35e:	18 bc       	out	0x28, r1	; 40
			ICR1	=  ZERO;
     360:	17 bc       	out	0x27, r1	; 39
     362:	16 bc       	out	0x26, r1	; 38
	
			CLEAR_BIT(TIMSK,TICIE1_BIT);
     364:	89 b7       	in	r24, 0x39	; 57
     366:	8f 7d       	andi	r24, 0xDF	; 223
     368:	89 bf       	out	0x39, r24	; 57
			CLEAR_BIT(TIMSK,OCIE1A_BIT);
     36a:	89 b7       	in	r24, 0x39	; 57
     36c:	8f 7e       	andi	r24, 0xEF	; 239
     36e:	89 bf       	out	0x39, r24	; 57
			CLEAR_BIT(TIMSK,OCIE1B_BIT);
     370:	89 b7       	in	r24, 0x39	; 57
     372:	87 7f       	andi	r24, 0xF7	; 247
     374:	89 bf       	out	0x39, r24	; 57
			CLEAR_BIT(TIMSK,TOIE1_BIT);
     376:	89 b7       	in	r24, 0x39	; 57
     378:	8b 7f       	andi	r24, 0xFB	; 251
     37a:	89 bf       	out	0x39, r24	; 57

			SET_BIT(TIFR,ICF1_BIT);
     37c:	88 b7       	in	r24, 0x38	; 56
     37e:	80 62       	ori	r24, 0x20	; 32
     380:	88 bf       	out	0x38, r24	; 56
			SET_BIT(TIFR,OCF1A_BIT);
     382:	88 b7       	in	r24, 0x38	; 56
     384:	80 61       	ori	r24, 0x10	; 16
     386:	88 bf       	out	0x38, r24	; 56
			SET_BIT(TIFR,OCF1B_BIT);
     388:	88 b7       	in	r24, 0x38	; 56
     38a:	88 60       	ori	r24, 0x08	; 8
     38c:	88 bf       	out	0x38, r24	; 56
			SET_BIT(TIFR,TOV1_BIT);
     38e:	88 b7       	in	r24, 0x38	; 56
     390:	84 60       	ori	r24, 0x04	; 4
     392:	88 bf       	out	0x38, r24	; 56
			
			
			/* timer mode specify timer clk source either internal or 
			* external clk specified in the prescaler
			*/
			switch(Timer_cfg->Timer_Mode)
     394:	81 81       	ldd	r24, Z+1	; 0x01
     396:	81 30       	cpi	r24, 0x01	; 1
     398:	51 f0       	breq	.+20     	; 0x3ae <Timer_Init+0xec>
     39a:	18 f0       	brcs	.+6      	; 0x3a2 <Timer_Init+0xe0>
     39c:	82 30       	cpi	r24, 0x02	; 2
     39e:	71 f0       	breq	.+28     	; 0x3bc <Timer_Init+0xfa>
     3a0:	14 c0       	rjmp	.+40     	; 0x3ca <Timer_Init+0x108>
			{
				case TIMER_MODE:
					SET_MASK(TCCR1,T1_timerMod);
     3a2:	8e b5       	in	r24, 0x2e	; 46
     3a4:	9f b5       	in	r25, 0x2f	; 47
     3a6:	9f bd       	out	0x2f, r25	; 47
     3a8:	8e bd       	out	0x2e, r24	; 46
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/ 
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
	uint8_t u8_fun_status = OK;
     3aa:	81 e0       	ldi	r24, 0x01	; 1
			*/
			switch(Timer_cfg->Timer_Mode)
			{
				case TIMER_MODE:
					SET_MASK(TCCR1,T1_timerMod);
				break;
     3ac:	0f c0       	rjmp	.+30     	; 0x3cc <Timer_Init+0x10a>
				case COUNTER_RISING_MODE:
					SET_MASK(TCCR1,T1_CounterRisingMod);
     3ae:	8e b5       	in	r24, 0x2e	; 46
     3b0:	9f b5       	in	r25, 0x2f	; 47
     3b2:	87 60       	ori	r24, 0x07	; 7
     3b4:	9f bd       	out	0x2f, r25	; 47
     3b6:	8e bd       	out	0x2e, r24	; 46
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/ 
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
	uint8_t u8_fun_status = OK;
     3b8:	81 e0       	ldi	r24, 0x01	; 1
				case TIMER_MODE:
					SET_MASK(TCCR1,T1_timerMod);
				break;
				case COUNTER_RISING_MODE:
					SET_MASK(TCCR1,T1_CounterRisingMod);
				break;
     3ba:	08 c0       	rjmp	.+16     	; 0x3cc <Timer_Init+0x10a>
				case COUNTER_FALLING_MODE:
					SET_MASK(TCCR1,T1_CounterFallingMod);
     3bc:	8e b5       	in	r24, 0x2e	; 46
     3be:	9f b5       	in	r25, 0x2f	; 47
     3c0:	86 60       	ori	r24, 0x06	; 6
     3c2:	9f bd       	out	0x2f, r25	; 47
     3c4:	8e bd       	out	0x2e, r24	; 46
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/ 
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
	uint8_t u8_fun_status = OK;
     3c6:	81 e0       	ldi	r24, 0x01	; 1
				case COUNTER_RISING_MODE:
					SET_MASK(TCCR1,T1_CounterRisingMod);
				break;
				case COUNTER_FALLING_MODE:
					SET_MASK(TCCR1,T1_CounterFallingMod);
				break;
     3c8:	01 c0       	rjmp	.+2      	; 0x3cc <Timer_Init+0x10a>
				default:
					u8_fun_status = NOK;
     3ca:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
				switch(Timer_cfg->Timer_Prescaler)
     3cc:	93 81       	ldd	r25, Z+3	; 0x03
     3ce:	94 30       	cpi	r25, 0x04	; 4
     3d0:	41 f0       	breq	.+16     	; 0x3e2 <Timer_Init+0x120>
     3d2:	18 f4       	brcc	.+6      	; 0x3da <Timer_Init+0x118>
     3d4:	93 30       	cpi	r25, 0x03	; 3
     3d6:	40 f4       	brcc	.+16     	; 0x3e8 <Timer_Init+0x126>
     3d8:	04 c0       	rjmp	.+8      	; 0x3e2 <Timer_Init+0x120>
     3da:	2a ef       	ldi	r18, 0xFA	; 250
     3dc:	29 0f       	add	r18, r25
     3de:	22 30       	cpi	r18, 0x02	; 2
     3e0:	18 f4       	brcc	.+6      	; 0x3e8 <Timer_Init+0x126>
					case TIMER_PRESCALER_NO:
					case TIMER_PRESCALER_8:
					case TIMER_PRESCALER_64:
					case TIMER_PRESCALER_256:
					case TIMER_PRESCALER_1024:
						gu8_timer1prescaler	=	Timer_cfg->Timer_Prescaler;
     3e2:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <gu8_timer1prescaler>
					break;
     3e6:	01 c0       	rjmp	.+2      	; 0x3ea <Timer_Init+0x128>
					default:
						u8_fun_status = NOK;
     3e8:	80 e0       	ldi	r24, 0x00	; 0
					break;
				}
				switch(Timer_cfg->Timer_Polling_Or_Interrupt)
     3ea:	92 81       	ldd	r25, Z+2	; 0x02
     3ec:	99 23       	and	r25, r25
     3ee:	19 f0       	breq	.+6      	; 0x3f6 <Timer_Init+0x134>
     3f0:	91 30       	cpi	r25, 0x01	; 1
     3f2:	21 f0       	breq	.+8      	; 0x3fc <Timer_Init+0x13a>
     3f4:	08 95       	ret
				{
					case TIMER_POLLING_MODE:
						SET_MASK(TIMSK,T1_POLLING);
     3f6:	99 b7       	in	r25, 0x39	; 57
     3f8:	99 bf       	out	0x39, r25	; 57
					break;
     3fa:	08 95       	ret
					case TIMER_INTERRUPT_MODE:
						SET_MASK(TIMSK,T1_INTERRUPT_NORMAL);
     3fc:	99 b7       	in	r25, 0x39	; 57
     3fe:	94 60       	ori	r25, 0x04	; 4
     400:	99 bf       	out	0x39, r25	; 57
					break;
     402:	08 95       	ret
			*			[ASSR]	Asynchronous Status Register [ AS2 TCN2UB OCR2UB TCR2UB] _just set the AS2 bit to 0 to work on internal clk_
			*			[SFIOR] Special Function IO Register [PSR2]
			*/
			
			/*zero all bits & registers*/
			TCCR2   =  ZERO;
     404:	15 bc       	out	0x25, r1	; 37
			TCNT2   =  ZERO;
     406:	14 bc       	out	0x24, r1	; 36
			CLEAR_BIT(TIMSK,TOIE2_BIT);
     408:	89 b7       	in	r24, 0x39	; 57
     40a:	8f 7b       	andi	r24, 0xBF	; 191
     40c:	89 bf       	out	0x39, r24	; 57
			CLEAR_BIT(TIMSK,OCIE2_BIT);
     40e:	89 b7       	in	r24, 0x39	; 57
     410:	8f 77       	andi	r24, 0x7F	; 127
     412:	89 bf       	out	0x39, r24	; 57
			SET_BIT(TIFR,TOV2_BIT);
     414:	88 b7       	in	r24, 0x38	; 56
     416:	80 64       	ori	r24, 0x40	; 64
     418:	88 bf       	out	0x38, r24	; 56
			CLEAR_BIT(ASSR,AS2_BIT);
     41a:	82 b5       	in	r24, 0x22	; 34
     41c:	87 7f       	andi	r24, 0xF7	; 247
     41e:	82 bd       	out	0x22, r24	; 34
			
			/* timer mode specify timer clk source either internal or 
			* external clk specified in the prescaler
			*/
			switch(Timer_cfg->Timer_Mode)
     420:	81 81       	ldd	r24, Z+1	; 0x01
     422:	88 23       	and	r24, r24
     424:	19 f0       	breq	.+6      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     426:	81 30       	cpi	r24, 0x01	; 1
     428:	31 f0       	breq	.+12     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     42a:	0a c0       	rjmp	.+20     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
			{
				case TIMER2_INTERNAL_CLK:
					CLEAR_BIT(ASSR,AS2_BIT);
     42c:	82 b5       	in	r24, 0x22	; 34
     42e:	87 7f       	andi	r24, 0xF7	; 247
     430:	82 bd       	out	0x22, r24	; 34
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/ 
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
	uint8_t u8_fun_status = OK;
     432:	81 e0       	ldi	r24, 0x01	; 1
			*/
			switch(Timer_cfg->Timer_Mode)
			{
				case TIMER2_INTERNAL_CLK:
					CLEAR_BIT(ASSR,AS2_BIT);
				break;
     434:	06 c0       	rjmp	.+12     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
				case TIMER2_EXTERNAL_CLK:
					SET_BIT(ASSR,AS2_BIT);
     436:	82 b5       	in	r24, 0x22	; 34
     438:	88 60       	ori	r24, 0x08	; 8
     43a:	82 bd       	out	0x22, r24	; 34
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/ 
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
	uint8_t u8_fun_status = OK;
     43c:	81 e0       	ldi	r24, 0x01	; 1
				case TIMER2_INTERNAL_CLK:
					CLEAR_BIT(ASSR,AS2_BIT);
				break;
				case TIMER2_EXTERNAL_CLK:
					SET_BIT(ASSR,AS2_BIT);
				break;
     43e:	01 c0       	rjmp	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			    default:
					u8_fun_status = NOK;
     440:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
				switch(Timer_cfg->Timer_Prescaler)
     442:	93 81       	ldd	r25, Z+3	; 0x03
     444:	98 30       	cpi	r25, 0x08	; 8
     446:	18 f4       	brcc	.+6      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
					case TIMER_PRESCALER_32:
					case TIMER_PRESCALER_64:
					case TIMER_PRESCALER_128:
					case TIMER_PRESCALER_256:
					case TIMER_PRESCALER_1024:
						gu8_timer2prescaler	=	Timer_cfg->Timer_Prescaler;
     448:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <__data_end>
					break;
     44c:	01 c0       	rjmp	.+2      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
					default:
						u8_fun_status = NOK;
     44e:	80 e0       	ldi	r24, 0x00	; 0
					break;
				}
				switch(Timer_cfg->Timer_Polling_Or_Interrupt)
     450:	92 81       	ldd	r25, Z+2	; 0x02
     452:	99 23       	and	r25, r25
     454:	19 f0       	breq	.+6      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     456:	91 30       	cpi	r25, 0x01	; 1
     458:	21 f0       	breq	.+8      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     45a:	08 95       	ret
				{
					case TIMER_POLLING_MODE:
						SET_MASK(TIMSK,T2_POLLING);
     45c:	99 b7       	in	r25, 0x39	; 57
     45e:	99 bf       	out	0x39, r25	; 57
					break;
     460:	08 95       	ret
					case TIMER_INTERRUPT_MODE:
						SET_MASK(TIMSK,T2_INTERRUPT_NORMAL);
     462:	99 b7       	in	r25, 0x39	; 57
     464:	90 64       	ori	r25, 0x40	; 64
     466:	99 bf       	out	0x39, r25	; 57
					break;
     468:	08 95       	ret
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/ 
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
	uint8_t u8_fun_status = OK;
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	08 95       	ret
				break;
				case TIMER_INTERRUPT_MODE:
					SET_MASK(TIMSK,T0_INTERRUPT_NORMAL);
				break;
				default:
				u8_fun_status = NOK;
     46e:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}


	return u8_fun_status;
}
     470:	08 95       	ret

00000472 <Timer_Start>:

ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
	uint8_t u8_fun_status = OK;
	switch(Timer_CH_NO)
     472:	81 30       	cpi	r24, 0x01	; 1
     474:	d1 f1       	breq	.+116    	; 0x4ea <Timer_Start+0x78>
     476:	20 f0       	brcs	.+8      	; 0x480 <Timer_Start+0xe>
     478:	82 30       	cpi	r24, 0x02	; 2
     47a:	09 f4       	brne	.+2      	; 0x47e <Timer_Start+0xc>
     47c:	78 c0       	rjmp	.+240    	; 0x56e <Timer_Start+0xfc>
     47e:	af c0       	rjmp	.+350    	; 0x5de <Timer_Start+0x16c>
	{
		case TIMER_CH0:
			if(Timer_Count > TIMER0_RESLUTION)
     480:	6f 3f       	cpi	r22, 0xFF	; 255
     482:	71 05       	cpc	r23, r1
     484:	11 f0       	breq	.+4      	; 0x48a <Timer_Start+0x18>
     486:	08 f0       	brcs	.+2      	; 0x48a <Timer_Start+0x18>
     488:	ac c0       	rjmp	.+344    	; 0x5e2 <Timer_Start+0x170>
				u8_fun_status = NOK;
			}
			else
			{
				/*set TCNT VALUE, SET PRESCALER TO START*/
				TCNT0 = Timer_Count;
     48a:	62 bf       	out	0x32, r22	; 50
				//CLEAR_MASK(TCCR0,TIMER0_PRESCALER_CLEAR_MASK);
				switch(gu8_timer0prescaler)
     48c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <gu8_timer0prescaler>
     490:	82 30       	cpi	r24, 0x02	; 2
     492:	b9 f0       	breq	.+46     	; 0x4c2 <Timer_Start+0x50>
     494:	28 f4       	brcc	.+10     	; 0x4a0 <Timer_Start+0x2e>
     496:	88 23       	and	r24, r24
     498:	59 f0       	breq	.+22     	; 0x4b0 <Timer_Start+0x3e>
     49a:	81 30       	cpi	r24, 0x01	; 1
     49c:	69 f0       	breq	.+26     	; 0x4b8 <Timer_Start+0x46>
     49e:	a3 c0       	rjmp	.+326    	; 0x5e6 <Timer_Start+0x174>
     4a0:	86 30       	cpi	r24, 0x06	; 6
     4a2:	c9 f0       	breq	.+50     	; 0x4d6 <Timer_Start+0x64>
     4a4:	87 30       	cpi	r24, 0x07	; 7
     4a6:	e1 f0       	breq	.+56     	; 0x4e0 <Timer_Start+0x6e>
     4a8:	84 30       	cpi	r24, 0x04	; 4
     4aa:	09 f0       	breq	.+2      	; 0x4ae <Timer_Start+0x3c>
     4ac:	9c c0       	rjmp	.+312    	; 0x5e6 <Timer_Start+0x174>
     4ae:	0e c0       	rjmp	.+28     	; 0x4cc <Timer_Start+0x5a>
				{
					case TIMER_NO_CLOCK:
						SET_MASK(TCCR0,T0_NO_CLOCK);
     4b0:	83 b7       	in	r24, 0x33	; 51
     4b2:	83 bf       	out	0x33, r24	; 51
	return u8_fun_status;
}

ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
	uint8_t u8_fun_status = OK;
     4b4:	81 e0       	ldi	r24, 0x01	; 1
				//CLEAR_MASK(TCCR0,TIMER0_PRESCALER_CLEAR_MASK);
				switch(gu8_timer0prescaler)
				{
					case TIMER_NO_CLOCK:
						SET_MASK(TCCR0,T0_NO_CLOCK);
					break;
     4b6:	08 95       	ret
					case TIMER_PRESCALER_NO:
						SET_MASK(TCCR0,T0_PRESCALER_NO);						
     4b8:	83 b7       	in	r24, 0x33	; 51
     4ba:	81 60       	ori	r24, 0x01	; 1
     4bc:	83 bf       	out	0x33, r24	; 51
	return u8_fun_status;
}

ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
	uint8_t u8_fun_status = OK;
     4be:	81 e0       	ldi	r24, 0x01	; 1
					case TIMER_NO_CLOCK:
						SET_MASK(TCCR0,T0_NO_CLOCK);
					break;
					case TIMER_PRESCALER_NO:
						SET_MASK(TCCR0,T0_PRESCALER_NO);						
					break;				
     4c0:	08 95       	ret
					case TIMER_PRESCALER_8:
						SET_MASK(TCCR0,T0_PRESCALER_8);
     4c2:	83 b7       	in	r24, 0x33	; 51
     4c4:	82 60       	ori	r24, 0x02	; 2
     4c6:	83 bf       	out	0x33, r24	; 51
	return u8_fun_status;
}

ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
	uint8_t u8_fun_status = OK;
     4c8:	81 e0       	ldi	r24, 0x01	; 1
					case TIMER_PRESCALER_NO:
						SET_MASK(TCCR0,T0_PRESCALER_NO);						
					break;				
					case TIMER_PRESCALER_8:
						SET_MASK(TCCR0,T0_PRESCALER_8);
					break;
     4ca:	08 95       	ret
					case TIMER_PRESCALER_64:
						SET_MASK(TCCR0,T0_PRESCALER_64);
     4cc:	83 b7       	in	r24, 0x33	; 51
     4ce:	83 60       	ori	r24, 0x03	; 3
     4d0:	83 bf       	out	0x33, r24	; 51
	return u8_fun_status;
}

ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
	uint8_t u8_fun_status = OK;
     4d2:	81 e0       	ldi	r24, 0x01	; 1
					case TIMER_PRESCALER_8:
						SET_MASK(TCCR0,T0_PRESCALER_8);
					break;
					case TIMER_PRESCALER_64:
						SET_MASK(TCCR0,T0_PRESCALER_64);
					break;
     4d4:	08 95       	ret
					case TIMER_PRESCALER_256:
						SET_MASK(TCCR0,T0_PRESCALER_256);
     4d6:	83 b7       	in	r24, 0x33	; 51
     4d8:	84 60       	ori	r24, 0x04	; 4
     4da:	83 bf       	out	0x33, r24	; 51
	return u8_fun_status;
}

ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
	uint8_t u8_fun_status = OK;
     4dc:	81 e0       	ldi	r24, 0x01	; 1
					case TIMER_PRESCALER_64:
						SET_MASK(TCCR0,T0_PRESCALER_64);
					break;
					case TIMER_PRESCALER_256:
						SET_MASK(TCCR0,T0_PRESCALER_256);
					break;
     4de:	08 95       	ret
					case TIMER_PRESCALER_1024:
						SET_MASK(TCCR0,T0_PRESCALER_1024);
     4e0:	83 b7       	in	r24, 0x33	; 51
     4e2:	85 60       	ori	r24, 0x05	; 5
     4e4:	83 bf       	out	0x33, r24	; 51
	return u8_fun_status;
}

ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
	uint8_t u8_fun_status = OK;
     4e6:	81 e0       	ldi	r24, 0x01	; 1
					case TIMER_PRESCALER_256:
						SET_MASK(TCCR0,T0_PRESCALER_256);
					break;
					case TIMER_PRESCALER_1024:
						SET_MASK(TCCR0,T0_PRESCALER_1024);
					break;
     4e8:	08 95       	ret
				u8_fun_status = NOK;
			}
			else
			{
				/*set TCNT VALUE, SET PRESCALER TO START*/
				TCNT1 = Timer_Count;
     4ea:	7d bd       	out	0x2d, r23	; 45
     4ec:	6c bd       	out	0x2c, r22	; 44
				CLEAR_MASK(TCCR1,TIMER1_PRESCALER_CLEAR_MASK);
     4ee:	8e b5       	in	r24, 0x2e	; 46
     4f0:	9f b5       	in	r25, 0x2f	; 47
     4f2:	88 7f       	andi	r24, 0xF8	; 248
     4f4:	9f bd       	out	0x2f, r25	; 47
     4f6:	8e bd       	out	0x2e, r24	; 46
				switch(gu8_timer1prescaler)
     4f8:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <gu8_timer1prescaler>
     4fc:	82 30       	cpi	r24, 0x02	; 2
     4fe:	d9 f0       	breq	.+54     	; 0x536 <Timer_Start+0xc4>
     500:	28 f4       	brcc	.+10     	; 0x50c <Timer_Start+0x9a>
     502:	88 23       	and	r24, r24
     504:	59 f0       	breq	.+22     	; 0x51c <Timer_Start+0xaa>
     506:	81 30       	cpi	r24, 0x01	; 1
     508:	79 f0       	breq	.+30     	; 0x528 <Timer_Start+0xb6>
     50a:	6f c0       	rjmp	.+222    	; 0x5ea <Timer_Start+0x178>
     50c:	86 30       	cpi	r24, 0x06	; 6
     50e:	09 f1       	breq	.+66     	; 0x552 <Timer_Start+0xe0>
     510:	87 30       	cpi	r24, 0x07	; 7
     512:	31 f1       	breq	.+76     	; 0x560 <Timer_Start+0xee>
     514:	84 30       	cpi	r24, 0x04	; 4
     516:	09 f0       	breq	.+2      	; 0x51a <Timer_Start+0xa8>
     518:	68 c0       	rjmp	.+208    	; 0x5ea <Timer_Start+0x178>
     51a:	14 c0       	rjmp	.+40     	; 0x544 <Timer_Start+0xd2>
				{
					case TIMER_NO_CLOCK:
						SET_MASK(TCCR1,T1_NO_CLOCK);
     51c:	8e b5       	in	r24, 0x2e	; 46
     51e:	9f b5       	in	r25, 0x2f	; 47
     520:	9f bd       	out	0x2f, r25	; 47
     522:	8e bd       	out	0x2e, r24	; 46
	return u8_fun_status;
}

ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
	uint8_t u8_fun_status = OK;
     524:	81 e0       	ldi	r24, 0x01	; 1
				CLEAR_MASK(TCCR1,TIMER1_PRESCALER_CLEAR_MASK);
				switch(gu8_timer1prescaler)
				{
					case TIMER_NO_CLOCK:
						SET_MASK(TCCR1,T1_NO_CLOCK);
					break;
     526:	08 95       	ret
					case TIMER_PRESCALER_NO:
						SET_MASK(TCCR1,T1_PRESCALER_NO);
     528:	8e b5       	in	r24, 0x2e	; 46
     52a:	9f b5       	in	r25, 0x2f	; 47
     52c:	81 60       	ori	r24, 0x01	; 1
     52e:	9f bd       	out	0x2f, r25	; 47
     530:	8e bd       	out	0x2e, r24	; 46
	return u8_fun_status;
}

ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
	uint8_t u8_fun_status = OK;
     532:	81 e0       	ldi	r24, 0x01	; 1
					case TIMER_NO_CLOCK:
						SET_MASK(TCCR1,T1_NO_CLOCK);
					break;
					case TIMER_PRESCALER_NO:
						SET_MASK(TCCR1,T1_PRESCALER_NO);
					break;
     534:	08 95       	ret
					case TIMER_PRESCALER_8:
						SET_MASK(TCCR1,T1_PRESCALER_8);
     536:	8e b5       	in	r24, 0x2e	; 46
     538:	9f b5       	in	r25, 0x2f	; 47
     53a:	82 60       	ori	r24, 0x02	; 2
     53c:	9f bd       	out	0x2f, r25	; 47
     53e:	8e bd       	out	0x2e, r24	; 46
	return u8_fun_status;
}

ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
	uint8_t u8_fun_status = OK;
     540:	81 e0       	ldi	r24, 0x01	; 1
					case TIMER_PRESCALER_NO:
						SET_MASK(TCCR1,T1_PRESCALER_NO);
					break;
					case TIMER_PRESCALER_8:
						SET_MASK(TCCR1,T1_PRESCALER_8);
					break;
     542:	08 95       	ret
					case TIMER_PRESCALER_64:
						SET_MASK(TCCR1,T1_PRESCALER_64);
     544:	8e b5       	in	r24, 0x2e	; 46
     546:	9f b5       	in	r25, 0x2f	; 47
     548:	83 60       	ori	r24, 0x03	; 3
     54a:	9f bd       	out	0x2f, r25	; 47
     54c:	8e bd       	out	0x2e, r24	; 46
	return u8_fun_status;
}

ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
	uint8_t u8_fun_status = OK;
     54e:	81 e0       	ldi	r24, 0x01	; 1
					case TIMER_PRESCALER_8:
						SET_MASK(TCCR1,T1_PRESCALER_8);
					break;
					case TIMER_PRESCALER_64:
						SET_MASK(TCCR1,T1_PRESCALER_64);
					break;
     550:	08 95       	ret
					case TIMER_PRESCALER_256:
						SET_MASK(TCCR1,T1_PRESCALER_256);
     552:	8e b5       	in	r24, 0x2e	; 46
     554:	9f b5       	in	r25, 0x2f	; 47
     556:	84 60       	ori	r24, 0x04	; 4
     558:	9f bd       	out	0x2f, r25	; 47
     55a:	8e bd       	out	0x2e, r24	; 46
	return u8_fun_status;
}

ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
	uint8_t u8_fun_status = OK;
     55c:	81 e0       	ldi	r24, 0x01	; 1
					case TIMER_PRESCALER_64:
						SET_MASK(TCCR1,T1_PRESCALER_64);
					break;
					case TIMER_PRESCALER_256:
						SET_MASK(TCCR1,T1_PRESCALER_256);
					break;
     55e:	08 95       	ret
					case TIMER_PRESCALER_1024:
						SET_MASK(TCCR1,T1_PRESCALER_1024);
     560:	8e b5       	in	r24, 0x2e	; 46
     562:	9f b5       	in	r25, 0x2f	; 47
     564:	85 60       	ori	r24, 0x05	; 5
     566:	9f bd       	out	0x2f, r25	; 47
     568:	8e bd       	out	0x2e, r24	; 46
	return u8_fun_status;
}

ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
	uint8_t u8_fun_status = OK;
     56a:	81 e0       	ldi	r24, 0x01	; 1
					case TIMER_PRESCALER_256:
						SET_MASK(TCCR1,T1_PRESCALER_256);
					break;
					case TIMER_PRESCALER_1024:
						SET_MASK(TCCR1,T1_PRESCALER_1024);
					break;
     56c:	08 95       	ret
					break;
				}		
		}
		break;
		case TIMER_CH2:
			if(Timer_Count > TIMER2_RESLUTION)
     56e:	6f 3f       	cpi	r22, 0xFF	; 255
     570:	71 05       	cpc	r23, r1
     572:	09 f0       	breq	.+2      	; 0x576 <Timer_Start+0x104>
     574:	e0 f5       	brcc	.+120    	; 0x5ee <Timer_Start+0x17c>
				u8_fun_status = NOK;
			}
			else
			{
				/*set TCNT VALUE, SET PRESCALER TO START*/
				TCNT2 = Timer_Count;
     576:	64 bd       	out	0x24, r22	; 36
				//CLEAR_MASK(TCCR2,TIMER2_PRESCALER_CLEAR_MASK);
				switch(gu8_timer2prescaler)
     578:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <__data_end>
     57c:	8e 2f       	mov	r24, r30
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	88 30       	cpi	r24, 0x08	; 8
     582:	91 05       	cpc	r25, r1
     584:	b0 f5       	brcc	.+108    	; 0x5f2 <Timer_Start+0x180>
     586:	fc 01       	movw	r30, r24
     588:	e6 5d       	subi	r30, 0xD6	; 214
     58a:	ff 4f       	sbci	r31, 0xFF	; 255
     58c:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <__tablejump2__>
				{
					case TIMER_NO_CLOCK:
						SET_MASK(TCCR2,T2_NO_CLOCK);
     590:	85 b5       	in	r24, 0x25	; 37
     592:	85 bd       	out	0x25, r24	; 37
	return u8_fun_status;
}

ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
	uint8_t u8_fun_status = OK;
     594:	81 e0       	ldi	r24, 0x01	; 1
				//CLEAR_MASK(TCCR2,TIMER2_PRESCALER_CLEAR_MASK);
				switch(gu8_timer2prescaler)
				{
					case TIMER_NO_CLOCK:
						SET_MASK(TCCR2,T2_NO_CLOCK);
					break;
     596:	08 95       	ret
					case TIMER_PRESCALER_NO:
						SET_MASK(TCCR2,T2_PRESCALER_NO);
     598:	85 b5       	in	r24, 0x25	; 37
     59a:	81 60       	ori	r24, 0x01	; 1
     59c:	85 bd       	out	0x25, r24	; 37
	return u8_fun_status;
}

ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
	uint8_t u8_fun_status = OK;
     59e:	81 e0       	ldi	r24, 0x01	; 1
					case TIMER_NO_CLOCK:
						SET_MASK(TCCR2,T2_NO_CLOCK);
					break;
					case TIMER_PRESCALER_NO:
						SET_MASK(TCCR2,T2_PRESCALER_NO);
					break;
     5a0:	08 95       	ret
					case TIMER_PRESCALER_8:
						SET_MASK(TCCR2,T2_PRESCALER_8);
     5a2:	85 b5       	in	r24, 0x25	; 37
     5a4:	82 60       	ori	r24, 0x02	; 2
     5a6:	85 bd       	out	0x25, r24	; 37
	return u8_fun_status;
}

ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
	uint8_t u8_fun_status = OK;
     5a8:	81 e0       	ldi	r24, 0x01	; 1
					case TIMER_PRESCALER_NO:
						SET_MASK(TCCR2,T2_PRESCALER_NO);
					break;
					case TIMER_PRESCALER_8:
						SET_MASK(TCCR2,T2_PRESCALER_8);
					break;
     5aa:	08 95       	ret
					case TIMER_PRESCALER_32:
						SET_MASK(TCCR2,T2_PRESCALER_32);
     5ac:	85 b5       	in	r24, 0x25	; 37
     5ae:	83 60       	ori	r24, 0x03	; 3
     5b0:	85 bd       	out	0x25, r24	; 37
	return u8_fun_status;
}

ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
	uint8_t u8_fun_status = OK;
     5b2:	81 e0       	ldi	r24, 0x01	; 1
					case TIMER_PRESCALER_8:
						SET_MASK(TCCR2,T2_PRESCALER_8);
					break;
					case TIMER_PRESCALER_32:
						SET_MASK(TCCR2,T2_PRESCALER_32);
					break;
     5b4:	08 95       	ret
					case TIMER_PRESCALER_64:
						SET_MASK(TCCR2,T2_PRESCALER_64);
     5b6:	85 b5       	in	r24, 0x25	; 37
     5b8:	84 60       	ori	r24, 0x04	; 4
     5ba:	85 bd       	out	0x25, r24	; 37
	return u8_fun_status;
}

ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
	uint8_t u8_fun_status = OK;
     5bc:	81 e0       	ldi	r24, 0x01	; 1
					case TIMER_PRESCALER_32:
						SET_MASK(TCCR2,T2_PRESCALER_32);
					break;
					case TIMER_PRESCALER_64:
						SET_MASK(TCCR2,T2_PRESCALER_64);
					break;
     5be:	08 95       	ret
					case T2_PRESCALER_128:
						SET_MASK(TCCR2,T2_PRESCALER_128);
     5c0:	85 b5       	in	r24, 0x25	; 37
     5c2:	85 60       	ori	r24, 0x05	; 5
     5c4:	85 bd       	out	0x25, r24	; 37
	return u8_fun_status;
}

ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
	uint8_t u8_fun_status = OK;
     5c6:	81 e0       	ldi	r24, 0x01	; 1
					case TIMER_PRESCALER_64:
						SET_MASK(TCCR2,T2_PRESCALER_64);
					break;
					case T2_PRESCALER_128:
						SET_MASK(TCCR2,T2_PRESCALER_128);
					break;
     5c8:	08 95       	ret
					case TIMER_PRESCALER_256:
						SET_MASK(TCCR2,T2_PRESCALER_256);
     5ca:	85 b5       	in	r24, 0x25	; 37
     5cc:	86 60       	ori	r24, 0x06	; 6
     5ce:	85 bd       	out	0x25, r24	; 37
	return u8_fun_status;
}

ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
	uint8_t u8_fun_status = OK;
     5d0:	81 e0       	ldi	r24, 0x01	; 1
					case T2_PRESCALER_128:
						SET_MASK(TCCR2,T2_PRESCALER_128);
					break;
					case TIMER_PRESCALER_256:
						SET_MASK(TCCR2,T2_PRESCALER_256);
					break;
     5d2:	08 95       	ret
					case TIMER_PRESCALER_1024:
						SET_MASK(TCCR2,T2_PRESCALER_1024);
     5d4:	85 b5       	in	r24, 0x25	; 37
     5d6:	87 60       	ori	r24, 0x07	; 7
     5d8:	85 bd       	out	0x25, r24	; 37
	return u8_fun_status;
}

ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
	uint8_t u8_fun_status = OK;
     5da:	81 e0       	ldi	r24, 0x01	; 1
					case TIMER_PRESCALER_256:
						SET_MASK(TCCR2,T2_PRESCALER_256);
					break;
					case TIMER_PRESCALER_1024:
						SET_MASK(TCCR2,T2_PRESCALER_1024);
					break;
     5dc:	08 95       	ret
	return u8_fun_status;
}

ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
	uint8_t u8_fun_status = OK;
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	08 95       	ret
	switch(Timer_CH_NO)
	{
		case TIMER_CH0:
			if(Timer_Count > TIMER0_RESLUTION)
			{
				u8_fun_status = NOK;
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	08 95       	ret
					break;
					case TIMER_PRESCALER_1024:
						SET_MASK(TCCR0,T0_PRESCALER_1024);
					break;
					default:
						u8_fun_status = NOK;
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	08 95       	ret
					break;
					case TIMER_PRESCALER_1024:
						SET_MASK(TCCR1,T1_PRESCALER_1024);
					break;
					default:
						u8_fun_status = NOK;
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	08 95       	ret
		}
		break;
		case TIMER_CH2:
			if(Timer_Count > TIMER2_RESLUTION)
			{
				u8_fun_status = NOK;
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	08 95       	ret
					break;
					case TIMER_PRESCALER_1024:
						SET_MASK(TCCR2,T2_PRESCALER_1024);
					break;
					default:
						u8_fun_status = NOK;
     5f2:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		break;
	}
	return u8_fun_status;
}
     5f4:	08 95       	ret

000005f6 <Timer_Stop>:


ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{
	uint8_t u8_fun_status = OK;
	switch(Timer_CH_NO)
     5f6:	81 30       	cpi	r24, 0x01	; 1
     5f8:	49 f0       	breq	.+18     	; 0x60c <Timer_Stop+0x16>
     5fa:	18 f0       	brcs	.+6      	; 0x602 <Timer_Stop+0xc>
     5fc:	82 30       	cpi	r24, 0x02	; 2
     5fe:	69 f0       	breq	.+26     	; 0x61a <Timer_Stop+0x24>
     600:	11 c0       	rjmp	.+34     	; 0x624 <Timer_Stop+0x2e>
	{
		case TIMER_CH0:
			CLEAR_MASK(TCCR0,TIMER0_PRESCALER_CLEAR_MASK);			
     602:	83 b7       	in	r24, 0x33	; 51
     604:	88 7f       	andi	r24, 0xF8	; 248
     606:	83 bf       	out	0x33, r24	; 51
}


ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{
	uint8_t u8_fun_status = OK;
     608:	81 e0       	ldi	r24, 0x01	; 1
	switch(Timer_CH_NO)
	{
		case TIMER_CH0:
			CLEAR_MASK(TCCR0,TIMER0_PRESCALER_CLEAR_MASK);			
		break;
     60a:	08 95       	ret
		case TIMER_CH1:
			CLEAR_MASK(TCCR1,TIMER1_PRESCALER_CLEAR_MASK);
     60c:	8e b5       	in	r24, 0x2e	; 46
     60e:	9f b5       	in	r25, 0x2f	; 47
     610:	88 7f       	andi	r24, 0xF8	; 248
     612:	9f bd       	out	0x2f, r25	; 47
     614:	8e bd       	out	0x2e, r24	; 46
}


ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{
	uint8_t u8_fun_status = OK;
     616:	81 e0       	ldi	r24, 0x01	; 1
		case TIMER_CH0:
			CLEAR_MASK(TCCR0,TIMER0_PRESCALER_CLEAR_MASK);			
		break;
		case TIMER_CH1:
			CLEAR_MASK(TCCR1,TIMER1_PRESCALER_CLEAR_MASK);
		break;
     618:	08 95       	ret
		case TIMER_CH2:
			CLEAR_MASK(TCCR2,TIMER2_PRESCALER_CLEAR_MASK);
     61a:	85 b5       	in	r24, 0x25	; 37
     61c:	88 7f       	andi	r24, 0xF8	; 248
     61e:	85 bd       	out	0x25, r24	; 37
}


ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{
	uint8_t u8_fun_status = OK;
     620:	81 e0       	ldi	r24, 0x01	; 1
		case TIMER_CH1:
			CLEAR_MASK(TCCR1,TIMER1_PRESCALER_CLEAR_MASK);
		break;
		case TIMER_CH2:
			CLEAR_MASK(TCCR2,TIMER2_PRESCALER_CLEAR_MASK);
		break;
     622:	08 95       	ret
		default:
			u8_fun_status = NOK;
     624:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return u8_fun_status;
}
     626:	08 95       	ret

00000628 <__vector_3>:
/*- GLOBAL EXTERN VARIABLES -------------------------------*/
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/


ISR(INT2_vect)
{
     628:	78 94       	sei
     62a:	1f 92       	push	r1
     62c:	0f 92       	push	r0
     62e:	0f b6       	in	r0, 0x3f	; 63
     630:	0f 92       	push	r0
     632:	11 24       	eor	r1, r1
     634:	2f 93       	push	r18
     636:	3f 93       	push	r19
     638:	4f 93       	push	r20
     63a:	5f 93       	push	r21
     63c:	6f 93       	push	r22
     63e:	7f 93       	push	r23
     640:	8f 93       	push	r24
     642:	9f 93       	push	r25
     644:	af 93       	push	r26
     646:	bf 93       	push	r27
     648:	ef 93       	push	r30
     64a:	ff 93       	push	r31
	//Led_Toggle(LED_0);
	/*	check for value of overflows
	*	EVEN VALUE start timer 0
	*	ODD value stop timer 0
	*/
	PORTA_DIR   = HIGH;
     64c:	8f ef       	ldi	r24, 0xFF	; 255
     64e:	8a bb       	out	0x1a, r24	; 26
	
	Timer_Start(TIMER_CH2,ZERO);
     650:	60 e0       	ldi	r22, 0x00	; 0
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	82 e0       	ldi	r24, 0x02	; 2
     656:	0e 94 39 02 	call	0x472	; 0x472 <Timer_Start>
	if(gu8SwICU_INT2_vec_enteranceFlag&TRUE)
     65a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <gu8SwICU_INT2_vec_enteranceFlag>
     65e:	80 ff       	sbrs	r24, 0
     660:	0c c0       	rjmp	.+24     	; 0x67a <__vector_3+0x52>


ERROR_STATUS SwICU_Stop(void){
	/*stop timer */
	uint8_t u8_fun_status = OK;
	u8_fun_status = Timer_Stop(TIMER_CH2);
     662:	82 e0       	ldi	r24, 0x02	; 2
     664:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <Timer_Stop>
	
	Timer_Start(TIMER_CH2,ZERO);
	if(gu8SwICU_INT2_vec_enteranceFlag&TRUE)
	{
		SwICU_Stop();
		gu8SwICU_INT2_vec_enteranceFlag = FALSE;
     668:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <gu8SwICU_INT2_vec_enteranceFlag>
		gu8SwICU_Timer2_Stop_Flag = TRUE;
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <gu8SwICU_Timer2_Stop_Flag>
		case EN_INT2:
			switch(swICU_Edge)
			{
				case ICU_FALE_TO_RISE:
					
					SET_BIT(MCUCSR,ISC2);
     672:	84 b7       	in	r24, 0x34	; 52
     674:	80 64       	ori	r24, 0x40	; 64
     676:	84 bf       	out	0x34, r24	; 52
     678:	0b c0       	rjmp	.+22     	; 0x690 <__vector_3+0x68>

ERROR_STATUS SwICU_Start(void)
{
	/*start timer*/
	uint8_t u8_fun_status = OK;
	u8_fun_status = Timer_Start(TIMER_CH2,ZERO);
     67a:	60 e0       	ldi	r22, 0x00	; 0
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	82 e0       	ldi	r24, 0x02	; 2
     680:	0e 94 39 02 	call	0x472	; 0x472 <Timer_Start>
		SwICU_SetCfgEdge(ICU_FALE_TO_RISE);
	}
	else
	{
		SwICU_Start();
		gu8SwICU_INT2_vec_enteranceFlag = TRUE;
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <gu8SwICU_INT2_vec_enteranceFlag>
					
					SET_BIT(MCUCSR,ISC2);

				break;
				case ICU_RISE_TO_FALL:
					CLEAR_BIT(MCUCSR,ISC2);
     68a:	84 b7       	in	r24, 0x34	; 52
     68c:	8f 7b       	andi	r24, 0xBF	; 191
     68e:	84 bf       	out	0x34, r24	; 52
	{
		SwICU_Start();
		gu8SwICU_INT2_vec_enteranceFlag = TRUE;
		SwICU_SetCfgEdge(ICU_RISE_TO_FALL);
	}
}
     690:	ff 91       	pop	r31
     692:	ef 91       	pop	r30
     694:	bf 91       	pop	r27
     696:	af 91       	pop	r26
     698:	9f 91       	pop	r25
     69a:	8f 91       	pop	r24
     69c:	7f 91       	pop	r23
     69e:	6f 91       	pop	r22
     6a0:	5f 91       	pop	r21
     6a2:	4f 91       	pop	r20
     6a4:	3f 91       	pop	r19
     6a6:	2f 91       	pop	r18
     6a8:	0f 90       	pop	r0
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	0f 90       	pop	r0
     6ae:	1f 90       	pop	r1
     6b0:	18 95       	reti

000006b2 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
     6b2:	78 94       	sei
     6b4:	1f 92       	push	r1
     6b6:	0f 92       	push	r0
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	0f 92       	push	r0
     6bc:	11 24       	eor	r1, r1
     6be:	8f 93       	push	r24
     6c0:	9f 93       	push	r25
	++gu16SwICU_timer2_Overflow_Counts;
     6c2:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <gu16SwICU_timer2_Overflow_Counts>
     6c6:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <gu16SwICU_timer2_Overflow_Counts+0x1>
     6ca:	01 96       	adiw	r24, 0x01	; 1
     6cc:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <gu16SwICU_timer2_Overflow_Counts+0x1>
     6d0:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <gu16SwICU_timer2_Overflow_Counts>
}
     6d4:	9f 91       	pop	r25
     6d6:	8f 91       	pop	r24
     6d8:	0f 90       	pop	r0
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	0f 90       	pop	r0
     6de:	1f 90       	pop	r1
     6e0:	18 95       	reti

000006e2 <Icu_Init>:

/*- APIs IMPLEMENTATION -----------------------------------*/


ERROR_STATUS Icu_Init(Icu_cfg_s * Icu_Cfg)
{
     6e2:	0f 93       	push	r16
     6e4:	1f 93       	push	r17
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	00 d0       	rcall	.+0      	; 0x6ec <Icu_Init+0xa>
     6ec:	00 d0       	rcall	.+0      	; 0x6ee <Icu_Init+0xc>
     6ee:	00 d0       	rcall	.+0      	; 0x6f0 <Icu_Init+0xe>
     6f0:	cd b7       	in	r28, 0x3d	; 61
     6f2:	de b7       	in	r29, 0x3e	; 62
	/*validate input*/
	uint8_t u8_fun_status = OK;

		if(Icu_Cfg == NULL || Icu_Cfg->ICU_Ch_No > ICU_CH2 || 
     6f4:	00 97       	sbiw	r24, 0x00	; 0
     6f6:	09 f4       	brne	.+2      	; 0x6fa <Icu_Init+0x18>
     6f8:	48 c0       	rjmp	.+144    	; 0x78a <Icu_Init+0xa8>
     6fa:	fc 01       	movw	r30, r24
     6fc:	20 81       	ld	r18, Z
     6fe:	23 30       	cpi	r18, 0x03	; 3
     700:	08 f0       	brcs	.+2      	; 0x704 <Icu_Init+0x22>
     702:	45 c0       	rjmp	.+138    	; 0x78e <Icu_Init+0xac>
     704:	31 81       	ldd	r19, Z+1	; 0x01
     706:	33 30       	cpi	r19, 0x03	; 3
     708:	08 f0       	brcs	.+2      	; 0x70c <Icu_Init+0x2a>
     70a:	43 c0       	rjmp	.+134    	; 0x792 <Icu_Init+0xb0>
     70c:	8c 01       	movw	r16, r24
	if(en_externalInt > EN_INT0 || swICU_Edge > ICU_RISE_TO_FALL)
	{
		u8_fun_status = NOK;
	}
	
	switch (en_externalInt)
     70e:	22 30       	cpi	r18, 0x02	; 2
     710:	b1 f4       	brne	.+44     	; 0x73e <Icu_Init+0x5c>
				*  3-clear INT2 flag in GIFR.INTF2
				*  4-enable INT2 in GUCR.INT2
				*  5-make pin direction input POTTB.PIN2
				*  6-enbale global int sei()
				*/
				CLEAR_BIT(GICR,INT2);
     712:	8b b7       	in	r24, 0x3b	; 59
     714:	8f 7d       	andi	r24, 0xDF	; 223
     716:	8b bf       	out	0x3b, r24	; 59
				SET_BIT(MCUCSR,ISC2);
     718:	84 b7       	in	r24, 0x34	; 52
     71a:	80 64       	ori	r24, 0x40	; 64
     71c:	84 bf       	out	0x34, r24	; 52
				SET_BIT(GIFR,INTF2);/*CLEAR INT FLAG BY SET IT'S BIT TO 1*/
     71e:	8a b7       	in	r24, 0x3a	; 58
     720:	80 62       	ori	r24, 0x20	; 32
     722:	8a bf       	out	0x3a, r24	; 58
				SET_BIT(GICR,INT2);
     724:	8b b7       	in	r24, 0x3b	; 59
     726:	80 62       	ori	r24, 0x20	; 32
     728:	8b bf       	out	0x3b, r24	; 59
				DIO_Cfg_s DIO_Cfg;
				DIO_Cfg.dir  = INPUT;
     72a:	1b 82       	std	Y+3, r1	; 0x03
				DIO_Cfg.GPIO = GPIOB;
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	89 83       	std	Y+1, r24	; 0x01
				DIO_Cfg.pins = BIT2;
     730:	84 e0       	ldi	r24, 0x04	; 4
     732:	8a 83       	std	Y+2, r24	; 0x02
				DIO_init(&DIO_Cfg);
     734:	ce 01       	movw	r24, r28
     736:	01 96       	adiw	r24, 0x01	; 1
     738:	0e 94 92 00 	call	0x124	; 0x124 <DIO_init>
				sei();
     73c:	78 94       	sei
			*  3-zero all used variables
			*/
			Timer_cfg_s str_timer_cfg;

			external_Int_Enable(Icu_Cfg->ICU_Ch_No,ICU_FALE_TO_RISE);
			switch(Icu_Cfg->ICU_Ch_Timer)
     73e:	f8 01       	movw	r30, r16
     740:	81 81       	ldd	r24, Z+1	; 0x01
     742:	88 23       	and	r24, r24
     744:	19 f0       	breq	.+6      	; 0x74c <Icu_Init+0x6a>
     746:	82 30       	cpi	r24, 0x02	; 2
     748:	61 f0       	breq	.+24     	; 0x762 <Icu_Init+0x80>
     74a:	15 c0       	rjmp	.+42     	; 0x776 <Icu_Init+0x94>
			{
				case TIMER_CH0:
						str_timer_cfg.Timer_CH_NO				    =	TIMER_CH0;
     74c:	19 82       	std	Y+1, r1	; 0x01
						str_timer_cfg.Timer_Mode					=	TIMER_MODE;
     74e:	1a 82       	std	Y+2, r1	; 0x02
						str_timer_cfg.Timer_Polling_Or_Interrupt	=	TIMER_INTERRUPT_MODE;
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	8b 83       	std	Y+3, r24	; 0x03
						str_timer_cfg.Timer_Prescaler				=   TIMER_PRESCALER_256;
     754:	86 e0       	ldi	r24, 0x06	; 6
     756:	8c 83       	std	Y+4, r24	; 0x04
						Timer_Init(&str_timer_cfg);
     758:	ce 01       	movw	r24, r28
     75a:	01 96       	adiw	r24, 0x01	; 1
     75c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <Timer_Init>
				break;
     760:	0a c0       	rjmp	.+20     	; 0x776 <Icu_Init+0x94>
				case TIMER_CH1:
				break;
				case TIMER_CH2:
						str_timer_cfg.Timer_CH_NO				    =	TIMER_CH2;
     762:	82 e0       	ldi	r24, 0x02	; 2
     764:	89 83       	std	Y+1, r24	; 0x01
						str_timer_cfg.Timer_Mode					=	TIMER_MODE;
     766:	1a 82       	std	Y+2, r1	; 0x02
						str_timer_cfg.Timer_Polling_Or_Interrupt	=	TIMER_INTERRUPT_MODE;
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	9b 83       	std	Y+3, r25	; 0x03
						str_timer_cfg.Timer_Prescaler				=   TIMER_PRESCALER_8;
     76c:	8c 83       	std	Y+4, r24	; 0x04
						Timer_Init(&str_timer_cfg);
     76e:	ce 01       	movw	r24, r28
     770:	01 96       	adiw	r24, 0x01	; 1
     772:	0e 94 61 01 	call	0x2c2	; 0x2c2 <Timer_Init>
				break;
			}
			gu16SwICU_timer2_Overflow_Counts = ZERO;
     776:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <gu16SwICU_timer2_Overflow_Counts+0x1>
     77a:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <gu16SwICU_timer2_Overflow_Counts>
			gu8SwICU_INT2_vec_enteranceFlag = ZERO;
     77e:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <gu8SwICU_INT2_vec_enteranceFlag>
			gu8SwICU_Timer2_Stop_Flag = FALSE;
     782:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <gu8SwICU_Timer2_Stop_Flag>


ERROR_STATUS Icu_Init(Icu_cfg_s * Icu_Cfg)
{
	/*validate input*/
	uint8_t u8_fun_status = OK;
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	05 c0       	rjmp	.+10     	; 0x794 <Icu_Init+0xb2>

		if(Icu_Cfg == NULL || Icu_Cfg->ICU_Ch_No > ICU_CH2 || 
			Icu_Cfg->ICU_Ch_Timer > ICU_TIMER_CH2)
		{
				u8_fun_status = NOK;
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	03 c0       	rjmp	.+6      	; 0x794 <Icu_Init+0xb2>
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	01 c0       	rjmp	.+2      	; 0x794 <Icu_Init+0xb2>
     792:	80 e0       	ldi	r24, 0x00	; 0
			gu16SwICU_timer2_Overflow_Counts = ZERO;
			gu8SwICU_INT2_vec_enteranceFlag = ZERO;
			gu8SwICU_Timer2_Stop_Flag = FALSE;
		}
		return u8_fun_status;
}
     794:	26 96       	adiw	r28, 0x06	; 6
     796:	0f b6       	in	r0, 0x3f	; 63
     798:	f8 94       	cli
     79a:	de bf       	out	0x3e, r29	; 62
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	cd bf       	out	0x3d, r28	; 61
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	08 95       	ret

000007aa <US_Init_test>:
	US_Init_test();
	Us_Trigger_test();
}

void US_Init_test(void)
{
     7aa:	4f 92       	push	r4
     7ac:	5f 92       	push	r5
     7ae:	6f 92       	push	r6
     7b0:	7f 92       	push	r7
     7b2:	8f 92       	push	r8
     7b4:	9f 92       	push	r9
     7b6:	af 92       	push	r10
     7b8:	bf 92       	push	r11
     7ba:	cf 92       	push	r12
     7bc:	df 92       	push	r13
     7be:	ef 92       	push	r14
     7c0:	ff 92       	push	r15
     7c2:	0f 93       	push	r16
     7c4:	1f 93       	push	r17
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
	uint8_t fun1stateIndx;
	uint8_t fun2stateIndx;
	uint8_t Us_init_fun_status;
	uint8_t testCaseNumber = 0;
	
	printf("\t\t-----------------Us_Init_TEST-------------\n");
     7ca:	80 e6       	ldi	r24, 0x60	; 96
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 0f 05 	call	0xa1e	; 0xa1e <puts>
     7d2:	0f 2e       	mov	r0, r31
     7d4:	f9 e2       	ldi	r31, 0x29	; 41
     7d6:	8f 2e       	mov	r8, r31
     7d8:	f1 e0       	ldi	r31, 0x01	; 1
     7da:	9f 2e       	mov	r9, r31
     7dc:	f0 2d       	mov	r31, r0
     7de:	74 01       	movw	r14, r8
void US_Init_test(void)
{
	uint8_t fun1stateIndx;
	uint8_t fun2stateIndx;
	uint8_t Us_init_fun_status;
	uint8_t testCaseNumber = 0;
     7e0:	c0 e0       	ldi	r28, 0x00	; 0
			gu8_DIO_Init_fun_status = gau8_fun_status[fun2stateIndx];
			Us_init_fun_status = Us_Init();
			if(Us_init_fun_status == (gu8_Icu_Init_fun_status&&gu8_DIO_Init_fun_status) )
			printf("testCase %d  Passed.\n",testCaseNumber);
			else
			printf("testCase %d  Failed.\n",testCaseNumber);
     7e2:	0f 2e       	mov	r0, r31
     7e4:	f3 ea       	ldi	r31, 0xA3	; 163
     7e6:	cf 2e       	mov	r12, r31
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	df 2e       	mov	r13, r31
     7ec:	f0 2d       	mov	r31, r0
		{
			gu8_Icu_Init_fun_status = gau8_fun_status[fun1stateIndx];
			gu8_DIO_Init_fun_status = gau8_fun_status[fun2stateIndx];
			Us_init_fun_status = Us_Init();
			if(Us_init_fun_status == (gu8_Icu_Init_fun_status&&gu8_DIO_Init_fun_status) )
			printf("testCase %d  Passed.\n",testCaseNumber);
     7ee:	0f 2e       	mov	r0, r31
     7f0:	fd e8       	ldi	r31, 0x8D	; 141
     7f2:	af 2e       	mov	r10, r31
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	bf 2e       	mov	r11, r31
     7f8:	f0 2d       	mov	r31, r0
		fun2stateIndx++)
		{
			gu8_Icu_Init_fun_status = gau8_fun_status[fun1stateIndx];
			gu8_DIO_Init_fun_status = gau8_fun_status[fun2stateIndx];
			Us_init_fun_status = Us_Init();
			if(Us_init_fun_status == (gu8_Icu_Init_fun_status&&gu8_DIO_Init_fun_status) )
     7fa:	61 2c       	mov	r6, r1
     7fc:	71 2c       	mov	r7, r1
     7fe:	44 24       	eor	r4, r4
     800:	43 94       	inc	r4
     802:	51 2c       	mov	r5, r1
     804:	3e c0       	rjmp	.+124    	; 0x882 <__stack+0x23>
	{
		for (fun2stateIndx = ZERO ;
		fun2stateIndx < FUN_STATUS_COUNT ;
		fun2stateIndx++)
		{
			gu8_Icu_Init_fun_status = gau8_fun_status[fun1stateIndx];
     806:	f7 01       	movw	r30, r14
     808:	80 81       	ld	r24, Z
     80a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <gu8_Icu_Init_fun_status>
			gu8_DIO_Init_fun_status = gau8_fun_status[fun2stateIndx];
     80e:	f8 01       	movw	r30, r16
     810:	81 91       	ld	r24, Z+
     812:	8f 01       	movw	r16, r30
     814:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <gu8_DIO_Init_fun_status>
			Us_init_fun_status = Us_Init();
     818:	0e 94 51 00 	call	0xa2	; 0xa2 <Us_Init>
			if(Us_init_fun_status == (gu8_Icu_Init_fun_status&&gu8_DIO_Init_fun_status) )
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <gu8_Icu_Init_fun_status>
     822:	22 23       	and	r18, r18
     824:	59 f0       	breq	.+22     	; 0x83c <US_Init_test+0x92>
     826:	54 2d       	mov	r21, r4
     828:	45 2d       	mov	r20, r5
     82a:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <gu8_DIO_Init_fun_status>
     82e:	21 11       	cpse	r18, r1
     830:	02 c0       	rjmp	.+4      	; 0x836 <US_Init_test+0x8c>
     832:	56 2d       	mov	r21, r6
     834:	47 2d       	mov	r20, r7
     836:	25 2f       	mov	r18, r21
     838:	34 2f       	mov	r19, r20
     83a:	02 c0       	rjmp	.+4      	; 0x840 <US_Init_test+0x96>
     83c:	26 2d       	mov	r18, r6
     83e:	37 2d       	mov	r19, r7
     840:	28 17       	cp	r18, r24
     842:	39 07       	cpc	r19, r25
     844:	59 f4       	brne	.+22     	; 0x85c <US_Init_test+0xb2>
			printf("testCase %d  Passed.\n",testCaseNumber);
     846:	1f 92       	push	r1
     848:	cf 93       	push	r28
     84a:	bf 92       	push	r11
     84c:	af 92       	push	r10
     84e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <printf>
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	0a c0       	rjmp	.+20     	; 0x870 <__stack+0x11>
			else
			printf("testCase %d  Failed.\n",testCaseNumber);
     85c:	1f 92       	push	r1
     85e:	cf 93       	push	r28
     860:	df 92       	push	r13
     862:	cf 92       	push	r12
     864:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <printf>
     868:	0f 90       	pop	r0
     86a:	0f 90       	pop	r0
     86c:	0f 90       	pop	r0
     86e:	0f 90       	pop	r0
			testCaseNumber++;
     870:	cf 5f       	subi	r28, 0xFF	; 255
	printf("\t\t-----------------Us_Init_TEST-------------\n");
	for(fun1stateIndx = ZERO ;
	fun1stateIndx < FUN_STATUS_COUNT ;
	fun1stateIndx++)
	{
		for (fun2stateIndx = ZERO ;
     872:	cd 13       	cpse	r28, r29
     874:	c8 cf       	rjmp	.-112    	; 0x806 <US_Init_test+0x5c>
     876:	ff ef       	ldi	r31, 0xFF	; 255
     878:	ef 1a       	sub	r14, r31
     87a:	ff 0a       	sbc	r15, r31
			Us_init_fun_status = Us_Init();
			if(Us_init_fun_status == (gu8_Icu_Init_fun_status&&gu8_DIO_Init_fun_status) )
			printf("testCase %d  Passed.\n",testCaseNumber);
			else
			printf("testCase %d  Failed.\n",testCaseNumber);
			testCaseNumber++;
     87c:	cd 2f       	mov	r28, r29
	uint8_t fun2stateIndx;
	uint8_t Us_init_fun_status;
	uint8_t testCaseNumber = 0;
	
	printf("\t\t-----------------Us_Init_TEST-------------\n");
	for(fun1stateIndx = ZERO ;
     87e:	d4 30       	cpi	r29, 0x04	; 4
     880:	21 f0       	breq	.+8      	; 0x88a <__stack+0x2b>
     882:	d2 e0       	ldi	r29, 0x02	; 2
     884:	dc 0f       	add	r29, r28
	US_Init_test();
	Us_Trigger_test();
}

void US_Init_test(void)
{
     886:	84 01       	movw	r16, r8
     888:	be cf       	rjmp	.-132    	; 0x806 <US_Init_test+0x5c>
			printf("testCase %d  Failed.\n",testCaseNumber);
			testCaseNumber++;
		}
	}
	
}
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	1f 91       	pop	r17
     890:	0f 91       	pop	r16
     892:	ff 90       	pop	r15
     894:	ef 90       	pop	r14
     896:	df 90       	pop	r13
     898:	cf 90       	pop	r12
     89a:	bf 90       	pop	r11
     89c:	af 90       	pop	r10
     89e:	9f 90       	pop	r9
     8a0:	8f 90       	pop	r8
     8a2:	7f 90       	pop	r7
     8a4:	6f 90       	pop	r6
     8a6:	5f 90       	pop	r5
     8a8:	4f 90       	pop	r4
     8aa:	08 95       	ret

000008ac <Us_Trigger_test>:
	
	uint8_t fun1stateIndx;
	uint8_t fun2stateIndx;
	uint8_t Us_Trigger_fun_status;
	uint8_t testCaseNumber = 0;
	printf("\t\t-----------------Us_Trigger_TEST----------\n");
     8ac:	89 eb       	ldi	r24, 0xB9	; 185
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	0e 94 0f 05 	call	0xa1e	; 0xa1e <puts>
	{
		for (fun2stateIndx = ZERO ;
		fun2stateIndx < FUN_STATUS_COUNT ;
		fun2stateIndx++)
		{
			gu8_Icu_Init_fun_status = gau8_fun_status[fun1stateIndx];
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <gu8_Icu_Init_fun_status>
			gu8_DIO_Init_fun_status = gau8_fun_status[fun2stateIndx];
     8ba:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <gu8_DIO_Init_fun_status>
			Us_Trigger_fun_status = Us_Trigger();
     8be:	0e 94 82 00 	call	0x104	; 0x104 <Us_Trigger>
			if(Us_Trigger_fun_status == (gu8_Icu_ReadTime_status&&gu8_DIO_Write_status) )
     8c2:	88 23       	and	r24, r24
     8c4:	69 f0       	breq	.+26     	; 0x8e0 <Us_Trigger_test+0x34>
			printf("testCase %d  Passed.\n",testCaseNumber);
			else
			printf("testCase %d  Failed.\n",testCaseNumber);
     8c6:	1f 92       	push	r1
     8c8:	1f 92       	push	r1
     8ca:	83 ea       	ldi	r24, 0xA3	; 163
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	9f 93       	push	r25
     8d0:	8f 93       	push	r24
     8d2:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <printf>
     8d6:	0f 90       	pop	r0
     8d8:	0f 90       	pop	r0
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	0c c0       	rjmp	.+24     	; 0x8f8 <Us_Trigger_test+0x4c>
		{
			gu8_Icu_Init_fun_status = gau8_fun_status[fun1stateIndx];
			gu8_DIO_Init_fun_status = gau8_fun_status[fun2stateIndx];
			Us_Trigger_fun_status = Us_Trigger();
			if(Us_Trigger_fun_status == (gu8_Icu_ReadTime_status&&gu8_DIO_Write_status) )
			printf("testCase %d  Passed.\n",testCaseNumber);
     8e0:	1f 92       	push	r1
     8e2:	1f 92       	push	r1
     8e4:	8d e8       	ldi	r24, 0x8D	; 141
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	9f 93       	push	r25
     8ea:	8f 93       	push	r24
     8ec:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <printf>
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
     8f4:	0f 90       	pop	r0
     8f6:	0f 90       	pop	r0
	{
		for (fun2stateIndx = ZERO ;
		fun2stateIndx < FUN_STATUS_COUNT ;
		fun2stateIndx++)
		{
			gu8_Icu_Init_fun_status = gau8_fun_status[fun1stateIndx];
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <gu8_Icu_Init_fun_status>
			gu8_DIO_Init_fun_status = gau8_fun_status[fun2stateIndx];
     8fe:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <gu8_DIO_Init_fun_status>
			Us_Trigger_fun_status = Us_Trigger();
     902:	0e 94 82 00 	call	0x104	; 0x104 <Us_Trigger>
			if(Us_Trigger_fun_status == (gu8_Icu_ReadTime_status&&gu8_DIO_Write_status) )
     906:	81 11       	cpse	r24, r1
     908:	0e c0       	rjmp	.+28     	; 0x926 <Us_Trigger_test+0x7a>
			printf("testCase %d  Passed.\n",testCaseNumber);
     90a:	1f 92       	push	r1
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	8f 93       	push	r24
     910:	8d e8       	ldi	r24, 0x8D	; 141
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	9f 93       	push	r25
     916:	8f 93       	push	r24
     918:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <printf>
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	0d c0       	rjmp	.+26     	; 0x940 <Us_Trigger_test+0x94>
			else
			printf("testCase %d  Failed.\n",testCaseNumber);
     926:	1f 92       	push	r1
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	8f 93       	push	r24
     92c:	83 ea       	ldi	r24, 0xA3	; 163
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	9f 93       	push	r25
     932:	8f 93       	push	r24
     934:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <printf>
     938:	0f 90       	pop	r0
     93a:	0f 90       	pop	r0
     93c:	0f 90       	pop	r0
     93e:	0f 90       	pop	r0
	{
		for (fun2stateIndx = ZERO ;
		fun2stateIndx < FUN_STATUS_COUNT ;
		fun2stateIndx++)
		{
			gu8_Icu_Init_fun_status = gau8_fun_status[fun1stateIndx];
     940:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <gu8_Icu_Init_fun_status>
			gu8_DIO_Init_fun_status = gau8_fun_status[fun2stateIndx];
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <gu8_DIO_Init_fun_status>
			Us_Trigger_fun_status = Us_Trigger();
     94a:	0e 94 82 00 	call	0x104	; 0x104 <Us_Trigger>
			if(Us_Trigger_fun_status == (gu8_Icu_ReadTime_status&&gu8_DIO_Write_status) )
     94e:	81 11       	cpse	r24, r1
     950:	1d c0       	rjmp	.+58     	; 0x98c <Us_Trigger_test+0xe0>
     952:	2a c0       	rjmp	.+84     	; 0x9a8 <Us_Trigger_test+0xfc>
			printf("testCase %d  Passed.\n",testCaseNumber);
     954:	1f 92       	push	r1
     956:	83 e0       	ldi	r24, 0x03	; 3
     958:	8f 93       	push	r24
     95a:	8d e8       	ldi	r24, 0x8D	; 141
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	9f 93       	push	r25
     960:	8f 93       	push	r24
     962:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <printf>
     966:	0f 90       	pop	r0
     968:	0f 90       	pop	r0
     96a:	0f 90       	pop	r0
     96c:	0f 90       	pop	r0
     96e:	08 95       	ret
			else
			printf("testCase %d  Failed.\n",testCaseNumber);
     970:	1f 92       	push	r1
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	8f 93       	push	r24
     976:	83 ea       	ldi	r24, 0xA3	; 163
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	9f 93       	push	r25
     97c:	8f 93       	push	r24
     97e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <printf>
     982:	0f 90       	pop	r0
     984:	0f 90       	pop	r0
     986:	0f 90       	pop	r0
     988:	0f 90       	pop	r0
			testCaseNumber++;
		}
	}
}
     98a:	08 95       	ret
			gu8_DIO_Init_fun_status = gau8_fun_status[fun2stateIndx];
			Us_Trigger_fun_status = Us_Trigger();
			if(Us_Trigger_fun_status == (gu8_Icu_ReadTime_status&&gu8_DIO_Write_status) )
			printf("testCase %d  Passed.\n",testCaseNumber);
			else
			printf("testCase %d  Failed.\n",testCaseNumber);
     98c:	1f 92       	push	r1
     98e:	82 e0       	ldi	r24, 0x02	; 2
     990:	8f 93       	push	r24
     992:	83 ea       	ldi	r24, 0xA3	; 163
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	9f 93       	push	r25
     998:	8f 93       	push	r24
     99a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <printf>
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	0d c0       	rjmp	.+26     	; 0x9c2 <Us_Trigger_test+0x116>
		{
			gu8_Icu_Init_fun_status = gau8_fun_status[fun1stateIndx];
			gu8_DIO_Init_fun_status = gau8_fun_status[fun2stateIndx];
			Us_Trigger_fun_status = Us_Trigger();
			if(Us_Trigger_fun_status == (gu8_Icu_ReadTime_status&&gu8_DIO_Write_status) )
			printf("testCase %d  Passed.\n",testCaseNumber);
     9a8:	1f 92       	push	r1
     9aa:	82 e0       	ldi	r24, 0x02	; 2
     9ac:	8f 93       	push	r24
     9ae:	8d e8       	ldi	r24, 0x8D	; 141
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	9f 93       	push	r25
     9b4:	8f 93       	push	r24
     9b6:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <printf>
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
	{
		for (fun2stateIndx = ZERO ;
		fun2stateIndx < FUN_STATUS_COUNT ;
		fun2stateIndx++)
		{
			gu8_Icu_Init_fun_status = gau8_fun_status[fun1stateIndx];
     9c2:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <gu8_Icu_Init_fun_status>
			gu8_DIO_Init_fun_status = gau8_fun_status[fun2stateIndx];
     9c6:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <gu8_DIO_Init_fun_status>
			Us_Trigger_fun_status = Us_Trigger();
     9ca:	0e 94 82 00 	call	0x104	; 0x104 <Us_Trigger>
			if(Us_Trigger_fun_status == (gu8_Icu_ReadTime_status&&gu8_DIO_Write_status) )
     9ce:	81 11       	cpse	r24, r1
     9d0:	cf cf       	rjmp	.-98     	; 0x970 <Us_Trigger_test+0xc4>
     9d2:	c0 cf       	rjmp	.-128    	; 0x954 <Us_Trigger_test+0xa8>

000009d4 <Us_Module_Test>:

}

void Us_Module_Test(void)
{
	printf("\n\n\t=========================Us_Module_TEST=======================\n\n");
     9d4:	86 ee       	ldi	r24, 0xE6	; 230
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	0e 94 0f 05 	call	0xa1e	; 0xa1e <puts>
	US_Init_test();
     9dc:	0e 94 d5 03 	call	0x7aa	; 0x7aa <US_Init_test>
	Us_Trigger_test();
     9e0:	0e 94 56 04 	call	0x8ac	; 0x8ac <Us_Trigger_test>
     9e4:	08 95       	ret

000009e6 <__tablejump2__>:
     9e6:	ee 0f       	add	r30, r30
     9e8:	ff 1f       	adc	r31, r31
     9ea:	05 90       	lpm	r0, Z+
     9ec:	f4 91       	lpm	r31, Z
     9ee:	e0 2d       	mov	r30, r0
     9f0:	09 94       	ijmp

000009f2 <printf>:
     9f2:	a0 e0       	ldi	r26, 0x00	; 0
     9f4:	b0 e0       	ldi	r27, 0x00	; 0
     9f6:	ef ef       	ldi	r30, 0xFF	; 255
     9f8:	f4 e0       	ldi	r31, 0x04	; 4
     9fa:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__prologue_saves__+0x20>
     9fe:	ae 01       	movw	r20, r28
     a00:	4b 5f       	subi	r20, 0xFB	; 251
     a02:	5f 4f       	sbci	r21, 0xFF	; 255
     a04:	fa 01       	movw	r30, r20
     a06:	61 91       	ld	r22, Z+
     a08:	71 91       	ld	r23, Z+
     a0a:	af 01       	movw	r20, r30
     a0c:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <__iob+0x2>
     a10:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <__iob+0x3>
     a14:	0e 94 3f 05 	call	0xa7e	; 0xa7e <vfprintf>
     a18:	e2 e0       	ldi	r30, 0x02	; 2
     a1a:	0c 94 fc 07 	jmp	0xff8	; 0xff8 <__epilogue_restores__+0x20>

00000a1e <puts>:
     a1e:	0f 93       	push	r16
     a20:	1f 93       	push	r17
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <__iob+0x2>
     a2a:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <__iob+0x3>
     a2e:	23 81       	ldd	r18, Z+3	; 0x03
     a30:	21 ff       	sbrs	r18, 1
     a32:	1b c0       	rjmp	.+54     	; 0xa6a <puts+0x4c>
     a34:	8c 01       	movw	r16, r24
     a36:	d0 e0       	ldi	r29, 0x00	; 0
     a38:	c0 e0       	ldi	r28, 0x00	; 0
     a3a:	f8 01       	movw	r30, r16
     a3c:	81 91       	ld	r24, Z+
     a3e:	8f 01       	movw	r16, r30
     a40:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <__iob+0x2>
     a44:	70 91 38 01 	lds	r23, 0x0138	; 0x800138 <__iob+0x3>
     a48:	db 01       	movw	r26, r22
     a4a:	18 96       	adiw	r26, 0x08	; 8
     a4c:	ed 91       	ld	r30, X+
     a4e:	fc 91       	ld	r31, X
     a50:	19 97       	sbiw	r26, 0x09	; 9
     a52:	88 23       	and	r24, r24
     a54:	31 f0       	breq	.+12     	; 0xa62 <puts+0x44>
     a56:	09 95       	icall
     a58:	89 2b       	or	r24, r25
     a5a:	79 f3       	breq	.-34     	; 0xa3a <puts+0x1c>
     a5c:	df ef       	ldi	r29, 0xFF	; 255
     a5e:	cf ef       	ldi	r28, 0xFF	; 255
     a60:	ec cf       	rjmp	.-40     	; 0xa3a <puts+0x1c>
     a62:	8a e0       	ldi	r24, 0x0A	; 10
     a64:	09 95       	icall
     a66:	89 2b       	or	r24, r25
     a68:	19 f0       	breq	.+6      	; 0xa70 <puts+0x52>
     a6a:	8f ef       	ldi	r24, 0xFF	; 255
     a6c:	9f ef       	ldi	r25, 0xFF	; 255
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <puts+0x56>
     a70:	8d 2f       	mov	r24, r29
     a72:	9c 2f       	mov	r25, r28
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	08 95       	ret

00000a7e <vfprintf>:
     a7e:	ab e0       	ldi	r26, 0x0B	; 11
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	e5 e4       	ldi	r30, 0x45	; 69
     a84:	f5 e0       	ldi	r31, 0x05	; 5
     a86:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <__prologue_saves__>
     a8a:	6c 01       	movw	r12, r24
     a8c:	7b 01       	movw	r14, r22
     a8e:	8a 01       	movw	r16, r20
     a90:	fc 01       	movw	r30, r24
     a92:	17 82       	std	Z+7, r1	; 0x07
     a94:	16 82       	std	Z+6, r1	; 0x06
     a96:	83 81       	ldd	r24, Z+3	; 0x03
     a98:	81 ff       	sbrs	r24, 1
     a9a:	cc c1       	rjmp	.+920    	; 0xe34 <vfprintf+0x3b6>
     a9c:	ce 01       	movw	r24, r28
     a9e:	01 96       	adiw	r24, 0x01	; 1
     aa0:	3c 01       	movw	r6, r24
     aa2:	f6 01       	movw	r30, r12
     aa4:	93 81       	ldd	r25, Z+3	; 0x03
     aa6:	f7 01       	movw	r30, r14
     aa8:	93 fd       	sbrc	r25, 3
     aaa:	85 91       	lpm	r24, Z+
     aac:	93 ff       	sbrs	r25, 3
     aae:	81 91       	ld	r24, Z+
     ab0:	7f 01       	movw	r14, r30
     ab2:	88 23       	and	r24, r24
     ab4:	09 f4       	brne	.+2      	; 0xab8 <vfprintf+0x3a>
     ab6:	ba c1       	rjmp	.+884    	; 0xe2c <vfprintf+0x3ae>
     ab8:	85 32       	cpi	r24, 0x25	; 37
     aba:	39 f4       	brne	.+14     	; 0xaca <vfprintf+0x4c>
     abc:	93 fd       	sbrc	r25, 3
     abe:	85 91       	lpm	r24, Z+
     ac0:	93 ff       	sbrs	r25, 3
     ac2:	81 91       	ld	r24, Z+
     ac4:	7f 01       	movw	r14, r30
     ac6:	85 32       	cpi	r24, 0x25	; 37
     ac8:	29 f4       	brne	.+10     	; 0xad4 <vfprintf+0x56>
     aca:	b6 01       	movw	r22, r12
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	0e 94 36 07 	call	0xe6c	; 0xe6c <fputc>
     ad2:	e7 cf       	rjmp	.-50     	; 0xaa2 <vfprintf+0x24>
     ad4:	91 2c       	mov	r9, r1
     ad6:	21 2c       	mov	r2, r1
     ad8:	31 2c       	mov	r3, r1
     ada:	ff e1       	ldi	r31, 0x1F	; 31
     adc:	f3 15       	cp	r31, r3
     ade:	d8 f0       	brcs	.+54     	; 0xb16 <vfprintf+0x98>
     ae0:	8b 32       	cpi	r24, 0x2B	; 43
     ae2:	79 f0       	breq	.+30     	; 0xb02 <vfprintf+0x84>
     ae4:	38 f4       	brcc	.+14     	; 0xaf4 <vfprintf+0x76>
     ae6:	80 32       	cpi	r24, 0x20	; 32
     ae8:	79 f0       	breq	.+30     	; 0xb08 <vfprintf+0x8a>
     aea:	83 32       	cpi	r24, 0x23	; 35
     aec:	a1 f4       	brne	.+40     	; 0xb16 <vfprintf+0x98>
     aee:	23 2d       	mov	r18, r3
     af0:	20 61       	ori	r18, 0x10	; 16
     af2:	1d c0       	rjmp	.+58     	; 0xb2e <vfprintf+0xb0>
     af4:	8d 32       	cpi	r24, 0x2D	; 45
     af6:	61 f0       	breq	.+24     	; 0xb10 <vfprintf+0x92>
     af8:	80 33       	cpi	r24, 0x30	; 48
     afa:	69 f4       	brne	.+26     	; 0xb16 <vfprintf+0x98>
     afc:	23 2d       	mov	r18, r3
     afe:	21 60       	ori	r18, 0x01	; 1
     b00:	16 c0       	rjmp	.+44     	; 0xb2e <vfprintf+0xb0>
     b02:	83 2d       	mov	r24, r3
     b04:	82 60       	ori	r24, 0x02	; 2
     b06:	38 2e       	mov	r3, r24
     b08:	e3 2d       	mov	r30, r3
     b0a:	e4 60       	ori	r30, 0x04	; 4
     b0c:	3e 2e       	mov	r3, r30
     b0e:	2a c0       	rjmp	.+84     	; 0xb64 <vfprintf+0xe6>
     b10:	f3 2d       	mov	r31, r3
     b12:	f8 60       	ori	r31, 0x08	; 8
     b14:	1d c0       	rjmp	.+58     	; 0xb50 <vfprintf+0xd2>
     b16:	37 fc       	sbrc	r3, 7
     b18:	2d c0       	rjmp	.+90     	; 0xb74 <vfprintf+0xf6>
     b1a:	20 ed       	ldi	r18, 0xD0	; 208
     b1c:	28 0f       	add	r18, r24
     b1e:	2a 30       	cpi	r18, 0x0A	; 10
     b20:	40 f0       	brcs	.+16     	; 0xb32 <vfprintf+0xb4>
     b22:	8e 32       	cpi	r24, 0x2E	; 46
     b24:	b9 f4       	brne	.+46     	; 0xb54 <vfprintf+0xd6>
     b26:	36 fc       	sbrc	r3, 6
     b28:	81 c1       	rjmp	.+770    	; 0xe2c <vfprintf+0x3ae>
     b2a:	23 2d       	mov	r18, r3
     b2c:	20 64       	ori	r18, 0x40	; 64
     b2e:	32 2e       	mov	r3, r18
     b30:	19 c0       	rjmp	.+50     	; 0xb64 <vfprintf+0xe6>
     b32:	36 fe       	sbrs	r3, 6
     b34:	06 c0       	rjmp	.+12     	; 0xb42 <vfprintf+0xc4>
     b36:	8a e0       	ldi	r24, 0x0A	; 10
     b38:	98 9e       	mul	r9, r24
     b3a:	20 0d       	add	r18, r0
     b3c:	11 24       	eor	r1, r1
     b3e:	92 2e       	mov	r9, r18
     b40:	11 c0       	rjmp	.+34     	; 0xb64 <vfprintf+0xe6>
     b42:	ea e0       	ldi	r30, 0x0A	; 10
     b44:	2e 9e       	mul	r2, r30
     b46:	20 0d       	add	r18, r0
     b48:	11 24       	eor	r1, r1
     b4a:	22 2e       	mov	r2, r18
     b4c:	f3 2d       	mov	r31, r3
     b4e:	f0 62       	ori	r31, 0x20	; 32
     b50:	3f 2e       	mov	r3, r31
     b52:	08 c0       	rjmp	.+16     	; 0xb64 <vfprintf+0xe6>
     b54:	8c 36       	cpi	r24, 0x6C	; 108
     b56:	21 f4       	brne	.+8      	; 0xb60 <vfprintf+0xe2>
     b58:	83 2d       	mov	r24, r3
     b5a:	80 68       	ori	r24, 0x80	; 128
     b5c:	38 2e       	mov	r3, r24
     b5e:	02 c0       	rjmp	.+4      	; 0xb64 <vfprintf+0xe6>
     b60:	88 36       	cpi	r24, 0x68	; 104
     b62:	41 f4       	brne	.+16     	; 0xb74 <vfprintf+0xf6>
     b64:	f7 01       	movw	r30, r14
     b66:	93 fd       	sbrc	r25, 3
     b68:	85 91       	lpm	r24, Z+
     b6a:	93 ff       	sbrs	r25, 3
     b6c:	81 91       	ld	r24, Z+
     b6e:	7f 01       	movw	r14, r30
     b70:	81 11       	cpse	r24, r1
     b72:	b3 cf       	rjmp	.-154    	; 0xada <vfprintf+0x5c>
     b74:	98 2f       	mov	r25, r24
     b76:	9f 7d       	andi	r25, 0xDF	; 223
     b78:	95 54       	subi	r25, 0x45	; 69
     b7a:	93 30       	cpi	r25, 0x03	; 3
     b7c:	28 f4       	brcc	.+10     	; 0xb88 <vfprintf+0x10a>
     b7e:	0c 5f       	subi	r16, 0xFC	; 252
     b80:	1f 4f       	sbci	r17, 0xFF	; 255
     b82:	9f e3       	ldi	r25, 0x3F	; 63
     b84:	99 83       	std	Y+1, r25	; 0x01
     b86:	0d c0       	rjmp	.+26     	; 0xba2 <vfprintf+0x124>
     b88:	83 36       	cpi	r24, 0x63	; 99
     b8a:	31 f0       	breq	.+12     	; 0xb98 <vfprintf+0x11a>
     b8c:	83 37       	cpi	r24, 0x73	; 115
     b8e:	71 f0       	breq	.+28     	; 0xbac <vfprintf+0x12e>
     b90:	83 35       	cpi	r24, 0x53	; 83
     b92:	09 f0       	breq	.+2      	; 0xb96 <vfprintf+0x118>
     b94:	59 c0       	rjmp	.+178    	; 0xc48 <vfprintf+0x1ca>
     b96:	21 c0       	rjmp	.+66     	; 0xbda <vfprintf+0x15c>
     b98:	f8 01       	movw	r30, r16
     b9a:	80 81       	ld	r24, Z
     b9c:	89 83       	std	Y+1, r24	; 0x01
     b9e:	0e 5f       	subi	r16, 0xFE	; 254
     ba0:	1f 4f       	sbci	r17, 0xFF	; 255
     ba2:	88 24       	eor	r8, r8
     ba4:	83 94       	inc	r8
     ba6:	91 2c       	mov	r9, r1
     ba8:	53 01       	movw	r10, r6
     baa:	13 c0       	rjmp	.+38     	; 0xbd2 <vfprintf+0x154>
     bac:	28 01       	movw	r4, r16
     bae:	f2 e0       	ldi	r31, 0x02	; 2
     bb0:	4f 0e       	add	r4, r31
     bb2:	51 1c       	adc	r5, r1
     bb4:	f8 01       	movw	r30, r16
     bb6:	a0 80       	ld	r10, Z
     bb8:	b1 80       	ldd	r11, Z+1	; 0x01
     bba:	36 fe       	sbrs	r3, 6
     bbc:	03 c0       	rjmp	.+6      	; 0xbc4 <vfprintf+0x146>
     bbe:	69 2d       	mov	r22, r9
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <vfprintf+0x14a>
     bc4:	6f ef       	ldi	r22, 0xFF	; 255
     bc6:	7f ef       	ldi	r23, 0xFF	; 255
     bc8:	c5 01       	movw	r24, r10
     bca:	0e 94 2b 07 	call	0xe56	; 0xe56 <strnlen>
     bce:	4c 01       	movw	r8, r24
     bd0:	82 01       	movw	r16, r4
     bd2:	f3 2d       	mov	r31, r3
     bd4:	ff 77       	andi	r31, 0x7F	; 127
     bd6:	3f 2e       	mov	r3, r31
     bd8:	16 c0       	rjmp	.+44     	; 0xc06 <vfprintf+0x188>
     bda:	28 01       	movw	r4, r16
     bdc:	22 e0       	ldi	r18, 0x02	; 2
     bde:	42 0e       	add	r4, r18
     be0:	51 1c       	adc	r5, r1
     be2:	f8 01       	movw	r30, r16
     be4:	a0 80       	ld	r10, Z
     be6:	b1 80       	ldd	r11, Z+1	; 0x01
     be8:	36 fe       	sbrs	r3, 6
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <vfprintf+0x174>
     bec:	69 2d       	mov	r22, r9
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <vfprintf+0x178>
     bf2:	6f ef       	ldi	r22, 0xFF	; 255
     bf4:	7f ef       	ldi	r23, 0xFF	; 255
     bf6:	c5 01       	movw	r24, r10
     bf8:	0e 94 20 07 	call	0xe40	; 0xe40 <strnlen_P>
     bfc:	4c 01       	movw	r8, r24
     bfe:	f3 2d       	mov	r31, r3
     c00:	f0 68       	ori	r31, 0x80	; 128
     c02:	3f 2e       	mov	r3, r31
     c04:	82 01       	movw	r16, r4
     c06:	33 fc       	sbrc	r3, 3
     c08:	1b c0       	rjmp	.+54     	; 0xc40 <vfprintf+0x1c2>
     c0a:	82 2d       	mov	r24, r2
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	88 16       	cp	r8, r24
     c10:	99 06       	cpc	r9, r25
     c12:	b0 f4       	brcc	.+44     	; 0xc40 <vfprintf+0x1c2>
     c14:	b6 01       	movw	r22, r12
     c16:	80 e2       	ldi	r24, 0x20	; 32
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	0e 94 36 07 	call	0xe6c	; 0xe6c <fputc>
     c1e:	2a 94       	dec	r2
     c20:	f4 cf       	rjmp	.-24     	; 0xc0a <vfprintf+0x18c>
     c22:	f5 01       	movw	r30, r10
     c24:	37 fc       	sbrc	r3, 7
     c26:	85 91       	lpm	r24, Z+
     c28:	37 fe       	sbrs	r3, 7
     c2a:	81 91       	ld	r24, Z+
     c2c:	5f 01       	movw	r10, r30
     c2e:	b6 01       	movw	r22, r12
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 36 07 	call	0xe6c	; 0xe6c <fputc>
     c36:	21 10       	cpse	r2, r1
     c38:	2a 94       	dec	r2
     c3a:	21 e0       	ldi	r18, 0x01	; 1
     c3c:	82 1a       	sub	r8, r18
     c3e:	91 08       	sbc	r9, r1
     c40:	81 14       	cp	r8, r1
     c42:	91 04       	cpc	r9, r1
     c44:	71 f7       	brne	.-36     	; 0xc22 <vfprintf+0x1a4>
     c46:	e8 c0       	rjmp	.+464    	; 0xe18 <vfprintf+0x39a>
     c48:	84 36       	cpi	r24, 0x64	; 100
     c4a:	11 f0       	breq	.+4      	; 0xc50 <vfprintf+0x1d2>
     c4c:	89 36       	cpi	r24, 0x69	; 105
     c4e:	41 f5       	brne	.+80     	; 0xca0 <vfprintf+0x222>
     c50:	f8 01       	movw	r30, r16
     c52:	37 fe       	sbrs	r3, 7
     c54:	07 c0       	rjmp	.+14     	; 0xc64 <vfprintf+0x1e6>
     c56:	60 81       	ld	r22, Z
     c58:	71 81       	ldd	r23, Z+1	; 0x01
     c5a:	82 81       	ldd	r24, Z+2	; 0x02
     c5c:	93 81       	ldd	r25, Z+3	; 0x03
     c5e:	0c 5f       	subi	r16, 0xFC	; 252
     c60:	1f 4f       	sbci	r17, 0xFF	; 255
     c62:	08 c0       	rjmp	.+16     	; 0xc74 <vfprintf+0x1f6>
     c64:	60 81       	ld	r22, Z
     c66:	71 81       	ldd	r23, Z+1	; 0x01
     c68:	07 2e       	mov	r0, r23
     c6a:	00 0c       	add	r0, r0
     c6c:	88 0b       	sbc	r24, r24
     c6e:	99 0b       	sbc	r25, r25
     c70:	0e 5f       	subi	r16, 0xFE	; 254
     c72:	1f 4f       	sbci	r17, 0xFF	; 255
     c74:	f3 2d       	mov	r31, r3
     c76:	ff 76       	andi	r31, 0x6F	; 111
     c78:	3f 2e       	mov	r3, r31
     c7a:	97 ff       	sbrs	r25, 7
     c7c:	09 c0       	rjmp	.+18     	; 0xc90 <vfprintf+0x212>
     c7e:	90 95       	com	r25
     c80:	80 95       	com	r24
     c82:	70 95       	com	r23
     c84:	61 95       	neg	r22
     c86:	7f 4f       	sbci	r23, 0xFF	; 255
     c88:	8f 4f       	sbci	r24, 0xFF	; 255
     c8a:	9f 4f       	sbci	r25, 0xFF	; 255
     c8c:	f0 68       	ori	r31, 0x80	; 128
     c8e:	3f 2e       	mov	r3, r31
     c90:	2a e0       	ldi	r18, 0x0A	; 10
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	a3 01       	movw	r20, r6
     c96:	0e 94 72 07 	call	0xee4	; 0xee4 <__ultoa_invert>
     c9a:	88 2e       	mov	r8, r24
     c9c:	86 18       	sub	r8, r6
     c9e:	45 c0       	rjmp	.+138    	; 0xd2a <vfprintf+0x2ac>
     ca0:	85 37       	cpi	r24, 0x75	; 117
     ca2:	31 f4       	brne	.+12     	; 0xcb0 <vfprintf+0x232>
     ca4:	23 2d       	mov	r18, r3
     ca6:	2f 7e       	andi	r18, 0xEF	; 239
     ca8:	b2 2e       	mov	r11, r18
     caa:	2a e0       	ldi	r18, 0x0A	; 10
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	25 c0       	rjmp	.+74     	; 0xcfa <vfprintf+0x27c>
     cb0:	93 2d       	mov	r25, r3
     cb2:	99 7f       	andi	r25, 0xF9	; 249
     cb4:	b9 2e       	mov	r11, r25
     cb6:	8f 36       	cpi	r24, 0x6F	; 111
     cb8:	c1 f0       	breq	.+48     	; 0xcea <vfprintf+0x26c>
     cba:	18 f4       	brcc	.+6      	; 0xcc2 <vfprintf+0x244>
     cbc:	88 35       	cpi	r24, 0x58	; 88
     cbe:	79 f0       	breq	.+30     	; 0xcde <vfprintf+0x260>
     cc0:	b5 c0       	rjmp	.+362    	; 0xe2c <vfprintf+0x3ae>
     cc2:	80 37       	cpi	r24, 0x70	; 112
     cc4:	19 f0       	breq	.+6      	; 0xccc <vfprintf+0x24e>
     cc6:	88 37       	cpi	r24, 0x78	; 120
     cc8:	21 f0       	breq	.+8      	; 0xcd2 <vfprintf+0x254>
     cca:	b0 c0       	rjmp	.+352    	; 0xe2c <vfprintf+0x3ae>
     ccc:	e9 2f       	mov	r30, r25
     cce:	e0 61       	ori	r30, 0x10	; 16
     cd0:	be 2e       	mov	r11, r30
     cd2:	b4 fe       	sbrs	r11, 4
     cd4:	0d c0       	rjmp	.+26     	; 0xcf0 <vfprintf+0x272>
     cd6:	fb 2d       	mov	r31, r11
     cd8:	f4 60       	ori	r31, 0x04	; 4
     cda:	bf 2e       	mov	r11, r31
     cdc:	09 c0       	rjmp	.+18     	; 0xcf0 <vfprintf+0x272>
     cde:	34 fe       	sbrs	r3, 4
     ce0:	0a c0       	rjmp	.+20     	; 0xcf6 <vfprintf+0x278>
     ce2:	29 2f       	mov	r18, r25
     ce4:	26 60       	ori	r18, 0x06	; 6
     ce6:	b2 2e       	mov	r11, r18
     ce8:	06 c0       	rjmp	.+12     	; 0xcf6 <vfprintf+0x278>
     cea:	28 e0       	ldi	r18, 0x08	; 8
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	05 c0       	rjmp	.+10     	; 0xcfa <vfprintf+0x27c>
     cf0:	20 e1       	ldi	r18, 0x10	; 16
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	02 c0       	rjmp	.+4      	; 0xcfa <vfprintf+0x27c>
     cf6:	20 e1       	ldi	r18, 0x10	; 16
     cf8:	32 e0       	ldi	r19, 0x02	; 2
     cfa:	f8 01       	movw	r30, r16
     cfc:	b7 fe       	sbrs	r11, 7
     cfe:	07 c0       	rjmp	.+14     	; 0xd0e <vfprintf+0x290>
     d00:	60 81       	ld	r22, Z
     d02:	71 81       	ldd	r23, Z+1	; 0x01
     d04:	82 81       	ldd	r24, Z+2	; 0x02
     d06:	93 81       	ldd	r25, Z+3	; 0x03
     d08:	0c 5f       	subi	r16, 0xFC	; 252
     d0a:	1f 4f       	sbci	r17, 0xFF	; 255
     d0c:	06 c0       	rjmp	.+12     	; 0xd1a <vfprintf+0x29c>
     d0e:	60 81       	ld	r22, Z
     d10:	71 81       	ldd	r23, Z+1	; 0x01
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	0e 5f       	subi	r16, 0xFE	; 254
     d18:	1f 4f       	sbci	r17, 0xFF	; 255
     d1a:	a3 01       	movw	r20, r6
     d1c:	0e 94 72 07 	call	0xee4	; 0xee4 <__ultoa_invert>
     d20:	88 2e       	mov	r8, r24
     d22:	86 18       	sub	r8, r6
     d24:	fb 2d       	mov	r31, r11
     d26:	ff 77       	andi	r31, 0x7F	; 127
     d28:	3f 2e       	mov	r3, r31
     d2a:	36 fe       	sbrs	r3, 6
     d2c:	0d c0       	rjmp	.+26     	; 0xd48 <vfprintf+0x2ca>
     d2e:	23 2d       	mov	r18, r3
     d30:	2e 7f       	andi	r18, 0xFE	; 254
     d32:	a2 2e       	mov	r10, r18
     d34:	89 14       	cp	r8, r9
     d36:	58 f4       	brcc	.+22     	; 0xd4e <vfprintf+0x2d0>
     d38:	34 fe       	sbrs	r3, 4
     d3a:	0b c0       	rjmp	.+22     	; 0xd52 <vfprintf+0x2d4>
     d3c:	32 fc       	sbrc	r3, 2
     d3e:	09 c0       	rjmp	.+18     	; 0xd52 <vfprintf+0x2d4>
     d40:	83 2d       	mov	r24, r3
     d42:	8e 7e       	andi	r24, 0xEE	; 238
     d44:	a8 2e       	mov	r10, r24
     d46:	05 c0       	rjmp	.+10     	; 0xd52 <vfprintf+0x2d4>
     d48:	b8 2c       	mov	r11, r8
     d4a:	a3 2c       	mov	r10, r3
     d4c:	03 c0       	rjmp	.+6      	; 0xd54 <vfprintf+0x2d6>
     d4e:	b8 2c       	mov	r11, r8
     d50:	01 c0       	rjmp	.+2      	; 0xd54 <vfprintf+0x2d6>
     d52:	b9 2c       	mov	r11, r9
     d54:	a4 fe       	sbrs	r10, 4
     d56:	0f c0       	rjmp	.+30     	; 0xd76 <vfprintf+0x2f8>
     d58:	fe 01       	movw	r30, r28
     d5a:	e8 0d       	add	r30, r8
     d5c:	f1 1d       	adc	r31, r1
     d5e:	80 81       	ld	r24, Z
     d60:	80 33       	cpi	r24, 0x30	; 48
     d62:	21 f4       	brne	.+8      	; 0xd6c <vfprintf+0x2ee>
     d64:	9a 2d       	mov	r25, r10
     d66:	99 7e       	andi	r25, 0xE9	; 233
     d68:	a9 2e       	mov	r10, r25
     d6a:	09 c0       	rjmp	.+18     	; 0xd7e <vfprintf+0x300>
     d6c:	a2 fe       	sbrs	r10, 2
     d6e:	06 c0       	rjmp	.+12     	; 0xd7c <vfprintf+0x2fe>
     d70:	b3 94       	inc	r11
     d72:	b3 94       	inc	r11
     d74:	04 c0       	rjmp	.+8      	; 0xd7e <vfprintf+0x300>
     d76:	8a 2d       	mov	r24, r10
     d78:	86 78       	andi	r24, 0x86	; 134
     d7a:	09 f0       	breq	.+2      	; 0xd7e <vfprintf+0x300>
     d7c:	b3 94       	inc	r11
     d7e:	a3 fc       	sbrc	r10, 3
     d80:	11 c0       	rjmp	.+34     	; 0xda4 <vfprintf+0x326>
     d82:	a0 fe       	sbrs	r10, 0
     d84:	06 c0       	rjmp	.+12     	; 0xd92 <vfprintf+0x314>
     d86:	b2 14       	cp	r11, r2
     d88:	88 f4       	brcc	.+34     	; 0xdac <vfprintf+0x32e>
     d8a:	28 0c       	add	r2, r8
     d8c:	92 2c       	mov	r9, r2
     d8e:	9b 18       	sub	r9, r11
     d90:	0e c0       	rjmp	.+28     	; 0xdae <vfprintf+0x330>
     d92:	b2 14       	cp	r11, r2
     d94:	60 f4       	brcc	.+24     	; 0xdae <vfprintf+0x330>
     d96:	b6 01       	movw	r22, r12
     d98:	80 e2       	ldi	r24, 0x20	; 32
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	0e 94 36 07 	call	0xe6c	; 0xe6c <fputc>
     da0:	b3 94       	inc	r11
     da2:	f7 cf       	rjmp	.-18     	; 0xd92 <vfprintf+0x314>
     da4:	b2 14       	cp	r11, r2
     da6:	18 f4       	brcc	.+6      	; 0xdae <vfprintf+0x330>
     da8:	2b 18       	sub	r2, r11
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <vfprintf+0x332>
     dac:	98 2c       	mov	r9, r8
     dae:	21 2c       	mov	r2, r1
     db0:	a4 fe       	sbrs	r10, 4
     db2:	10 c0       	rjmp	.+32     	; 0xdd4 <vfprintf+0x356>
     db4:	b6 01       	movw	r22, r12
     db6:	80 e3       	ldi	r24, 0x30	; 48
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	0e 94 36 07 	call	0xe6c	; 0xe6c <fputc>
     dbe:	a2 fe       	sbrs	r10, 2
     dc0:	17 c0       	rjmp	.+46     	; 0xdf0 <vfprintf+0x372>
     dc2:	a1 fc       	sbrc	r10, 1
     dc4:	03 c0       	rjmp	.+6      	; 0xdcc <vfprintf+0x34e>
     dc6:	88 e7       	ldi	r24, 0x78	; 120
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <vfprintf+0x352>
     dcc:	88 e5       	ldi	r24, 0x58	; 88
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	b6 01       	movw	r22, r12
     dd2:	0c c0       	rjmp	.+24     	; 0xdec <vfprintf+0x36e>
     dd4:	8a 2d       	mov	r24, r10
     dd6:	86 78       	andi	r24, 0x86	; 134
     dd8:	59 f0       	breq	.+22     	; 0xdf0 <vfprintf+0x372>
     dda:	a1 fe       	sbrs	r10, 1
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <vfprintf+0x364>
     dde:	8b e2       	ldi	r24, 0x2B	; 43
     de0:	01 c0       	rjmp	.+2      	; 0xde4 <vfprintf+0x366>
     de2:	80 e2       	ldi	r24, 0x20	; 32
     de4:	a7 fc       	sbrc	r10, 7
     de6:	8d e2       	ldi	r24, 0x2D	; 45
     de8:	b6 01       	movw	r22, r12
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0e 94 36 07 	call	0xe6c	; 0xe6c <fputc>
     df0:	89 14       	cp	r8, r9
     df2:	38 f4       	brcc	.+14     	; 0xe02 <vfprintf+0x384>
     df4:	b6 01       	movw	r22, r12
     df6:	80 e3       	ldi	r24, 0x30	; 48
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 36 07 	call	0xe6c	; 0xe6c <fputc>
     dfe:	9a 94       	dec	r9
     e00:	f7 cf       	rjmp	.-18     	; 0xdf0 <vfprintf+0x372>
     e02:	8a 94       	dec	r8
     e04:	f3 01       	movw	r30, r6
     e06:	e8 0d       	add	r30, r8
     e08:	f1 1d       	adc	r31, r1
     e0a:	80 81       	ld	r24, Z
     e0c:	b6 01       	movw	r22, r12
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	0e 94 36 07 	call	0xe6c	; 0xe6c <fputc>
     e14:	81 10       	cpse	r8, r1
     e16:	f5 cf       	rjmp	.-22     	; 0xe02 <vfprintf+0x384>
     e18:	22 20       	and	r2, r2
     e1a:	09 f4       	brne	.+2      	; 0xe1e <vfprintf+0x3a0>
     e1c:	42 ce       	rjmp	.-892    	; 0xaa2 <vfprintf+0x24>
     e1e:	b6 01       	movw	r22, r12
     e20:	80 e2       	ldi	r24, 0x20	; 32
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e 94 36 07 	call	0xe6c	; 0xe6c <fputc>
     e28:	2a 94       	dec	r2
     e2a:	f6 cf       	rjmp	.-20     	; 0xe18 <vfprintf+0x39a>
     e2c:	f6 01       	movw	r30, r12
     e2e:	86 81       	ldd	r24, Z+6	; 0x06
     e30:	97 81       	ldd	r25, Z+7	; 0x07
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <vfprintf+0x3ba>
     e34:	8f ef       	ldi	r24, 0xFF	; 255
     e36:	9f ef       	ldi	r25, 0xFF	; 255
     e38:	2b 96       	adiw	r28, 0x0b	; 11
     e3a:	e2 e1       	ldi	r30, 0x12	; 18
     e3c:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__epilogue_restores__>

00000e40 <strnlen_P>:
     e40:	fc 01       	movw	r30, r24
     e42:	05 90       	lpm	r0, Z+
     e44:	61 50       	subi	r22, 0x01	; 1
     e46:	70 40       	sbci	r23, 0x00	; 0
     e48:	01 10       	cpse	r0, r1
     e4a:	d8 f7       	brcc	.-10     	; 0xe42 <strnlen_P+0x2>
     e4c:	80 95       	com	r24
     e4e:	90 95       	com	r25
     e50:	8e 0f       	add	r24, r30
     e52:	9f 1f       	adc	r25, r31
     e54:	08 95       	ret

00000e56 <strnlen>:
     e56:	fc 01       	movw	r30, r24
     e58:	61 50       	subi	r22, 0x01	; 1
     e5a:	70 40       	sbci	r23, 0x00	; 0
     e5c:	01 90       	ld	r0, Z+
     e5e:	01 10       	cpse	r0, r1
     e60:	d8 f7       	brcc	.-10     	; 0xe58 <strnlen+0x2>
     e62:	80 95       	com	r24
     e64:	90 95       	com	r25
     e66:	8e 0f       	add	r24, r30
     e68:	9f 1f       	adc	r25, r31
     e6a:	08 95       	ret

00000e6c <fputc>:
     e6c:	0f 93       	push	r16
     e6e:	1f 93       	push	r17
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	fb 01       	movw	r30, r22
     e76:	23 81       	ldd	r18, Z+3	; 0x03
     e78:	21 fd       	sbrc	r18, 1
     e7a:	03 c0       	rjmp	.+6      	; 0xe82 <fputc+0x16>
     e7c:	8f ef       	ldi	r24, 0xFF	; 255
     e7e:	9f ef       	ldi	r25, 0xFF	; 255
     e80:	2c c0       	rjmp	.+88     	; 0xeda <fputc+0x6e>
     e82:	22 ff       	sbrs	r18, 2
     e84:	16 c0       	rjmp	.+44     	; 0xeb2 <fputc+0x46>
     e86:	46 81       	ldd	r20, Z+6	; 0x06
     e88:	57 81       	ldd	r21, Z+7	; 0x07
     e8a:	24 81       	ldd	r18, Z+4	; 0x04
     e8c:	35 81       	ldd	r19, Z+5	; 0x05
     e8e:	42 17       	cp	r20, r18
     e90:	53 07       	cpc	r21, r19
     e92:	44 f4       	brge	.+16     	; 0xea4 <fputc+0x38>
     e94:	a0 81       	ld	r26, Z
     e96:	b1 81       	ldd	r27, Z+1	; 0x01
     e98:	9d 01       	movw	r18, r26
     e9a:	2f 5f       	subi	r18, 0xFF	; 255
     e9c:	3f 4f       	sbci	r19, 0xFF	; 255
     e9e:	31 83       	std	Z+1, r19	; 0x01
     ea0:	20 83       	st	Z, r18
     ea2:	8c 93       	st	X, r24
     ea4:	26 81       	ldd	r18, Z+6	; 0x06
     ea6:	37 81       	ldd	r19, Z+7	; 0x07
     ea8:	2f 5f       	subi	r18, 0xFF	; 255
     eaa:	3f 4f       	sbci	r19, 0xFF	; 255
     eac:	37 83       	std	Z+7, r19	; 0x07
     eae:	26 83       	std	Z+6, r18	; 0x06
     eb0:	14 c0       	rjmp	.+40     	; 0xeda <fputc+0x6e>
     eb2:	8b 01       	movw	r16, r22
     eb4:	ec 01       	movw	r28, r24
     eb6:	fb 01       	movw	r30, r22
     eb8:	00 84       	ldd	r0, Z+8	; 0x08
     eba:	f1 85       	ldd	r31, Z+9	; 0x09
     ebc:	e0 2d       	mov	r30, r0
     ebe:	09 95       	icall
     ec0:	89 2b       	or	r24, r25
     ec2:	e1 f6       	brne	.-72     	; 0xe7c <fputc+0x10>
     ec4:	d8 01       	movw	r26, r16
     ec6:	16 96       	adiw	r26, 0x06	; 6
     ec8:	8d 91       	ld	r24, X+
     eca:	9c 91       	ld	r25, X
     ecc:	17 97       	sbiw	r26, 0x07	; 7
     ece:	01 96       	adiw	r24, 0x01	; 1
     ed0:	17 96       	adiw	r26, 0x07	; 7
     ed2:	9c 93       	st	X, r25
     ed4:	8e 93       	st	-X, r24
     ed6:	16 97       	sbiw	r26, 0x06	; 6
     ed8:	ce 01       	movw	r24, r28
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	08 95       	ret

00000ee4 <__ultoa_invert>:
     ee4:	fa 01       	movw	r30, r20
     ee6:	aa 27       	eor	r26, r26
     ee8:	28 30       	cpi	r18, 0x08	; 8
     eea:	51 f1       	breq	.+84     	; 0xf40 <__ultoa_invert+0x5c>
     eec:	20 31       	cpi	r18, 0x10	; 16
     eee:	81 f1       	breq	.+96     	; 0xf50 <__ultoa_invert+0x6c>
     ef0:	e8 94       	clt
     ef2:	6f 93       	push	r22
     ef4:	6e 7f       	andi	r22, 0xFE	; 254
     ef6:	6e 5f       	subi	r22, 0xFE	; 254
     ef8:	7f 4f       	sbci	r23, 0xFF	; 255
     efa:	8f 4f       	sbci	r24, 0xFF	; 255
     efc:	9f 4f       	sbci	r25, 0xFF	; 255
     efe:	af 4f       	sbci	r26, 0xFF	; 255
     f00:	b1 e0       	ldi	r27, 0x01	; 1
     f02:	3e d0       	rcall	.+124    	; 0xf80 <__ultoa_invert+0x9c>
     f04:	b4 e0       	ldi	r27, 0x04	; 4
     f06:	3c d0       	rcall	.+120    	; 0xf80 <__ultoa_invert+0x9c>
     f08:	67 0f       	add	r22, r23
     f0a:	78 1f       	adc	r23, r24
     f0c:	89 1f       	adc	r24, r25
     f0e:	9a 1f       	adc	r25, r26
     f10:	a1 1d       	adc	r26, r1
     f12:	68 0f       	add	r22, r24
     f14:	79 1f       	adc	r23, r25
     f16:	8a 1f       	adc	r24, r26
     f18:	91 1d       	adc	r25, r1
     f1a:	a1 1d       	adc	r26, r1
     f1c:	6a 0f       	add	r22, r26
     f1e:	71 1d       	adc	r23, r1
     f20:	81 1d       	adc	r24, r1
     f22:	91 1d       	adc	r25, r1
     f24:	a1 1d       	adc	r26, r1
     f26:	20 d0       	rcall	.+64     	; 0xf68 <__ultoa_invert+0x84>
     f28:	09 f4       	brne	.+2      	; 0xf2c <__ultoa_invert+0x48>
     f2a:	68 94       	set
     f2c:	3f 91       	pop	r19
     f2e:	2a e0       	ldi	r18, 0x0A	; 10
     f30:	26 9f       	mul	r18, r22
     f32:	11 24       	eor	r1, r1
     f34:	30 19       	sub	r19, r0
     f36:	30 5d       	subi	r19, 0xD0	; 208
     f38:	31 93       	st	Z+, r19
     f3a:	de f6       	brtc	.-74     	; 0xef2 <__ultoa_invert+0xe>
     f3c:	cf 01       	movw	r24, r30
     f3e:	08 95       	ret
     f40:	46 2f       	mov	r20, r22
     f42:	47 70       	andi	r20, 0x07	; 7
     f44:	40 5d       	subi	r20, 0xD0	; 208
     f46:	41 93       	st	Z+, r20
     f48:	b3 e0       	ldi	r27, 0x03	; 3
     f4a:	0f d0       	rcall	.+30     	; 0xf6a <__ultoa_invert+0x86>
     f4c:	c9 f7       	brne	.-14     	; 0xf40 <__ultoa_invert+0x5c>
     f4e:	f6 cf       	rjmp	.-20     	; 0xf3c <__ultoa_invert+0x58>
     f50:	46 2f       	mov	r20, r22
     f52:	4f 70       	andi	r20, 0x0F	; 15
     f54:	40 5d       	subi	r20, 0xD0	; 208
     f56:	4a 33       	cpi	r20, 0x3A	; 58
     f58:	18 f0       	brcs	.+6      	; 0xf60 <__ultoa_invert+0x7c>
     f5a:	49 5d       	subi	r20, 0xD9	; 217
     f5c:	31 fd       	sbrc	r19, 1
     f5e:	40 52       	subi	r20, 0x20	; 32
     f60:	41 93       	st	Z+, r20
     f62:	02 d0       	rcall	.+4      	; 0xf68 <__ultoa_invert+0x84>
     f64:	a9 f7       	brne	.-22     	; 0xf50 <__ultoa_invert+0x6c>
     f66:	ea cf       	rjmp	.-44     	; 0xf3c <__ultoa_invert+0x58>
     f68:	b4 e0       	ldi	r27, 0x04	; 4
     f6a:	a6 95       	lsr	r26
     f6c:	97 95       	ror	r25
     f6e:	87 95       	ror	r24
     f70:	77 95       	ror	r23
     f72:	67 95       	ror	r22
     f74:	ba 95       	dec	r27
     f76:	c9 f7       	brne	.-14     	; 0xf6a <__ultoa_invert+0x86>
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	61 05       	cpc	r22, r1
     f7c:	71 05       	cpc	r23, r1
     f7e:	08 95       	ret
     f80:	9b 01       	movw	r18, r22
     f82:	ac 01       	movw	r20, r24
     f84:	0a 2e       	mov	r0, r26
     f86:	06 94       	lsr	r0
     f88:	57 95       	ror	r21
     f8a:	47 95       	ror	r20
     f8c:	37 95       	ror	r19
     f8e:	27 95       	ror	r18
     f90:	ba 95       	dec	r27
     f92:	c9 f7       	brne	.-14     	; 0xf86 <__ultoa_invert+0xa2>
     f94:	62 0f       	add	r22, r18
     f96:	73 1f       	adc	r23, r19
     f98:	84 1f       	adc	r24, r20
     f9a:	95 1f       	adc	r25, r21
     f9c:	a0 1d       	adc	r26, r0
     f9e:	08 95       	ret

00000fa0 <__prologue_saves__>:
     fa0:	2f 92       	push	r2
     fa2:	3f 92       	push	r3
     fa4:	4f 92       	push	r4
     fa6:	5f 92       	push	r5
     fa8:	6f 92       	push	r6
     faa:	7f 92       	push	r7
     fac:	8f 92       	push	r8
     fae:	9f 92       	push	r9
     fb0:	af 92       	push	r10
     fb2:	bf 92       	push	r11
     fb4:	cf 92       	push	r12
     fb6:	df 92       	push	r13
     fb8:	ef 92       	push	r14
     fba:	ff 92       	push	r15
     fbc:	0f 93       	push	r16
     fbe:	1f 93       	push	r17
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	ca 1b       	sub	r28, r26
     fca:	db 0b       	sbc	r29, r27
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	f8 94       	cli
     fd0:	de bf       	out	0x3e, r29	; 62
     fd2:	0f be       	out	0x3f, r0	; 63
     fd4:	cd bf       	out	0x3d, r28	; 61
     fd6:	09 94       	ijmp

00000fd8 <__epilogue_restores__>:
     fd8:	2a 88       	ldd	r2, Y+18	; 0x12
     fda:	39 88       	ldd	r3, Y+17	; 0x11
     fdc:	48 88       	ldd	r4, Y+16	; 0x10
     fde:	5f 84       	ldd	r5, Y+15	; 0x0f
     fe0:	6e 84       	ldd	r6, Y+14	; 0x0e
     fe2:	7d 84       	ldd	r7, Y+13	; 0x0d
     fe4:	8c 84       	ldd	r8, Y+12	; 0x0c
     fe6:	9b 84       	ldd	r9, Y+11	; 0x0b
     fe8:	aa 84       	ldd	r10, Y+10	; 0x0a
     fea:	b9 84       	ldd	r11, Y+9	; 0x09
     fec:	c8 84       	ldd	r12, Y+8	; 0x08
     fee:	df 80       	ldd	r13, Y+7	; 0x07
     ff0:	ee 80       	ldd	r14, Y+6	; 0x06
     ff2:	fd 80       	ldd	r15, Y+5	; 0x05
     ff4:	0c 81       	ldd	r16, Y+4	; 0x04
     ff6:	1b 81       	ldd	r17, Y+3	; 0x03
     ff8:	aa 81       	ldd	r26, Y+2	; 0x02
     ffa:	b9 81       	ldd	r27, Y+1	; 0x01
     ffc:	ce 0f       	add	r28, r30
     ffe:	d1 1d       	adc	r29, r1
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	de bf       	out	0x3e, r29	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	cd bf       	out	0x3d, r28	; 61
    100a:	ed 01       	movw	r28, r26
    100c:	08 95       	ret

0000100e <_exit>:
    100e:	f8 94       	cli

00001010 <__stop_program>:
    1010:	ff cf       	rjmp	.-2      	; 0x1010 <__stop_program>
