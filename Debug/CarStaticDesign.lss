
CarStaticDesign.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ede  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000f52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800060  00800060  00000f52  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f52  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c6a  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cc7  00000000  00000000  00002d7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000134f  00000000  00000000  00003a41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ec  00000000  00000000  00004d90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c1f  00000000  00000000  0000507c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b59  00000000  00000000  00005c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000077f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   8:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   c:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__vector_3>
  10:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  14:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  18:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  1c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  20:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  24:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  28:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  2c:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__vector_11>
  30:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  34:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  38:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  3c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  40:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  44:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  48:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  50:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  54:	a9 04       	cpc	r10, r9
  56:	ad 04       	cpc	r10, r13
  58:	b2 04       	cpc	r11, r2
  5a:	b7 04       	cpc	r11, r7
  5c:	bc 04       	cpc	r11, r12
  5e:	c1 04       	cpc	r12, r1
  60:	c6 04       	cpc	r12, r6
  62:	cb 04       	cpc	r12, r11

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_clear_bss>:
  70:	20 e0       	ldi	r18, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	01 c0       	rjmp	.+2      	; 0x7a <.do_clear_bss_start>

00000078 <.do_clear_bss_loop>:
  78:	1d 92       	st	X+, r1

0000007a <.do_clear_bss_start>:
  7a:	af 36       	cpi	r26, 0x6F	; 111
  7c:	b2 07       	cpc	r27, r18
  7e:	e1 f7       	brne	.-8      	; 0x78 <.do_clear_bss_loop>
  80:	0e 94 2c 01 	call	0x258	; 0x258 <main>
  84:	0c 94 6d 07 	jmp	0xeda	; 0xeda <_exit>

00000088 <__bad_interrupt>:
  88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008c <Motor_Init>:
			fun_status = NOK;
			break;
		}
	}
	return fun_status;
}
  8c:	0f 93       	push	r16
  8e:	1f 93       	push	r17
  90:	cf 93       	push	r28
  92:	83 30       	cpi	r24, 0x03	; 3
  94:	c0 f5       	brcc	.+112    	; 0x106 <Motor_Init+0x7a>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	19 f0       	breq	.+6      	; 0xa0 <Motor_Init+0x14>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	71 f0       	breq	.+28     	; 0xba <Motor_Init+0x2e>
  9e:	1a c0       	rjmp	.+52     	; 0xd4 <Motor_Init+0x48>
  a0:	e4 e6       	ldi	r30, 0x64	; 100
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	83 e0       	ldi	r24, 0x03	; 3
  a6:	80 83       	st	Z, r24
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	82 83       	std	Z+2, r24	; 0x02
  ac:	8c e1       	ldi	r24, 0x1C	; 28
  ae:	81 83       	std	Z+1, r24	; 0x01
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <motor_1_init_status>
  b6:	c1 e0       	ldi	r28, 0x01	; 1
  b8:	0e c0       	rjmp	.+28     	; 0xd6 <Motor_Init+0x4a>
  ba:	e4 e6       	ldi	r30, 0x64	; 100
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	83 e0       	ldi	r24, 0x03	; 3
  c0:	80 83       	st	Z, r24
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	82 83       	std	Z+2, r24	; 0x02
  c6:	80 ee       	ldi	r24, 0xE0	; 224
  c8:	81 83       	std	Z+1, r24	; 0x01
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  d0:	c1 e0       	ldi	r28, 0x01	; 1
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <Motor_Init+0x4a>
  d4:	cf ef       	ldi	r28, 0xFF	; 255
  d6:	02 e6       	ldi	r16, 0x62	; 98
  d8:	10 e0       	ldi	r17, 0x00	; 0
  da:	83 e0       	ldi	r24, 0x03	; 3
  dc:	f8 01       	movw	r30, r16
  de:	80 83       	st	Z, r24
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	81 83       	std	Z+1, r24	; 0x01
  e4:	c8 01       	movw	r24, r16
  e6:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Pwm_Init>
  ea:	84 e6       	ldi	r24, 0x64	; 100
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_init>
  f2:	22 e3       	ldi	r18, 0x32	; 50
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	50 e0       	ldi	r21, 0x00	; 0
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	f8 01       	movw	r30, r16
  fe:	80 81       	ld	r24, Z
 100:	0e 94 c3 02 	call	0x586	; 0x586 <Pwm_Start>
 104:	01 c0       	rjmp	.+2      	; 0x108 <Motor_Init+0x7c>
 106:	cf ef       	ldi	r28, 0xFF	; 255
 108:	8c 2f       	mov	r24, r28
 10a:	cf 91       	pop	r28
 10c:	1f 91       	pop	r17
 10e:	0f 91       	pop	r16
 110:	08 95       	ret

00000112 <Motor_Direction>:
 112:	83 30       	cpi	r24, 0x03	; 3
 114:	08 f0       	brcs	.+2      	; 0x118 <Motor_Direction+0x6>
 116:	5c c0       	rjmp	.+184    	; 0x1d0 <Motor_Direction+0xbe>
 118:	63 30       	cpi	r22, 0x03	; 3
 11a:	08 f0       	brcs	.+2      	; 0x11e <Motor_Direction+0xc>
 11c:	5b c0       	rjmp	.+182    	; 0x1d4 <Motor_Direction+0xc2>
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	19 f0       	breq	.+6      	; 0x128 <Motor_Direction+0x16>
 122:	82 30       	cpi	r24, 0x02	; 2
 124:	59 f1       	breq	.+86     	; 0x17c <Motor_Direction+0x6a>
 126:	58 c0       	rjmp	.+176    	; 0x1d8 <Motor_Direction+0xc6>
 128:	61 30       	cpi	r22, 0x01	; 1
 12a:	21 f0       	breq	.+8      	; 0x134 <Motor_Direction+0x22>
 12c:	d8 f0       	brcs	.+54     	; 0x164 <Motor_Direction+0x52>
 12e:	62 30       	cpi	r22, 0x02	; 2
 130:	69 f0       	breq	.+26     	; 0x14c <Motor_Direction+0x3a>
 132:	54 c0       	rjmp	.+168    	; 0x1dc <Motor_Direction+0xca>
 134:	4f ef       	ldi	r20, 0xFF	; 255
 136:	64 e0       	ldi	r22, 0x04	; 4
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	0e 94 1e 02 	call	0x43c	; 0x43c <DIO_Write>
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	68 e0       	ldi	r22, 0x08	; 8
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	0e 94 1e 02 	call	0x43c	; 0x43c <DIO_Write>
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	08 95       	ret
 14c:	40 e0       	ldi	r20, 0x00	; 0
 14e:	64 e0       	ldi	r22, 0x04	; 4
 150:	83 e0       	ldi	r24, 0x03	; 3
 152:	0e 94 1e 02 	call	0x43c	; 0x43c <DIO_Write>
 156:	4f ef       	ldi	r20, 0xFF	; 255
 158:	68 e0       	ldi	r22, 0x08	; 8
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	0e 94 1e 02 	call	0x43c	; 0x43c <DIO_Write>
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	08 95       	ret
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	64 e0       	ldi	r22, 0x04	; 4
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	0e 94 1e 02 	call	0x43c	; 0x43c <DIO_Write>
 16e:	40 e0       	ldi	r20, 0x00	; 0
 170:	68 e0       	ldi	r22, 0x08	; 8
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	0e 94 1e 02 	call	0x43c	; 0x43c <DIO_Write>
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	08 95       	ret
 17c:	61 30       	cpi	r22, 0x01	; 1
 17e:	21 f0       	breq	.+8      	; 0x188 <Motor_Direction+0x76>
 180:	d8 f0       	brcs	.+54     	; 0x1b8 <Motor_Direction+0xa6>
 182:	62 30       	cpi	r22, 0x02	; 2
 184:	69 f0       	breq	.+26     	; 0x1a0 <Motor_Direction+0x8e>
 186:	2c c0       	rjmp	.+88     	; 0x1e0 <Motor_Direction+0xce>
 188:	4f ef       	ldi	r20, 0xFF	; 255
 18a:	60 e4       	ldi	r22, 0x40	; 64
 18c:	83 e0       	ldi	r24, 0x03	; 3
 18e:	0e 94 1e 02 	call	0x43c	; 0x43c <DIO_Write>
 192:	40 e0       	ldi	r20, 0x00	; 0
 194:	60 e8       	ldi	r22, 0x80	; 128
 196:	83 e0       	ldi	r24, 0x03	; 3
 198:	0e 94 1e 02 	call	0x43c	; 0x43c <DIO_Write>
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	08 95       	ret
 1a0:	40 e0       	ldi	r20, 0x00	; 0
 1a2:	60 e4       	ldi	r22, 0x40	; 64
 1a4:	83 e0       	ldi	r24, 0x03	; 3
 1a6:	0e 94 1e 02 	call	0x43c	; 0x43c <DIO_Write>
 1aa:	4f ef       	ldi	r20, 0xFF	; 255
 1ac:	60 e8       	ldi	r22, 0x80	; 128
 1ae:	83 e0       	ldi	r24, 0x03	; 3
 1b0:	0e 94 1e 02 	call	0x43c	; 0x43c <DIO_Write>
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	08 95       	ret
 1b8:	40 e0       	ldi	r20, 0x00	; 0
 1ba:	60 e4       	ldi	r22, 0x40	; 64
 1bc:	83 e0       	ldi	r24, 0x03	; 3
 1be:	0e 94 1e 02 	call	0x43c	; 0x43c <DIO_Write>
 1c2:	40 e0       	ldi	r20, 0x00	; 0
 1c4:	60 e8       	ldi	r22, 0x80	; 128
 1c6:	83 e0       	ldi	r24, 0x03	; 3
 1c8:	0e 94 1e 02 	call	0x43c	; 0x43c <DIO_Write>
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	08 95       	ret
 1d0:	8f ef       	ldi	r24, 0xFF	; 255
 1d2:	08 95       	ret
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	08 95       	ret
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
 1da:	08 95       	ret
 1dc:	8f ef       	ldi	r24, 0xFF	; 255
 1de:	08 95       	ret
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	08 95       	ret

000001e4 <Motor_Start>:
 1e4:	83 30       	cpi	r24, 0x03	; 3
 1e6:	d8 f4       	brcc	.+54     	; 0x21e <Motor_Start+0x3a>
 1e8:	65 36       	cpi	r22, 0x65	; 101
 1ea:	d8 f4       	brcc	.+54     	; 0x222 <Motor_Start+0x3e>
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	19 f0       	breq	.+6      	; 0x1f6 <Motor_Start+0x12>
 1f0:	82 30       	cpi	r24, 0x02	; 2
 1f2:	59 f0       	breq	.+22     	; 0x20a <Motor_Start+0x26>
 1f4:	18 c0       	rjmp	.+48     	; 0x226 <Motor_Start+0x42>
 1f6:	22 e3       	ldi	r18, 0x32	; 50
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	40 e0       	ldi	r20, 0x00	; 0
 1fc:	50 e0       	ldi	r21, 0x00	; 0
 1fe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <pwm_cfg>
 202:	0e 94 c3 02 	call	0x586	; 0x586 <Pwm_Start>
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	08 95       	ret
 20a:	22 e3       	ldi	r18, 0x32	; 50
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	40 e0       	ldi	r20, 0x00	; 0
 210:	50 e0       	ldi	r21, 0x00	; 0
 212:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <pwm_cfg>
 216:	0e 94 c3 02 	call	0x586	; 0x586 <Pwm_Start>
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	08 95       	ret
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	08 95       	ret
 222:	8f ef       	ldi	r24, 0xFF	; 255
 224:	08 95       	ret
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	08 95       	ret

0000022a <Motor_Stop>:

ERROR_STATUS Motor_Stop(uint8_t Motor_Number)
{
	uint8_t fun_status = OK;

	if(Motor_Number > MOTOR_2)
 22a:	83 30       	cpi	r24, 0x03	; 3
 22c:	88 f4       	brcc	.+34     	; 0x250 <Motor_Stop+0x26>
	{
		fun_status = NOK;
	}
	else
	{
		switch(Motor_Number)
 22e:	81 30       	cpi	r24, 0x01	; 1
 230:	19 f0       	breq	.+6      	; 0x238 <Motor_Stop+0xe>
 232:	82 30       	cpi	r24, 0x02	; 2
 234:	39 f0       	breq	.+14     	; 0x244 <Motor_Stop+0x1a>
 236:	0e c0       	rjmp	.+28     	; 0x254 <Motor_Stop+0x2a>
		{
			case MOTOR_1:
				Pwm_Stop(pwm_cfg.Channel);
 238:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <pwm_cfg>
 23c:	0e 94 0c 03 	call	0x618	; 0x618 <Pwm_Stop>
	return fun_status;
}

ERROR_STATUS Motor_Stop(uint8_t Motor_Number)
{
	uint8_t fun_status = OK;
 240:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(Motor_Number)
		{
			case MOTOR_1:
				Pwm_Stop(pwm_cfg.Channel);
			break;
 242:	08 95       	ret
			case MOTOR_2:
				Pwm_Stop(pwm_cfg.Channel);
 244:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <pwm_cfg>
 248:	0e 94 0c 03 	call	0x618	; 0x618 <Pwm_Stop>
	return fun_status;
}

ERROR_STATUS Motor_Stop(uint8_t Motor_Number)
{
	uint8_t fun_status = OK;
 24c:	81 e0       	ldi	r24, 0x01	; 1
			case MOTOR_1:
				Pwm_Stop(pwm_cfg.Channel);
			break;
			case MOTOR_2:
				Pwm_Stop(pwm_cfg.Channel);
			break;
 24e:	08 95       	ret
{
	uint8_t fun_status = OK;

	if(Motor_Number > MOTOR_2)
	{
		fun_status = NOK;
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	08 95       	ret
			break;
			case MOTOR_2:
				Pwm_Stop(pwm_cfg.Channel);
			break;
			default:
			fun_status = NOK;
 254:	8f ef       	ldi	r24, 0xFF	; 255
			break;
		}
	}
	return fun_status;
}
 256:	08 95       	ret

00000258 <main>:
#include "MCAL/PWM/PWM.h"
#include "HAL/Motor/motor.h"
#include "SWICU/SWICU.h"
#include <util/delay.h>
int main(void)
{
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	00 d0       	rcall	.+0      	; 0x25e <main+0x6>
 25e:	00 d0       	rcall	.+0      	; 0x260 <main+0x8>
 260:	00 d0       	rcall	.+0      	; 0x262 <main+0xa>
 262:	cd b7       	in	r28, 0x3d	; 61
 264:	de b7       	in	r29, 0x3e	; 62
	pwm_cfg.Prescaler = PWM_PRESCALER_8;
	Pwm_Init(&pwm_cfg);
	Pwm_Start(PWM_CH1A|PWM_CH1B,99,1000);
*/
Icu_cfg_s icu_cfg;
icu_cfg.ICU_Ch_No = ICU_CH2;
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	89 83       	std	Y+1, r24	; 0x01
icu_cfg.ICU_Ch_Timer = ICU_TIMER_CH0;
 26a:	1a 82       	std	Y+2, r1	; 0x02
//PORTA_DIR  = 0xff;
sei();
 26c:	78 94       	sei





	Motor_Init(MOTOR_1);
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	0e 94 46 00 	call	0x8c	; 0x8c <Motor_Init>
	Motor_Direction(MOTOR_1,MOTOR_FORWARD);
 274:	61 e0       	ldi	r22, 0x01	; 1
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	0e 94 89 00 	call	0x112	; 0x112 <Motor_Direction>
	Motor_Start(MOTOR_1,100);
 27c:	64 e6       	ldi	r22, 0x64	; 100
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <Motor_Start>
	Motor_Init(MOTOR_2);
 284:	82 e0       	ldi	r24, 0x02	; 2
 286:	0e 94 46 00 	call	0x8c	; 0x8c <Motor_Init>
	Motor_Direction(MOTOR_2,MOTOR_FORWARD);
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	82 e0       	ldi	r24, 0x02	; 2
 28e:	0e 94 89 00 	call	0x112	; 0x112 <Motor_Direction>
	Motor_Start(MOTOR_2,100);
 292:	64 e6       	ldi	r22, 0x64	; 100
 294:	82 e0       	ldi	r24, 0x02	; 2
 296:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <Motor_Start>
	ICR1  = 2000;
	OCR1A = 1000;
	OCR1B = 1000;
	PORTD_DIR = 0xff;
*/  
	PORTB_DIR |=0xF0;
 29a:	87 b3       	in	r24, 0x17	; 23
 29c:	80 6f       	ori	r24, 0xF0	; 240
 29e:	87 bb       	out	0x17, r24	; 23
	PORTD_DIR |=BIT0;
 2a0:	88 9a       	sbi	0x11, 0	; 17
	PORTA_DIR |=0xff;
 2a2:	8a b3       	in	r24, 0x1a	; 26
 2a4:	8f ef       	ldi	r24, 0xFF	; 255
 2a6:	8a bb       	out	0x1a, r24	; 26
	uint32_t dis;
    while (1) 
    {
		Icu_Init(&icu_cfg);
 2a8:	ce 01       	movw	r24, r28
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	0e 94 67 05 	call	0xace	; 0xace <Icu_Init>
		PORTD_DATA |= BIT0;
 2b0:	90 9a       	sbi	0x12, 0	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b2:	83 ec       	ldi	r24, 0xC3	; 195
 2b4:	99 e0       	ldi	r25, 0x09	; 9
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <main+0x5e>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <main+0x64>
 2bc:	00 00       	nop
		_delay_ms(10);
		PORTD_DATA &= ~BIT0;
 2be:	90 98       	cbi	0x12, 0	; 18
		Icu_ReadTime(icu_cfg.ICU_Ch_No,ICU_FALE_TO_RISE,&dis);
 2c0:	ae 01       	movw	r20, r28
 2c2:	4d 5f       	subi	r20, 0xFD	; 253
 2c4:	5f 4f       	sbci	r21, 0xFF	; 255
 2c6:	62 e0       	ldi	r22, 0x02	; 2
 2c8:	89 81       	ldd	r24, Y+1	; 0x01
 2ca:	0e 94 ba 05 	call	0xb74	; 0xb74 <Icu_ReadTime>
		dis = ((dis*8)/27.0);
 2ce:	8b 81       	ldd	r24, Y+3	; 0x03
 2d0:	9c 81       	ldd	r25, Y+4	; 0x04
 2d2:	ad 81       	ldd	r26, Y+5	; 0x05
 2d4:	be 81       	ldd	r27, Y+6	; 0x06
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	aa 1f       	adc	r26, r26
 2dc:	bb 1f       	adc	r27, r27
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	aa 1f       	adc	r26, r26
 2e4:	bb 1f       	adc	r27, r27
 2e6:	bc 01       	movw	r22, r24
 2e8:	cd 01       	movw	r24, r26
 2ea:	66 0f       	add	r22, r22
 2ec:	77 1f       	adc	r23, r23
 2ee:	88 1f       	adc	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__floatunsisf>
 2f6:	20 e0       	ldi	r18, 0x00	; 0
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	48 ed       	ldi	r20, 0xD8	; 216
 2fc:	51 e4       	ldi	r21, 0x41	; 65
 2fe:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__divsf3>
 302:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__fixunssfsi>
 306:	6b 83       	std	Y+3, r22	; 0x03
 308:	7c 83       	std	Y+4, r23	; 0x04
 30a:	8d 83       	std	Y+5, r24	; 0x05
 30c:	9e 83       	std	Y+6, r25	; 0x06
		//dis = (dis*15)/200.0;
		TCNT1L = dis;
 30e:	6c bd       	out	0x2c, r22	; 44
		PORTB_DATA = (PORTB_DATA&0x0F) | (dis<<4);
 310:	88 b3       	in	r24, 0x18	; 24
 312:	9b 81       	ldd	r25, Y+3	; 0x03
 314:	92 95       	swap	r25
 316:	90 7f       	andi	r25, 0xF0	; 240
 318:	8f 70       	andi	r24, 0x0F	; 15
 31a:	89 2b       	or	r24, r25
 31c:	88 bb       	out	0x18, r24	; 24
		
		if(dis < 15)
 31e:	8b 81       	ldd	r24, Y+3	; 0x03
 320:	9c 81       	ldd	r25, Y+4	; 0x04
 322:	ad 81       	ldd	r26, Y+5	; 0x05
 324:	be 81       	ldd	r27, Y+6	; 0x06
 326:	0f 97       	sbiw	r24, 0x0f	; 15
 328:	a1 05       	cpc	r26, r1
 32a:	b1 05       	cpc	r27, r1
 32c:	38 f4       	brcc	.+14     	; 0x33c <main+0xe4>
		{
			Motor_Stop(MOTOR_1);
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	0e 94 15 01 	call	0x22a	; 0x22a <Motor_Stop>
			Motor_Stop(MOTOR_2);
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	0e 94 15 01 	call	0x22a	; 0x22a <Motor_Stop>
 33a:	08 c0       	rjmp	.+16     	; 0x34c <main+0xf4>
		}
		else
		{
			Motor_Start(MOTOR_1,50);
 33c:	62 e3       	ldi	r22, 0x32	; 50
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <Motor_Start>
			Motor_Start(MOTOR_1,50);
 344:	62 e3       	ldi	r22, 0x32	; 50
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <Motor_Start>
 34c:	87 ea       	ldi	r24, 0xA7	; 167
 34e:	91 e6       	ldi	r25, 0x61	; 97
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <main+0xf8>
 354:	00 c0       	rjmp	.+0      	; 0x356 <main+0xfe>
 356:	00 00       	nop
 358:	a7 cf       	rjmp	.-178    	; 0x2a8 <main+0x50>

0000035a <DIO_init>:

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t fun_status = OK;
    /*check for errors*/
	if((DIO_info->dir != OUTPUT && DIO_info->dir != INPUT) || 
 35a:	fc 01       	movw	r30, r24
 35c:	22 81       	ldd	r18, Z+2	; 0x02
 35e:	3f ef       	ldi	r19, 0xFF	; 255
 360:	32 0f       	add	r19, r18
 362:	3e 3f       	cpi	r19, 0xFE	; 254
 364:	08 f4       	brcc	.+2      	; 0x368 <DIO_init+0xe>
 366:	5c c0       	rjmp	.+184    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		DIO_info->GPIO > GPIOD)
 368:	30 81       	ld	r19, Z

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t fun_status = OK;
    /*check for errors*/
	if((DIO_info->dir != OUTPUT && DIO_info->dir != INPUT) || 
 36a:	34 30       	cpi	r19, 0x04	; 4
 36c:	08 f0       	brcs	.+2      	; 0x370 <DIO_init+0x16>
 36e:	5a c0       	rjmp	.+180    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		fun_status = NOK;
	}
	/*if input is ok proceed with fun process*/
	else
	{
			switch(DIO_info->GPIO)
 370:	31 30       	cpi	r19, 0x01	; 1
 372:	d1 f0       	breq	.+52     	; 0x3a8 <DIO_init+0x4e>
 374:	28 f0       	brcs	.+10     	; 0x380 <DIO_init+0x26>
 376:	32 30       	cpi	r19, 0x02	; 2
 378:	59 f1       	breq	.+86     	; 0x3d0 <DIO_init+0x76>
 37a:	33 30       	cpi	r19, 0x03	; 3
 37c:	e9 f1       	breq	.+122    	; 0x3f8 <DIO_init+0x9e>
 37e:	54 c0       	rjmp	.+168    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			{
				case GPIOA:
					switch(DIO_info->dir)
 380:	22 23       	and	r18, r18
 382:	19 f0       	breq	.+6      	; 0x38a <DIO_init+0x30>
 384:	2f 3f       	cpi	r18, 0xFF	; 255
 386:	49 f0       	breq	.+18     	; 0x39a <DIO_init+0x40>
 388:	51 c0       	rjmp	.+162    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
					{
						case INPUT:
							CLEAR_MASK(PORTA_DIR,DIO_info->pins);
 38a:	2a b3       	in	r18, 0x1a	; 26
 38c:	fc 01       	movw	r30, r24
 38e:	81 81       	ldd	r24, Z+1	; 0x01
 390:	80 95       	com	r24
 392:	82 23       	and	r24, r18
 394:	8a bb       	out	0x1a, r24	; 26
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t fun_status = OK;
 396:	81 e0       	ldi	r24, 0x01	; 1
				case GPIOA:
					switch(DIO_info->dir)
					{
						case INPUT:
							CLEAR_MASK(PORTA_DIR,DIO_info->pins);
						break;
 398:	08 95       	ret
						case OUTPUT:
							SET_MASK(PORTA_DIR,DIO_info->pins);
 39a:	2a b3       	in	r18, 0x1a	; 26
 39c:	fc 01       	movw	r30, r24
 39e:	81 81       	ldd	r24, Z+1	; 0x01
 3a0:	82 2b       	or	r24, r18
 3a2:	8a bb       	out	0x1a, r24	; 26
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t fun_status = OK;
 3a4:	81 e0       	ldi	r24, 0x01	; 1
						case INPUT:
							CLEAR_MASK(PORTA_DIR,DIO_info->pins);
						break;
						case OUTPUT:
							SET_MASK(PORTA_DIR,DIO_info->pins);
						break;
 3a6:	08 95       	ret
					}
				break;
				case GPIOB:
					switch(DIO_info->dir)
 3a8:	22 23       	and	r18, r18
 3aa:	19 f0       	breq	.+6      	; 0x3b2 <DIO_init+0x58>
 3ac:	2f 3f       	cpi	r18, 0xFF	; 255
 3ae:	49 f0       	breq	.+18     	; 0x3c2 <DIO_init+0x68>
 3b0:	3f c0       	rjmp	.+126    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
					{
						case INPUT:
						CLEAR_MASK(PORTB_DIR,DIO_info->pins);
 3b2:	27 b3       	in	r18, 0x17	; 23
 3b4:	fc 01       	movw	r30, r24
 3b6:	81 81       	ldd	r24, Z+1	; 0x01
 3b8:	80 95       	com	r24
 3ba:	82 23       	and	r24, r18
 3bc:	87 bb       	out	0x17, r24	; 23
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t fun_status = OK;
 3be:	81 e0       	ldi	r24, 0x01	; 1
				case GPIOB:
					switch(DIO_info->dir)
					{
						case INPUT:
						CLEAR_MASK(PORTB_DIR,DIO_info->pins);
						break;
 3c0:	08 95       	ret
						case OUTPUT:
						SET_MASK(PORTB_DIR,DIO_info->pins);
 3c2:	27 b3       	in	r18, 0x17	; 23
 3c4:	fc 01       	movw	r30, r24
 3c6:	81 81       	ldd	r24, Z+1	; 0x01
 3c8:	82 2b       	or	r24, r18
 3ca:	87 bb       	out	0x17, r24	; 23
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t fun_status = OK;
 3cc:	81 e0       	ldi	r24, 0x01	; 1
						case INPUT:
						CLEAR_MASK(PORTB_DIR,DIO_info->pins);
						break;
						case OUTPUT:
						SET_MASK(PORTB_DIR,DIO_info->pins);
						break;
 3ce:	08 95       	ret
					}
				break;
				case GPIOC:
					switch(DIO_info->dir)
 3d0:	22 23       	and	r18, r18
 3d2:	19 f0       	breq	.+6      	; 0x3da <DIO_init+0x80>
 3d4:	2f 3f       	cpi	r18, 0xFF	; 255
 3d6:	49 f0       	breq	.+18     	; 0x3ea <DIO_init+0x90>
 3d8:	2d c0       	rjmp	.+90     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
					{
						case INPUT:
						CLEAR_MASK(PORTC_DIR,DIO_info->pins);
 3da:	24 b3       	in	r18, 0x14	; 20
 3dc:	fc 01       	movw	r30, r24
 3de:	81 81       	ldd	r24, Z+1	; 0x01
 3e0:	80 95       	com	r24
 3e2:	82 23       	and	r24, r18
 3e4:	84 bb       	out	0x14, r24	; 20
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t fun_status = OK;
 3e6:	81 e0       	ldi	r24, 0x01	; 1
				case GPIOC:
					switch(DIO_info->dir)
					{
						case INPUT:
						CLEAR_MASK(PORTC_DIR,DIO_info->pins);
						break;
 3e8:	08 95       	ret
						case OUTPUT:
						SET_MASK(PORTC_DIR,DIO_info->pins);
 3ea:	24 b3       	in	r18, 0x14	; 20
 3ec:	fc 01       	movw	r30, r24
 3ee:	81 81       	ldd	r24, Z+1	; 0x01
 3f0:	82 2b       	or	r24, r18
 3f2:	84 bb       	out	0x14, r24	; 20
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t fun_status = OK;
 3f4:	81 e0       	ldi	r24, 0x01	; 1
						case INPUT:
						CLEAR_MASK(PORTC_DIR,DIO_info->pins);
						break;
						case OUTPUT:
						SET_MASK(PORTC_DIR,DIO_info->pins);
						break;
 3f6:	08 95       	ret
					}
				break;
				case GPIOD:
					switch(DIO_info->dir)
 3f8:	22 23       	and	r18, r18
 3fa:	19 f0       	breq	.+6      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fc:	2f 3f       	cpi	r18, 0xFF	; 255
 3fe:	49 f0       	breq	.+18     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 400:	1b c0       	rjmp	.+54     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
					{
						case INPUT:
						CLEAR_MASK(PORTD_DIR,DIO_info->pins);
 402:	21 b3       	in	r18, 0x11	; 17
 404:	fc 01       	movw	r30, r24
 406:	81 81       	ldd	r24, Z+1	; 0x01
 408:	80 95       	com	r24
 40a:	82 23       	and	r24, r18
 40c:	81 bb       	out	0x11, r24	; 17
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t fun_status = OK;
 40e:	81 e0       	ldi	r24, 0x01	; 1
				case GPIOD:
					switch(DIO_info->dir)
					{
						case INPUT:
						CLEAR_MASK(PORTD_DIR,DIO_info->pins);
						break;
 410:	08 95       	ret
						case OUTPUT:
						SET_MASK(PORTD_DIR,DIO_info->pins);
 412:	21 b3       	in	r18, 0x11	; 17
 414:	fc 01       	movw	r30, r24
 416:	81 81       	ldd	r24, Z+1	; 0x01
 418:	82 2b       	or	r24, r18
 41a:	81 bb       	out	0x11, r24	; 17
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t fun_status = OK;
 41c:	81 e0       	ldi	r24, 0x01	; 1
						case INPUT:
						CLEAR_MASK(PORTD_DIR,DIO_info->pins);
						break;
						case OUTPUT:
						SET_MASK(PORTD_DIR,DIO_info->pins);
						break;
 41e:	08 95       	ret
	uint8_t fun_status = OK;
    /*check for errors*/
	if((DIO_info->dir != OUTPUT && DIO_info->dir != INPUT) || 
		DIO_info->GPIO > GPIOD)
	{
		fun_status = NOK;
 420:	8f ef       	ldi	r24, 0xFF	; 255
 422:	08 95       	ret
 424:	8f ef       	ldi	r24, 0xFF	; 255
 426:	08 95       	ret
						SET_MASK(PORTD_DIR,DIO_info->pins);
						break;
					}
				break;
				default:
					fun_status = NOK;
 428:	8f ef       	ldi	r24, 0xFF	; 255
 42a:	08 95       	ret
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t fun_status = OK;
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	08 95       	ret
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	08 95       	ret
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	08 95       	ret
 438:	81 e0       	ldi	r24, 0x01	; 1
					fun_status = NOK;
				break;
			}
	}
	return fun_status;
}
 43a:	08 95       	ret

0000043c <DIO_Write>:

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	uint8_t fun_status = OK;
	/*check for errors*/
	if(GPIO > GPIOD || (value != HIGH && value !=LOW))
 43c:	84 30       	cpi	r24, 0x04	; 4
 43e:	08 f0       	brcs	.+2      	; 0x442 <DIO_Write+0x6>
 440:	4d c0       	rjmp	.+154    	; 0x4dc <DIO_Write+0xa0>
 442:	9f ef       	ldi	r25, 0xFF	; 255
 444:	94 0f       	add	r25, r20
 446:	9e 3f       	cpi	r25, 0xFE	; 254
 448:	08 f4       	brcc	.+2      	; 0x44c <DIO_Write+0x10>
 44a:	4a c0       	rjmp	.+148    	; 0x4e0 <DIO_Write+0xa4>
		fun_status = NOK;
	}
	/*if input is ok proceed with fun process*/
	else
	{
		switch(GPIO)
 44c:	81 30       	cpi	r24, 0x01	; 1
 44e:	b1 f0       	breq	.+44     	; 0x47c <DIO_Write+0x40>
 450:	28 f0       	brcs	.+10     	; 0x45c <DIO_Write+0x20>
 452:	82 30       	cpi	r24, 0x02	; 2
 454:	19 f1       	breq	.+70     	; 0x49c <DIO_Write+0x60>
 456:	83 30       	cpi	r24, 0x03	; 3
 458:	89 f1       	breq	.+98     	; 0x4bc <DIO_Write+0x80>
 45a:	44 c0       	rjmp	.+136    	; 0x4e4 <DIO_Write+0xa8>
		{
			case GPIOA:
			switch(value)
 45c:	44 23       	and	r20, r20
 45e:	19 f0       	breq	.+6      	; 0x466 <DIO_Write+0x2a>
 460:	4f 3f       	cpi	r20, 0xFF	; 255
 462:	39 f0       	breq	.+14     	; 0x472 <DIO_Write+0x36>
 464:	41 c0       	rjmp	.+130    	; 0x4e8 <DIO_Write+0xac>
			{
				case LOW:
				CLEAR_MASK(PORTA_DATA,pins);
 466:	8b b3       	in	r24, 0x1b	; 27
 468:	60 95       	com	r22
 46a:	68 23       	and	r22, r24
 46c:	6b bb       	out	0x1b, r22	; 27
}


ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	uint8_t fun_status = OK;
 46e:	81 e0       	ldi	r24, 0x01	; 1
			case GPIOA:
			switch(value)
			{
				case LOW:
				CLEAR_MASK(PORTA_DATA,pins);
				break;
 470:	08 95       	ret
				case HIGH:
				SET_MASK(PORTA_DATA,pins);
 472:	8b b3       	in	r24, 0x1b	; 27
 474:	68 2b       	or	r22, r24
 476:	6b bb       	out	0x1b, r22	; 27
}


ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	uint8_t fun_status = OK;
 478:	81 e0       	ldi	r24, 0x01	; 1
				case LOW:
				CLEAR_MASK(PORTA_DATA,pins);
				break;
				case HIGH:
				SET_MASK(PORTA_DATA,pins);
				break;
 47a:	08 95       	ret
			}
			break;
			case GPIOB:
			switch(value)
 47c:	44 23       	and	r20, r20
 47e:	19 f0       	breq	.+6      	; 0x486 <DIO_Write+0x4a>
 480:	4f 3f       	cpi	r20, 0xFF	; 255
 482:	39 f0       	breq	.+14     	; 0x492 <DIO_Write+0x56>
 484:	33 c0       	rjmp	.+102    	; 0x4ec <DIO_Write+0xb0>
			{
				case LOW:
				CLEAR_MASK(PORTB_DATA,pins);
 486:	88 b3       	in	r24, 0x18	; 24
 488:	60 95       	com	r22
 48a:	68 23       	and	r22, r24
 48c:	68 bb       	out	0x18, r22	; 24
}


ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	uint8_t fun_status = OK;
 48e:	81 e0       	ldi	r24, 0x01	; 1
			case GPIOB:
			switch(value)
			{
				case LOW:
				CLEAR_MASK(PORTB_DATA,pins);
				break;
 490:	08 95       	ret
				case HIGH:
				SET_MASK(PORTB_DATA,pins);
 492:	88 b3       	in	r24, 0x18	; 24
 494:	68 2b       	or	r22, r24
 496:	68 bb       	out	0x18, r22	; 24
}


ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	uint8_t fun_status = OK;
 498:	81 e0       	ldi	r24, 0x01	; 1
				case LOW:
				CLEAR_MASK(PORTB_DATA,pins);
				break;
				case HIGH:
				SET_MASK(PORTB_DATA,pins);
				break;
 49a:	08 95       	ret
			}
			break;
			case GPIOC:
			switch(value)
 49c:	44 23       	and	r20, r20
 49e:	19 f0       	breq	.+6      	; 0x4a6 <DIO_Write+0x6a>
 4a0:	4f 3f       	cpi	r20, 0xFF	; 255
 4a2:	39 f0       	breq	.+14     	; 0x4b2 <DIO_Write+0x76>
 4a4:	25 c0       	rjmp	.+74     	; 0x4f0 <DIO_Write+0xb4>
			{
				case INPUT:
				CLEAR_MASK(PORTC_DATA,pins);
 4a6:	85 b3       	in	r24, 0x15	; 21
 4a8:	60 95       	com	r22
 4aa:	68 23       	and	r22, r24
 4ac:	65 bb       	out	0x15, r22	; 21
}


ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	uint8_t fun_status = OK;
 4ae:	81 e0       	ldi	r24, 0x01	; 1
			case GPIOC:
			switch(value)
			{
				case INPUT:
				CLEAR_MASK(PORTC_DATA,pins);
				break;
 4b0:	08 95       	ret
				case OUTPUT:
				SET_MASK(PORTC_DATA,pins);
 4b2:	85 b3       	in	r24, 0x15	; 21
 4b4:	68 2b       	or	r22, r24
 4b6:	65 bb       	out	0x15, r22	; 21
}


ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	uint8_t fun_status = OK;
 4b8:	81 e0       	ldi	r24, 0x01	; 1
				case INPUT:
				CLEAR_MASK(PORTC_DATA,pins);
				break;
				case OUTPUT:
				SET_MASK(PORTC_DATA,pins);
				break;
 4ba:	08 95       	ret
			}
			break;
			case GPIOD:
			switch(value)
 4bc:	44 23       	and	r20, r20
 4be:	19 f0       	breq	.+6      	; 0x4c6 <DIO_Write+0x8a>
 4c0:	4f 3f       	cpi	r20, 0xFF	; 255
 4c2:	39 f0       	breq	.+14     	; 0x4d2 <DIO_Write+0x96>
 4c4:	17 c0       	rjmp	.+46     	; 0x4f4 <DIO_Write+0xb8>
			{
				case INPUT:
				CLEAR_MASK(PORTD_DATA,pins);
 4c6:	82 b3       	in	r24, 0x12	; 18
 4c8:	60 95       	com	r22
 4ca:	68 23       	and	r22, r24
 4cc:	62 bb       	out	0x12, r22	; 18
}


ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	uint8_t fun_status = OK;
 4ce:	81 e0       	ldi	r24, 0x01	; 1
			case GPIOD:
			switch(value)
			{
				case INPUT:
				CLEAR_MASK(PORTD_DATA,pins);
				break;
 4d0:	08 95       	ret
				case OUTPUT:
				SET_MASK(PORTD_DATA,pins);
 4d2:	82 b3       	in	r24, 0x12	; 18
 4d4:	68 2b       	or	r22, r24
 4d6:	62 bb       	out	0x12, r22	; 18
}


ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	uint8_t fun_status = OK;
 4d8:	81 e0       	ldi	r24, 0x01	; 1
				case INPUT:
				CLEAR_MASK(PORTD_DATA,pins);
				break;
				case OUTPUT:
				SET_MASK(PORTD_DATA,pins);
				break;
 4da:	08 95       	ret
{
	uint8_t fun_status = OK;
	/*check for errors*/
	if(GPIO > GPIOD || (value != HIGH && value !=LOW))
	{
		fun_status = NOK;
 4dc:	8f ef       	ldi	r24, 0xFF	; 255
 4de:	08 95       	ret
 4e0:	8f ef       	ldi	r24, 0xFF	; 255
 4e2:	08 95       	ret
				SET_MASK(PORTD_DATA,pins);
				break;
			}
			break;
			default:
			fun_status = NOK;
 4e4:	8f ef       	ldi	r24, 0xFF	; 255
 4e6:	08 95       	ret
}


ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	uint8_t fun_status = OK;
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	08 95       	ret
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	08 95       	ret
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	08 95       	ret
 4f4:	81 e0       	ldi	r24, 0x01	; 1
			fun_status = NOK;
			break;
		}
	}
	return fun_status;
}
 4f6:	08 95       	ret

000004f8 <Pwm_Init>:
		break;
		case PWM_CH2:
		break;
	} 
	return fun_status;
}
 4f8:	fc 01       	movw	r30, r24
 4fa:	20 81       	ld	r18, Z
 4fc:	25 30       	cpi	r18, 0x05	; 5
 4fe:	b0 f4       	brcc	.+44     	; 0x52c <Pwm_Init+0x34>
 500:	00 97       	sbiw	r24, 0x00	; 0
 502:	d1 f4       	brne	.+52     	; 0x538 <Pwm_Init+0x40>
 504:	15 c0       	rjmp	.+42     	; 0x530 <Pwm_Init+0x38>
 506:	8e b5       	in	r24, 0x2e	; 46
 508:	9f b5       	in	r25, 0x2f	; 47
 50a:	80 61       	ori	r24, 0x10	; 16
 50c:	92 60       	ori	r25, 0x02	; 2
 50e:	9f bd       	out	0x2f, r25	; 47
 510:	8e bd       	out	0x2e, r24	; 46
 512:	8e b5       	in	r24, 0x2e	; 46
 514:	9f b5       	in	r25, 0x2f	; 47
 516:	90 6a       	ori	r25, 0xA0	; 160
 518:	9f bd       	out	0x2f, r25	; 47
 51a:	8e bd       	out	0x2e, r24	; 46
 51c:	82 e0       	ldi	r24, 0x02	; 2
 51e:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <gPWM_prescaler>
 522:	81 b3       	in	r24, 0x11	; 17
 524:	80 63       	ori	r24, 0x30	; 48
 526:	81 bb       	out	0x11, r24	; 17
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	08 95       	ret
 52c:	8f ef       	ldi	r24, 0xFF	; 255
 52e:	08 95       	ret
 530:	8f ef       	ldi	r24, 0xFF	; 255
 532:	08 95       	ret
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	08 95       	ret
 538:	1f bc       	out	0x2f, r1	; 47
 53a:	1e bc       	out	0x2e, r1	; 46
 53c:	1d bc       	out	0x2d, r1	; 45
 53e:	1c bc       	out	0x2c, r1	; 44
 540:	1b bc       	out	0x2b, r1	; 43
 542:	1a bc       	out	0x2a, r1	; 42
 544:	19 bc       	out	0x29, r1	; 41
 546:	18 bc       	out	0x28, r1	; 40
 548:	17 bc       	out	0x27, r1	; 39
 54a:	16 bc       	out	0x26, r1	; 38
 54c:	29 b7       	in	r18, 0x39	; 57
 54e:	2f 7d       	andi	r18, 0xDF	; 223
 550:	29 bf       	out	0x39, r18	; 57
 552:	29 b7       	in	r18, 0x39	; 57
 554:	2f 7e       	andi	r18, 0xEF	; 239
 556:	29 bf       	out	0x39, r18	; 57
 558:	29 b7       	in	r18, 0x39	; 57
 55a:	27 7f       	andi	r18, 0xF7	; 247
 55c:	29 bf       	out	0x39, r18	; 57
 55e:	29 b7       	in	r18, 0x39	; 57
 560:	2b 7f       	andi	r18, 0xFB	; 251
 562:	29 bf       	out	0x39, r18	; 57
 564:	28 b7       	in	r18, 0x38	; 56
 566:	20 62       	ori	r18, 0x20	; 32
 568:	28 bf       	out	0x38, r18	; 56
 56a:	28 b7       	in	r18, 0x38	; 56
 56c:	20 61       	ori	r18, 0x10	; 16
 56e:	28 bf       	out	0x38, r18	; 56
 570:	28 b7       	in	r18, 0x38	; 56
 572:	28 60       	ori	r18, 0x08	; 8
 574:	28 bf       	out	0x38, r18	; 56
 576:	28 b7       	in	r18, 0x38	; 56
 578:	24 60       	ori	r18, 0x04	; 4
 57a:	28 bf       	out	0x38, r18	; 56
 57c:	fc 01       	movw	r30, r24
 57e:	80 81       	ld	r24, Z
 580:	83 30       	cpi	r24, 0x03	; 3
 582:	09 f2       	breq	.-126    	; 0x506 <Pwm_Init+0xe>
 584:	d7 cf       	rjmp	.-82     	; 0x534 <Pwm_Init+0x3c>

00000586 <Pwm_Start>:
 586:	cf 92       	push	r12
 588:	df 92       	push	r13
 58a:	ef 92       	push	r14
 58c:	ff 92       	push	r15
 58e:	cf 93       	push	r28
 590:	df 93       	push	r29
 592:	d6 2f       	mov	r29, r22
 594:	69 01       	movw	r12, r18
 596:	7a 01       	movw	r14, r20
 598:	9f e1       	ldi	r25, 0x1F	; 31
 59a:	c9 1a       	sub	r12, r25
 59c:	d1 08       	sbc	r13, r1
 59e:	e1 08       	sbc	r14, r1
 5a0:	f1 08       	sbc	r15, r1
 5a2:	92 e2       	ldi	r25, 0x22	; 34
 5a4:	c9 16       	cp	r12, r25
 5a6:	9c e9       	ldi	r25, 0x9C	; 156
 5a8:	d9 06       	cpc	r13, r25
 5aa:	e1 04       	cpc	r14, r1
 5ac:	f1 04       	cpc	r15, r1
 5ae:	20 f4       	brcc	.+8      	; 0x5b8 <Pwm_Start+0x32>
 5b0:	85 30       	cpi	r24, 0x05	; 5
 5b2:	20 f0       	brcs	.+8      	; 0x5bc <Pwm_Start+0x36>
 5b4:	cf ef       	ldi	r28, 0xFF	; 255
 5b6:	03 c0       	rjmp	.+6      	; 0x5be <Pwm_Start+0x38>
 5b8:	cf ef       	ldi	r28, 0xFF	; 255
 5ba:	01 c0       	rjmp	.+2      	; 0x5be <Pwm_Start+0x38>
 5bc:	c1 e0       	ldi	r28, 0x01	; 1
 5be:	83 30       	cpi	r24, 0x03	; 3
 5c0:	e1 f4       	brne	.+56     	; 0x5fa <Pwm_Start+0x74>
 5c2:	22 0f       	add	r18, r18
 5c4:	33 1f       	adc	r19, r19
 5c6:	44 1f       	adc	r20, r20
 5c8:	55 1f       	adc	r21, r21
 5ca:	60 e8       	ldi	r22, 0x80	; 128
 5cc:	74 e8       	ldi	r23, 0x84	; 132
 5ce:	8e e1       	ldi	r24, 0x1E	; 30
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	0e 94 2b 07 	call	0xe56	; 0xe56 <__udivmodsi4>
 5d6:	1d bc       	out	0x2d, r1	; 45
 5d8:	1c bc       	out	0x2c, r1	; 44
 5da:	37 bd       	out	0x27, r19	; 39
 5dc:	26 bd       	out	0x26, r18	; 38
 5de:	ad 2f       	mov	r26, r29
 5e0:	b0 e0       	ldi	r27, 0x00	; 0
 5e2:	0e 94 53 07 	call	0xea6	; 0xea6 <__muluhisi3>
 5e6:	24 e6       	ldi	r18, 0x64	; 100
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	40 e0       	ldi	r20, 0x00	; 0
 5ec:	50 e0       	ldi	r21, 0x00	; 0
 5ee:	0e 94 2b 07 	call	0xe56	; 0xe56 <__udivmodsi4>
 5f2:	3b bd       	out	0x2b, r19	; 43
 5f4:	2a bd       	out	0x2a, r18	; 42
 5f6:	39 bd       	out	0x29, r19	; 41
 5f8:	28 bd       	out	0x28, r18	; 40
 5fa:	8e b5       	in	r24, 0x2e	; 46
 5fc:	9f b5       	in	r25, 0x2f	; 47
 5fe:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <gPWM_prescaler>
 602:	82 2b       	or	r24, r18
 604:	9f bd       	out	0x2f, r25	; 47
 606:	8e bd       	out	0x2e, r24	; 46
 608:	8c 2f       	mov	r24, r28
 60a:	df 91       	pop	r29
 60c:	cf 91       	pop	r28
 60e:	ff 90       	pop	r15
 610:	ef 90       	pop	r14
 612:	df 90       	pop	r13
 614:	cf 90       	pop	r12
 616:	08 95       	ret

00000618 <Pwm_Stop>:

ERROR_STATUS Pwm_Stop(uint8_t Channel)
{
	uint8_t fun_status = OK;

	if(Channel > PWM_CH2)
 618:	85 30       	cpi	r24, 0x05	; 5
 61a:	60 f5       	brcc	.+88     	; 0x674 <Pwm_Stop+0x5c>
	{
		fun_status = NOK;
	}
	else
	{
		switch(Channel)
 61c:	82 30       	cpi	r24, 0x02	; 2
 61e:	b9 f0       	breq	.+46     	; 0x64e <Pwm_Stop+0x36>
 620:	28 f4       	brcc	.+10     	; 0x62c <Pwm_Stop+0x14>
 622:	88 23       	and	r24, r24
 624:	41 f0       	breq	.+16     	; 0x636 <Pwm_Stop+0x1e>
 626:	81 30       	cpi	r24, 0x01	; 1
 628:	59 f0       	breq	.+22     	; 0x640 <Pwm_Stop+0x28>
 62a:	26 c0       	rjmp	.+76     	; 0x678 <Pwm_Stop+0x60>
 62c:	83 30       	cpi	r24, 0x03	; 3
 62e:	b1 f0       	breq	.+44     	; 0x65c <Pwm_Stop+0x44>
 630:	84 30       	cpi	r24, 0x04	; 4
 632:	d9 f0       	breq	.+54     	; 0x66a <Pwm_Stop+0x52>
 634:	21 c0       	rjmp	.+66     	; 0x678 <Pwm_Stop+0x60>
		{
			case PWM_CH0:
				CLEAR_MASK(TCCR0,TIMER0_PRESCALER_CLEAR_MASK);
 636:	83 b7       	in	r24, 0x33	; 51
 638:	88 7f       	andi	r24, 0xF8	; 248
 63a:	83 bf       	out	0x33, r24	; 51
	return fun_status;
}

ERROR_STATUS Pwm_Stop(uint8_t Channel)
{
	uint8_t fun_status = OK;
 63c:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(Channel)
		{
			case PWM_CH0:
				CLEAR_MASK(TCCR0,TIMER0_PRESCALER_CLEAR_MASK);
			break;
 63e:	08 95       	ret
			case PWM_CH1A:
				CLEAR_MASK(TCCR1,TIMER1_PRESCALER_CLEAR_MASK);
 640:	8e b5       	in	r24, 0x2e	; 46
 642:	9f b5       	in	r25, 0x2f	; 47
 644:	88 7f       	andi	r24, 0xF8	; 248
 646:	9f bd       	out	0x2f, r25	; 47
 648:	8e bd       	out	0x2e, r24	; 46
	return fun_status;
}

ERROR_STATUS Pwm_Stop(uint8_t Channel)
{
	uint8_t fun_status = OK;
 64a:	81 e0       	ldi	r24, 0x01	; 1
			case PWM_CH0:
				CLEAR_MASK(TCCR0,TIMER0_PRESCALER_CLEAR_MASK);
			break;
			case PWM_CH1A:
				CLEAR_MASK(TCCR1,TIMER1_PRESCALER_CLEAR_MASK);
			break;
 64c:	08 95       	ret
			case PWM_CH1B:
				CLEAR_MASK(TCCR1,TIMER1_PRESCALER_CLEAR_MASK);
 64e:	8e b5       	in	r24, 0x2e	; 46
 650:	9f b5       	in	r25, 0x2f	; 47
 652:	88 7f       	andi	r24, 0xF8	; 248
 654:	9f bd       	out	0x2f, r25	; 47
 656:	8e bd       	out	0x2e, r24	; 46
	return fun_status;
}

ERROR_STATUS Pwm_Stop(uint8_t Channel)
{
	uint8_t fun_status = OK;
 658:	81 e0       	ldi	r24, 0x01	; 1
			case PWM_CH1A:
				CLEAR_MASK(TCCR1,TIMER1_PRESCALER_CLEAR_MASK);
			break;
			case PWM_CH1B:
				CLEAR_MASK(TCCR1,TIMER1_PRESCALER_CLEAR_MASK);
			break;
 65a:	08 95       	ret
			case PWM_CH1A_B:
				CLEAR_MASK(TCCR1,TIMER1_PRESCALER_CLEAR_MASK);
 65c:	8e b5       	in	r24, 0x2e	; 46
 65e:	9f b5       	in	r25, 0x2f	; 47
 660:	88 7f       	andi	r24, 0xF8	; 248
 662:	9f bd       	out	0x2f, r25	; 47
 664:	8e bd       	out	0x2e, r24	; 46
	return fun_status;
}

ERROR_STATUS Pwm_Stop(uint8_t Channel)
{
	uint8_t fun_status = OK;
 666:	81 e0       	ldi	r24, 0x01	; 1
			case PWM_CH1B:
				CLEAR_MASK(TCCR1,TIMER1_PRESCALER_CLEAR_MASK);
			break;
			case PWM_CH1A_B:
				CLEAR_MASK(TCCR1,TIMER1_PRESCALER_CLEAR_MASK);
			break;
 668:	08 95       	ret
			case PWM_CH2:
				CLEAR_MASK(TCCR2,TIMER2_PRESCALER_CLEAR_MASK);
 66a:	85 b5       	in	r24, 0x25	; 37
 66c:	88 7f       	andi	r24, 0xF8	; 248
 66e:	85 bd       	out	0x25, r24	; 37
	return fun_status;
}

ERROR_STATUS Pwm_Stop(uint8_t Channel)
{
	uint8_t fun_status = OK;
 670:	81 e0       	ldi	r24, 0x01	; 1
			case PWM_CH1A_B:
				CLEAR_MASK(TCCR1,TIMER1_PRESCALER_CLEAR_MASK);
			break;
			case PWM_CH2:
				CLEAR_MASK(TCCR2,TIMER2_PRESCALER_CLEAR_MASK);
			break;
 672:	08 95       	ret
{
	uint8_t fun_status = OK;

	if(Channel > PWM_CH2)
	{
		fun_status = NOK;
 674:	8f ef       	ldi	r24, 0xFF	; 255
 676:	08 95       	ret
			break;
			case PWM_CH2:
				CLEAR_MASK(TCCR2,TIMER2_PRESCALER_CLEAR_MASK);
			break;
			default:
				fun_status = NOK;
 678:	8f ef       	ldi	r24, 0xFF	; 255
			break;
		}
	}
	return fun_status;
 67a:	08 95       	ret

0000067c <Timer_Init>:
		default:
			fun_status = NOK;
		break;
	}
	return fun_status;
}
 67c:	fc 01       	movw	r30, r24
 67e:	80 81       	ld	r24, Z
 680:	81 30       	cpi	r24, 0x01	; 1
 682:	09 f4       	brne	.+2      	; 0x686 <Timer_Init+0xa>
 684:	42 c0       	rjmp	.+132    	; 0x70a <Timer_Init+0x8e>
 686:	20 f0       	brcs	.+8      	; 0x690 <Timer_Init+0x14>
 688:	82 30       	cpi	r24, 0x02	; 2
 68a:	09 f4       	brne	.+2      	; 0x68e <Timer_Init+0x12>
 68c:	98 c0       	rjmp	.+304    	; 0x7be <Timer_Init+0x142>
 68e:	ca c0       	rjmp	.+404    	; 0x824 <Timer_Init+0x1a8>
 690:	13 be       	out	0x33, r1	; 51
 692:	12 be       	out	0x32, r1	; 50
 694:	89 b7       	in	r24, 0x39	; 57
 696:	8e 7f       	andi	r24, 0xFE	; 254
 698:	89 bf       	out	0x39, r24	; 57
 69a:	89 b7       	in	r24, 0x39	; 57
 69c:	8d 7f       	andi	r24, 0xFD	; 253
 69e:	89 bf       	out	0x39, r24	; 57
 6a0:	88 b7       	in	r24, 0x38	; 56
 6a2:	81 60       	ori	r24, 0x01	; 1
 6a4:	88 bf       	out	0x38, r24	; 56
 6a6:	81 81       	ldd	r24, Z+1	; 0x01
 6a8:	81 30       	cpi	r24, 0x01	; 1
 6aa:	41 f0       	breq	.+16     	; 0x6bc <Timer_Init+0x40>
 6ac:	18 f0       	brcs	.+6      	; 0x6b4 <Timer_Init+0x38>
 6ae:	82 30       	cpi	r24, 0x02	; 2
 6b0:	51 f0       	breq	.+20     	; 0x6c6 <Timer_Init+0x4a>
 6b2:	0e c0       	rjmp	.+28     	; 0x6d0 <Timer_Init+0x54>
 6b4:	83 b7       	in	r24, 0x33	; 51
 6b6:	83 bf       	out	0x33, r24	; 51
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	0b c0       	rjmp	.+22     	; 0x6d2 <Timer_Init+0x56>
 6bc:	83 b7       	in	r24, 0x33	; 51
 6be:	87 60       	ori	r24, 0x07	; 7
 6c0:	83 bf       	out	0x33, r24	; 51
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	06 c0       	rjmp	.+12     	; 0x6d2 <Timer_Init+0x56>
 6c6:	83 b7       	in	r24, 0x33	; 51
 6c8:	86 60       	ori	r24, 0x06	; 6
 6ca:	83 bf       	out	0x33, r24	; 51
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	01 c0       	rjmp	.+2      	; 0x6d2 <Timer_Init+0x56>
 6d0:	8f ef       	ldi	r24, 0xFF	; 255
 6d2:	93 81       	ldd	r25, Z+3	; 0x03
 6d4:	94 30       	cpi	r25, 0x04	; 4
 6d6:	41 f0       	breq	.+16     	; 0x6e8 <Timer_Init+0x6c>
 6d8:	18 f4       	brcc	.+6      	; 0x6e0 <Timer_Init+0x64>
 6da:	93 30       	cpi	r25, 0x03	; 3
 6dc:	40 f4       	brcc	.+16     	; 0x6ee <Timer_Init+0x72>
 6de:	04 c0       	rjmp	.+8      	; 0x6e8 <Timer_Init+0x6c>
 6e0:	2a ef       	ldi	r18, 0xFA	; 250
 6e2:	29 0f       	add	r18, r25
 6e4:	22 30       	cpi	r18, 0x02	; 2
 6e6:	18 f4       	brcc	.+6      	; 0x6ee <Timer_Init+0x72>
 6e8:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <genu_timer0prescaler>
 6ec:	01 c0       	rjmp	.+2      	; 0x6f0 <Timer_Init+0x74>
 6ee:	8f ef       	ldi	r24, 0xFF	; 255
 6f0:	92 81       	ldd	r25, Z+2	; 0x02
 6f2:	99 23       	and	r25, r25
 6f4:	19 f0       	breq	.+6      	; 0x6fc <Timer_Init+0x80>
 6f6:	91 30       	cpi	r25, 0x01	; 1
 6f8:	21 f0       	breq	.+8      	; 0x702 <Timer_Init+0x86>
 6fa:	96 c0       	rjmp	.+300    	; 0x828 <Timer_Init+0x1ac>
 6fc:	99 b7       	in	r25, 0x39	; 57
 6fe:	99 bf       	out	0x39, r25	; 57
 700:	08 95       	ret
 702:	99 b7       	in	r25, 0x39	; 57
 704:	91 60       	ori	r25, 0x01	; 1
 706:	99 bf       	out	0x39, r25	; 57
 708:	08 95       	ret
 70a:	1f bc       	out	0x2f, r1	; 47
 70c:	1e bc       	out	0x2e, r1	; 46
 70e:	1d bc       	out	0x2d, r1	; 45
 710:	1c bc       	out	0x2c, r1	; 44
 712:	1b bc       	out	0x2b, r1	; 43
 714:	1a bc       	out	0x2a, r1	; 42
 716:	19 bc       	out	0x29, r1	; 41
 718:	18 bc       	out	0x28, r1	; 40
 71a:	17 bc       	out	0x27, r1	; 39
 71c:	16 bc       	out	0x26, r1	; 38
 71e:	89 b7       	in	r24, 0x39	; 57
 720:	8f 7d       	andi	r24, 0xDF	; 223
 722:	89 bf       	out	0x39, r24	; 57
 724:	89 b7       	in	r24, 0x39	; 57
 726:	8f 7e       	andi	r24, 0xEF	; 239
 728:	89 bf       	out	0x39, r24	; 57
 72a:	89 b7       	in	r24, 0x39	; 57
 72c:	87 7f       	andi	r24, 0xF7	; 247
 72e:	89 bf       	out	0x39, r24	; 57
 730:	89 b7       	in	r24, 0x39	; 57
 732:	8b 7f       	andi	r24, 0xFB	; 251
 734:	89 bf       	out	0x39, r24	; 57
 736:	88 b7       	in	r24, 0x38	; 56
 738:	80 62       	ori	r24, 0x20	; 32
 73a:	88 bf       	out	0x38, r24	; 56
 73c:	88 b7       	in	r24, 0x38	; 56
 73e:	80 61       	ori	r24, 0x10	; 16
 740:	88 bf       	out	0x38, r24	; 56
 742:	88 b7       	in	r24, 0x38	; 56
 744:	88 60       	ori	r24, 0x08	; 8
 746:	88 bf       	out	0x38, r24	; 56
 748:	88 b7       	in	r24, 0x38	; 56
 74a:	84 60       	ori	r24, 0x04	; 4
 74c:	88 bf       	out	0x38, r24	; 56
 74e:	81 81       	ldd	r24, Z+1	; 0x01
 750:	81 30       	cpi	r24, 0x01	; 1
 752:	51 f0       	breq	.+20     	; 0x768 <Timer_Init+0xec>
 754:	18 f0       	brcs	.+6      	; 0x75c <Timer_Init+0xe0>
 756:	82 30       	cpi	r24, 0x02	; 2
 758:	71 f0       	breq	.+28     	; 0x776 <Timer_Init+0xfa>
 75a:	14 c0       	rjmp	.+40     	; 0x784 <Timer_Init+0x108>
 75c:	8e b5       	in	r24, 0x2e	; 46
 75e:	9f b5       	in	r25, 0x2f	; 47
 760:	9f bd       	out	0x2f, r25	; 47
 762:	8e bd       	out	0x2e, r24	; 46
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	0f c0       	rjmp	.+30     	; 0x786 <Timer_Init+0x10a>
 768:	8e b5       	in	r24, 0x2e	; 46
 76a:	9f b5       	in	r25, 0x2f	; 47
 76c:	87 60       	ori	r24, 0x07	; 7
 76e:	9f bd       	out	0x2f, r25	; 47
 770:	8e bd       	out	0x2e, r24	; 46
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	08 c0       	rjmp	.+16     	; 0x786 <Timer_Init+0x10a>
 776:	8e b5       	in	r24, 0x2e	; 46
 778:	9f b5       	in	r25, 0x2f	; 47
 77a:	86 60       	ori	r24, 0x06	; 6
 77c:	9f bd       	out	0x2f, r25	; 47
 77e:	8e bd       	out	0x2e, r24	; 46
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	01 c0       	rjmp	.+2      	; 0x786 <Timer_Init+0x10a>
 784:	8f ef       	ldi	r24, 0xFF	; 255
 786:	93 81       	ldd	r25, Z+3	; 0x03
 788:	94 30       	cpi	r25, 0x04	; 4
 78a:	41 f0       	breq	.+16     	; 0x79c <Timer_Init+0x120>
 78c:	18 f4       	brcc	.+6      	; 0x794 <Timer_Init+0x118>
 78e:	93 30       	cpi	r25, 0x03	; 3
 790:	40 f4       	brcc	.+16     	; 0x7a2 <Timer_Init+0x126>
 792:	04 c0       	rjmp	.+8      	; 0x79c <Timer_Init+0x120>
 794:	2a ef       	ldi	r18, 0xFA	; 250
 796:	29 0f       	add	r18, r25
 798:	22 30       	cpi	r18, 0x02	; 2
 79a:	18 f4       	brcc	.+6      	; 0x7a2 <Timer_Init+0x126>
 79c:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <genu_timer1prescaler>
 7a0:	01 c0       	rjmp	.+2      	; 0x7a4 <Timer_Init+0x128>
 7a2:	8f ef       	ldi	r24, 0xFF	; 255
 7a4:	92 81       	ldd	r25, Z+2	; 0x02
 7a6:	99 23       	and	r25, r25
 7a8:	19 f0       	breq	.+6      	; 0x7b0 <Timer_Init+0x134>
 7aa:	91 30       	cpi	r25, 0x01	; 1
 7ac:	21 f0       	breq	.+8      	; 0x7b6 <Timer_Init+0x13a>
 7ae:	08 95       	ret
 7b0:	99 b7       	in	r25, 0x39	; 57
 7b2:	99 bf       	out	0x39, r25	; 57
 7b4:	08 95       	ret
 7b6:	99 b7       	in	r25, 0x39	; 57
 7b8:	94 60       	ori	r25, 0x04	; 4
 7ba:	99 bf       	out	0x39, r25	; 57
 7bc:	08 95       	ret
 7be:	15 bc       	out	0x25, r1	; 37
 7c0:	14 bc       	out	0x24, r1	; 36
 7c2:	89 b7       	in	r24, 0x39	; 57
 7c4:	8f 7b       	andi	r24, 0xBF	; 191
 7c6:	89 bf       	out	0x39, r24	; 57
 7c8:	89 b7       	in	r24, 0x39	; 57
 7ca:	8f 77       	andi	r24, 0x7F	; 127
 7cc:	89 bf       	out	0x39, r24	; 57
 7ce:	88 b7       	in	r24, 0x38	; 56
 7d0:	80 64       	ori	r24, 0x40	; 64
 7d2:	88 bf       	out	0x38, r24	; 56
 7d4:	82 b5       	in	r24, 0x22	; 34
 7d6:	87 7f       	andi	r24, 0xF7	; 247
 7d8:	82 bd       	out	0x22, r24	; 34
 7da:	81 81       	ldd	r24, Z+1	; 0x01
 7dc:	88 23       	and	r24, r24
 7de:	19 f0       	breq	.+6      	; 0x7e6 <Timer_Init+0x16a>
 7e0:	81 30       	cpi	r24, 0x01	; 1
 7e2:	31 f0       	breq	.+12     	; 0x7f0 <Timer_Init+0x174>
 7e4:	0a c0       	rjmp	.+20     	; 0x7fa <Timer_Init+0x17e>
 7e6:	82 b5       	in	r24, 0x22	; 34
 7e8:	87 7f       	andi	r24, 0xF7	; 247
 7ea:	82 bd       	out	0x22, r24	; 34
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	06 c0       	rjmp	.+12     	; 0x7fc <Timer_Init+0x180>
 7f0:	82 b5       	in	r24, 0x22	; 34
 7f2:	88 60       	ori	r24, 0x08	; 8
 7f4:	82 bd       	out	0x22, r24	; 34
 7f6:	81 e0       	ldi	r24, 0x01	; 1
 7f8:	01 c0       	rjmp	.+2      	; 0x7fc <Timer_Init+0x180>
 7fa:	8f ef       	ldi	r24, 0xFF	; 255
 7fc:	93 81       	ldd	r25, Z+3	; 0x03
 7fe:	98 30       	cpi	r25, 0x08	; 8
 800:	18 f4       	brcc	.+6      	; 0x808 <Timer_Init+0x18c>
 802:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <genu_timer2prescaler>
 806:	01 c0       	rjmp	.+2      	; 0x80a <Timer_Init+0x18e>
 808:	8f ef       	ldi	r24, 0xFF	; 255
 80a:	92 81       	ldd	r25, Z+2	; 0x02
 80c:	99 23       	and	r25, r25
 80e:	19 f0       	breq	.+6      	; 0x816 <Timer_Init+0x19a>
 810:	91 30       	cpi	r25, 0x01	; 1
 812:	21 f0       	breq	.+8      	; 0x81c <Timer_Init+0x1a0>
 814:	08 95       	ret
 816:	99 b7       	in	r25, 0x39	; 57
 818:	99 bf       	out	0x39, r25	; 57
 81a:	08 95       	ret
 81c:	99 b7       	in	r25, 0x39	; 57
 81e:	90 64       	ori	r25, 0x40	; 64
 820:	99 bf       	out	0x39, r25	; 57
 822:	08 95       	ret
 824:	81 e0       	ldi	r24, 0x01	; 1
 826:	08 95       	ret
 828:	8f ef       	ldi	r24, 0xFF	; 255
 82a:	08 95       	ret

0000082c <Timer_Start>:
 82c:	81 30       	cpi	r24, 0x01	; 1
 82e:	d1 f1       	breq	.+116    	; 0x8a4 <__stack+0x45>
 830:	20 f0       	brcs	.+8      	; 0x83a <Timer_Start+0xe>
 832:	82 30       	cpi	r24, 0x02	; 2
 834:	09 f4       	brne	.+2      	; 0x838 <Timer_Start+0xc>
 836:	78 c0       	rjmp	.+240    	; 0x928 <__stack+0xc9>
 838:	b3 c0       	rjmp	.+358    	; 0x9a0 <__stack+0x141>
 83a:	6f 3f       	cpi	r22, 0xFF	; 255
 83c:	71 05       	cpc	r23, r1
 83e:	11 f0       	breq	.+4      	; 0x844 <Timer_Start+0x18>
 840:	08 f0       	brcs	.+2      	; 0x844 <Timer_Start+0x18>
 842:	b0 c0       	rjmp	.+352    	; 0x9a4 <__stack+0x145>
 844:	62 bf       	out	0x32, r22	; 50
 846:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <genu_timer0prescaler>
 84a:	82 30       	cpi	r24, 0x02	; 2
 84c:	b9 f0       	breq	.+46     	; 0x87c <__stack+0x1d>
 84e:	28 f4       	brcc	.+10     	; 0x85a <Timer_Start+0x2e>
 850:	88 23       	and	r24, r24
 852:	59 f0       	breq	.+22     	; 0x86a <__stack+0xb>
 854:	81 30       	cpi	r24, 0x01	; 1
 856:	69 f0       	breq	.+26     	; 0x872 <__stack+0x13>
 858:	a7 c0       	rjmp	.+334    	; 0x9a8 <__stack+0x149>
 85a:	86 30       	cpi	r24, 0x06	; 6
 85c:	c9 f0       	breq	.+50     	; 0x890 <__stack+0x31>
 85e:	87 30       	cpi	r24, 0x07	; 7
 860:	e1 f0       	breq	.+56     	; 0x89a <__stack+0x3b>
 862:	84 30       	cpi	r24, 0x04	; 4
 864:	09 f0       	breq	.+2      	; 0x868 <__stack+0x9>
 866:	a0 c0       	rjmp	.+320    	; 0x9a8 <__stack+0x149>
 868:	0e c0       	rjmp	.+28     	; 0x886 <__stack+0x27>
 86a:	83 b7       	in	r24, 0x33	; 51
 86c:	83 bf       	out	0x33, r24	; 51
 86e:	81 e0       	ldi	r24, 0x01	; 1
 870:	08 95       	ret
 872:	83 b7       	in	r24, 0x33	; 51
 874:	81 60       	ori	r24, 0x01	; 1
 876:	83 bf       	out	0x33, r24	; 51
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	08 95       	ret
 87c:	83 b7       	in	r24, 0x33	; 51
 87e:	82 60       	ori	r24, 0x02	; 2
 880:	83 bf       	out	0x33, r24	; 51
 882:	81 e0       	ldi	r24, 0x01	; 1
 884:	08 95       	ret
 886:	83 b7       	in	r24, 0x33	; 51
 888:	83 60       	ori	r24, 0x03	; 3
 88a:	83 bf       	out	0x33, r24	; 51
 88c:	81 e0       	ldi	r24, 0x01	; 1
 88e:	08 95       	ret
 890:	83 b7       	in	r24, 0x33	; 51
 892:	84 60       	ori	r24, 0x04	; 4
 894:	83 bf       	out	0x33, r24	; 51
 896:	81 e0       	ldi	r24, 0x01	; 1
 898:	08 95       	ret
 89a:	83 b7       	in	r24, 0x33	; 51
 89c:	85 60       	ori	r24, 0x05	; 5
 89e:	83 bf       	out	0x33, r24	; 51
 8a0:	81 e0       	ldi	r24, 0x01	; 1
 8a2:	08 95       	ret
 8a4:	7d bd       	out	0x2d, r23	; 45
 8a6:	6c bd       	out	0x2c, r22	; 44
 8a8:	8e b5       	in	r24, 0x2e	; 46
 8aa:	9f b5       	in	r25, 0x2f	; 47
 8ac:	88 7f       	andi	r24, 0xF8	; 248
 8ae:	9f bd       	out	0x2f, r25	; 47
 8b0:	8e bd       	out	0x2e, r24	; 46
 8b2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <genu_timer1prescaler>
 8b6:	82 30       	cpi	r24, 0x02	; 2
 8b8:	d9 f0       	breq	.+54     	; 0x8f0 <__stack+0x91>
 8ba:	28 f4       	brcc	.+10     	; 0x8c6 <__stack+0x67>
 8bc:	88 23       	and	r24, r24
 8be:	59 f0       	breq	.+22     	; 0x8d6 <__stack+0x77>
 8c0:	81 30       	cpi	r24, 0x01	; 1
 8c2:	79 f0       	breq	.+30     	; 0x8e2 <__stack+0x83>
 8c4:	73 c0       	rjmp	.+230    	; 0x9ac <__stack+0x14d>
 8c6:	86 30       	cpi	r24, 0x06	; 6
 8c8:	09 f1       	breq	.+66     	; 0x90c <__stack+0xad>
 8ca:	87 30       	cpi	r24, 0x07	; 7
 8cc:	31 f1       	breq	.+76     	; 0x91a <__stack+0xbb>
 8ce:	84 30       	cpi	r24, 0x04	; 4
 8d0:	09 f0       	breq	.+2      	; 0x8d4 <__stack+0x75>
 8d2:	6c c0       	rjmp	.+216    	; 0x9ac <__stack+0x14d>
 8d4:	14 c0       	rjmp	.+40     	; 0x8fe <__stack+0x9f>
 8d6:	8e b5       	in	r24, 0x2e	; 46
 8d8:	9f b5       	in	r25, 0x2f	; 47
 8da:	9f bd       	out	0x2f, r25	; 47
 8dc:	8e bd       	out	0x2e, r24	; 46
 8de:	81 e0       	ldi	r24, 0x01	; 1
 8e0:	08 95       	ret
 8e2:	8e b5       	in	r24, 0x2e	; 46
 8e4:	9f b5       	in	r25, 0x2f	; 47
 8e6:	81 60       	ori	r24, 0x01	; 1
 8e8:	9f bd       	out	0x2f, r25	; 47
 8ea:	8e bd       	out	0x2e, r24	; 46
 8ec:	81 e0       	ldi	r24, 0x01	; 1
 8ee:	08 95       	ret
 8f0:	8e b5       	in	r24, 0x2e	; 46
 8f2:	9f b5       	in	r25, 0x2f	; 47
 8f4:	82 60       	ori	r24, 0x02	; 2
 8f6:	9f bd       	out	0x2f, r25	; 47
 8f8:	8e bd       	out	0x2e, r24	; 46
 8fa:	81 e0       	ldi	r24, 0x01	; 1
 8fc:	08 95       	ret
 8fe:	8e b5       	in	r24, 0x2e	; 46
 900:	9f b5       	in	r25, 0x2f	; 47
 902:	83 60       	ori	r24, 0x03	; 3
 904:	9f bd       	out	0x2f, r25	; 47
 906:	8e bd       	out	0x2e, r24	; 46
 908:	81 e0       	ldi	r24, 0x01	; 1
 90a:	08 95       	ret
 90c:	8e b5       	in	r24, 0x2e	; 46
 90e:	9f b5       	in	r25, 0x2f	; 47
 910:	84 60       	ori	r24, 0x04	; 4
 912:	9f bd       	out	0x2f, r25	; 47
 914:	8e bd       	out	0x2e, r24	; 46
 916:	81 e0       	ldi	r24, 0x01	; 1
 918:	08 95       	ret
 91a:	8e b5       	in	r24, 0x2e	; 46
 91c:	9f b5       	in	r25, 0x2f	; 47
 91e:	85 60       	ori	r24, 0x05	; 5
 920:	9f bd       	out	0x2f, r25	; 47
 922:	8e bd       	out	0x2e, r24	; 46
 924:	81 e0       	ldi	r24, 0x01	; 1
 926:	08 95       	ret
 928:	6f 3f       	cpi	r22, 0xFF	; 255
 92a:	71 05       	cpc	r23, r1
 92c:	11 f0       	breq	.+4      	; 0x932 <__stack+0xd3>
 92e:	08 f0       	brcs	.+2      	; 0x932 <__stack+0xd3>
 930:	3f c0       	rjmp	.+126    	; 0x9b0 <__stack+0x151>
 932:	64 bd       	out	0x24, r22	; 36
 934:	85 b5       	in	r24, 0x25	; 37
 936:	88 7f       	andi	r24, 0xF8	; 248
 938:	85 bd       	out	0x25, r24	; 37
 93a:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <genu_timer2prescaler>
 93e:	8e 2f       	mov	r24, r30
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	88 30       	cpi	r24, 0x08	; 8
 944:	91 05       	cpc	r25, r1
 946:	b0 f5       	brcc	.+108    	; 0x9b4 <__stack+0x155>
 948:	fc 01       	movw	r30, r24
 94a:	e6 5d       	subi	r30, 0xD6	; 214
 94c:	ff 4f       	sbci	r31, 0xFF	; 255
 94e:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__tablejump2__>
 952:	85 b5       	in	r24, 0x25	; 37
 954:	85 bd       	out	0x25, r24	; 37
 956:	81 e0       	ldi	r24, 0x01	; 1
 958:	08 95       	ret
 95a:	85 b5       	in	r24, 0x25	; 37
 95c:	81 60       	ori	r24, 0x01	; 1
 95e:	85 bd       	out	0x25, r24	; 37
 960:	81 e0       	ldi	r24, 0x01	; 1
 962:	08 95       	ret
 964:	85 b5       	in	r24, 0x25	; 37
 966:	82 60       	ori	r24, 0x02	; 2
 968:	85 bd       	out	0x25, r24	; 37
 96a:	81 e0       	ldi	r24, 0x01	; 1
 96c:	08 95       	ret
 96e:	85 b5       	in	r24, 0x25	; 37
 970:	83 60       	ori	r24, 0x03	; 3
 972:	85 bd       	out	0x25, r24	; 37
 974:	81 e0       	ldi	r24, 0x01	; 1
 976:	08 95       	ret
 978:	85 b5       	in	r24, 0x25	; 37
 97a:	84 60       	ori	r24, 0x04	; 4
 97c:	85 bd       	out	0x25, r24	; 37
 97e:	81 e0       	ldi	r24, 0x01	; 1
 980:	08 95       	ret
 982:	85 b5       	in	r24, 0x25	; 37
 984:	85 60       	ori	r24, 0x05	; 5
 986:	85 bd       	out	0x25, r24	; 37
 988:	81 e0       	ldi	r24, 0x01	; 1
 98a:	08 95       	ret
 98c:	85 b5       	in	r24, 0x25	; 37
 98e:	86 60       	ori	r24, 0x06	; 6
 990:	85 bd       	out	0x25, r24	; 37
 992:	81 e0       	ldi	r24, 0x01	; 1
 994:	08 95       	ret
 996:	85 b5       	in	r24, 0x25	; 37
 998:	87 60       	ori	r24, 0x07	; 7
 99a:	85 bd       	out	0x25, r24	; 37
 99c:	81 e0       	ldi	r24, 0x01	; 1
 99e:	08 95       	ret
 9a0:	81 e0       	ldi	r24, 0x01	; 1
 9a2:	08 95       	ret
 9a4:	8f ef       	ldi	r24, 0xFF	; 255
 9a6:	08 95       	ret
 9a8:	8f ef       	ldi	r24, 0xFF	; 255
 9aa:	08 95       	ret
 9ac:	8f ef       	ldi	r24, 0xFF	; 255
 9ae:	08 95       	ret
 9b0:	8f ef       	ldi	r24, 0xFF	; 255
 9b2:	08 95       	ret
 9b4:	8f ef       	ldi	r24, 0xFF	; 255
 9b6:	08 95       	ret

000009b8 <Timer_Stop>:
 9b8:	81 30       	cpi	r24, 0x01	; 1
 9ba:	29 f0       	breq	.+10     	; 0x9c6 <Timer_Stop+0xe>
 9bc:	80 f0       	brcs	.+32     	; 0x9de <Timer_Stop+0x26>
 9be:	82 30       	cpi	r24, 0x02	; 2
 9c0:	49 f0       	breq	.+18     	; 0x9d4 <Timer_Stop+0x1c>
 9c2:	8f ef       	ldi	r24, 0xFF	; 255
 9c4:	08 95       	ret
 9c6:	8e b5       	in	r24, 0x2e	; 46
 9c8:	9f b5       	in	r25, 0x2f	; 47
 9ca:	88 7f       	andi	r24, 0xF8	; 248
 9cc:	9f bd       	out	0x2f, r25	; 47
 9ce:	8e bd       	out	0x2e, r24	; 46
 9d0:	81 e0       	ldi	r24, 0x01	; 1
 9d2:	08 95       	ret
 9d4:	85 b5       	in	r24, 0x25	; 37
 9d6:	88 7f       	andi	r24, 0xF8	; 248
 9d8:	85 bd       	out	0x25, r24	; 37
 9da:	81 e0       	ldi	r24, 0x01	; 1
 9dc:	08 95       	ret
 9de:	81 e0       	ldi	r24, 0x01	; 1
 9e0:	08 95       	ret

000009e2 <Timer_GetValue>:

ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	uint8_t fun_status = OK;
	switch(Timer_CH_NO)
 9e2:	81 30       	cpi	r24, 0x01	; 1
 9e4:	59 f0       	breq	.+22     	; 0x9fc <Timer_GetValue+0x1a>
 9e6:	18 f0       	brcs	.+6      	; 0x9ee <Timer_GetValue+0xc>
 9e8:	82 30       	cpi	r24, 0x02	; 2
 9ea:	79 f0       	breq	.+30     	; 0xa0a <Timer_GetValue+0x28>
 9ec:	15 c0       	rjmp	.+42     	; 0xa18 <Timer_GetValue+0x36>
	{
		case TIMER_CH0:
			*Data = TCNT0;
 9ee:	82 b7       	in	r24, 0x32	; 50
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	fb 01       	movw	r30, r22
 9f4:	91 83       	std	Z+1, r25	; 0x01
 9f6:	80 83       	st	Z, r24
	return fun_status;
}

ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	uint8_t fun_status = OK;
 9f8:	81 e0       	ldi	r24, 0x01	; 1
	switch(Timer_CH_NO)
	{
		case TIMER_CH0:
			*Data = TCNT0;
		break;
 9fa:	08 95       	ret
		case TIMER_CH1:
			*Data = TCNT1;
 9fc:	8c b5       	in	r24, 0x2c	; 44
 9fe:	9d b5       	in	r25, 0x2d	; 45
 a00:	fb 01       	movw	r30, r22
 a02:	91 83       	std	Z+1, r25	; 0x01
 a04:	80 83       	st	Z, r24
	return fun_status;
}

ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	uint8_t fun_status = OK;
 a06:	81 e0       	ldi	r24, 0x01	; 1
		case TIMER_CH0:
			*Data = TCNT0;
		break;
		case TIMER_CH1:
			*Data = TCNT1;
		break;
 a08:	08 95       	ret
		case TIMER_CH2:
			*Data = TCNT2;
 a0a:	84 b5       	in	r24, 0x24	; 36
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	fb 01       	movw	r30, r22
 a10:	91 83       	std	Z+1, r25	; 0x01
 a12:	80 83       	st	Z, r24
	return fun_status;
}

ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	uint8_t fun_status = OK;
 a14:	81 e0       	ldi	r24, 0x01	; 1
		case TIMER_CH1:
			*Data = TCNT1;
		break;
		case TIMER_CH2:
			*Data = TCNT2;
		break;
 a16:	08 95       	ret
		default:
			fun_status = NOK;
 a18:	8f ef       	ldi	r24, 0xFF	; 255
		break;
	}
	return fun_status;
 a1a:	08 95       	ret

00000a1c <__vector_3>:
/*- GLOBAL EXTERN VARIABLES -------------------------------*/
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/


ISR(INT2_vect)
{
 a1c:	78 94       	sei
 a1e:	1f 92       	push	r1
 a20:	0f 92       	push	r0
 a22:	0f b6       	in	r0, 0x3f	; 63
 a24:	0f 92       	push	r0
 a26:	11 24       	eor	r1, r1
 a28:	2f 93       	push	r18
 a2a:	3f 93       	push	r19
 a2c:	4f 93       	push	r20
 a2e:	5f 93       	push	r21
 a30:	6f 93       	push	r22
 a32:	7f 93       	push	r23
 a34:	8f 93       	push	r24
 a36:	9f 93       	push	r25
 a38:	af 93       	push	r26
 a3a:	bf 93       	push	r27
 a3c:	ef 93       	push	r30
 a3e:	ff 93       	push	r31
	//Led_Toggle(LED_0);
	/*	check for value of overflows
	*	EVEN VALUE start timer 0
	*	ODD value stop timer 0
	*/
	PORTA_DATA ^= 0xff;
 a40:	8b b3       	in	r24, 0x1b	; 27
 a42:	80 95       	com	r24
 a44:	8b bb       	out	0x1b, r24	; 27
	if(gu8SwICU_INT2_vec_enteranceFlag&1)
 a46:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <gu8SwICU_INT2_vec_enteranceFlag>
 a4a:	80 ff       	sbrs	r24, 0
 a4c:	0c c0       	rjmp	.+24     	; 0xa66 <__vector_3+0x4a>
}


void SwICU_Stop(void){
	/*stop timer */
	Timer_Stop(ICU_TIMER_CH0);
 a4e:	80 e0       	ldi	r24, 0x00	; 0
 a50:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <Timer_Stop>
	*/
	PORTA_DATA ^= 0xff;
	if(gu8SwICU_INT2_vec_enteranceFlag&1)
	{
		SwICU_Stop();
		gu8SwICU_INT2_vec_enteranceFlag = FALSE;
 a54:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <gu8SwICU_INT2_vec_enteranceFlag>
		gu8SwICU_Timer0_Stop_Flag = TRUE;
 a58:	81 e0       	ldi	r24, 0x01	; 1
 a5a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <gu8SwICU_Timer0_Stop_Flag>
		case EN_INT2:
			switch(swICU_Edge)
			{
				case ICU_FALE_TO_RISE:
					
					SET_BIT(MCUCSR,ISC2);
 a5e:	84 b7       	in	r24, 0x34	; 52
 a60:	80 64       	ori	r24, 0x40	; 64
 a62:	84 bf       	out	0x34, r24	; 52
 a64:	0b c0       	rjmp	.+22     	; 0xa7c <__vector_3+0x60>


void SwICU_Start(void)
{
	/*start timer*/
	Timer_Start(ICU_TIMER_CH0,ZERO);
 a66:	60 e0       	ldi	r22, 0x00	; 0
 a68:	70 e0       	ldi	r23, 0x00	; 0
 a6a:	80 e0       	ldi	r24, 0x00	; 0
 a6c:	0e 94 16 04 	call	0x82c	; 0x82c <Timer_Start>
		SwICU_SetCfgEdge(ICU_FALE_TO_RISE);
	}
	else
	{
		SwICU_Start();
		gu8SwICU_INT2_vec_enteranceFlag = TRUE;
 a70:	81 e0       	ldi	r24, 0x01	; 1
 a72:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <gu8SwICU_INT2_vec_enteranceFlag>
					
					SET_BIT(MCUCSR,ISC2);

				break;
				case ICU_RISE_TO_FALL:
					CLEAR_BIT(MCUCSR,ISC2);
 a76:	84 b7       	in	r24, 0x34	; 52
 a78:	8f 7b       	andi	r24, 0xBF	; 191
 a7a:	84 bf       	out	0x34, r24	; 52
	{
		SwICU_Start();
		gu8SwICU_INT2_vec_enteranceFlag = TRUE;
		SwICU_SetCfgEdge(ICU_RISE_TO_FALL);
	}
}
 a7c:	ff 91       	pop	r31
 a7e:	ef 91       	pop	r30
 a80:	bf 91       	pop	r27
 a82:	af 91       	pop	r26
 a84:	9f 91       	pop	r25
 a86:	8f 91       	pop	r24
 a88:	7f 91       	pop	r23
 a8a:	6f 91       	pop	r22
 a8c:	5f 91       	pop	r21
 a8e:	4f 91       	pop	r20
 a90:	3f 91       	pop	r19
 a92:	2f 91       	pop	r18
 a94:	0f 90       	pop	r0
 a96:	0f be       	out	0x3f, r0	; 63
 a98:	0f 90       	pop	r0
 a9a:	1f 90       	pop	r1
 a9c:	18 95       	reti

00000a9e <__vector_11>:

ISR(TIMER0_OVF_vect)
{
 a9e:	78 94       	sei
 aa0:	1f 92       	push	r1
 aa2:	0f 92       	push	r0
 aa4:	0f b6       	in	r0, 0x3f	; 63
 aa6:	0f 92       	push	r0
 aa8:	11 24       	eor	r1, r1
 aaa:	8f 93       	push	r24
 aac:	9f 93       	push	r25
	++gu16SwICU_timer0_Overflow_Counts;
 aae:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gu16SwICU_timer0_Overflow_Counts>
 ab2:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <gu16SwICU_timer0_Overflow_Counts+0x1>
 ab6:	01 96       	adiw	r24, 0x01	; 1
 ab8:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <gu16SwICU_timer0_Overflow_Counts+0x1>
 abc:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <gu16SwICU_timer0_Overflow_Counts>
}
 ac0:	9f 91       	pop	r25
 ac2:	8f 91       	pop	r24
 ac4:	0f 90       	pop	r0
 ac6:	0f be       	out	0x3f, r0	; 63
 ac8:	0f 90       	pop	r0
 aca:	1f 90       	pop	r1
 acc:	18 95       	reti

00000ace <Icu_Init>:

/*- APIs IMPLEMENTATION -----------------------------------*/


ERROR_STATUS Icu_Init(Icu_cfg_s * Icu_Cfg)
{
 ace:	0f 93       	push	r16
 ad0:	1f 93       	push	r17
 ad2:	cf 93       	push	r28
 ad4:	df 93       	push	r29
 ad6:	00 d0       	rcall	.+0      	; 0xad8 <Icu_Init+0xa>
 ad8:	00 d0       	rcall	.+0      	; 0xada <Icu_Init+0xc>
 ada:	00 d0       	rcall	.+0      	; 0xadc <Icu_Init+0xe>
 adc:	cd b7       	in	r28, 0x3d	; 61
 ade:	de b7       	in	r29, 0x3e	; 62
	/*validate input*/
	uint8_t fun_status = OK;

		if(Icu_Cfg == NULL || Icu_Cfg->ICU_Ch_No > ICU_CH2 || 
 ae0:	00 97       	sbiw	r24, 0x00	; 0
 ae2:	c1 f1       	breq	.+112    	; 0xb54 <Icu_Init+0x86>
 ae4:	fc 01       	movw	r30, r24
 ae6:	20 81       	ld	r18, Z
 ae8:	23 30       	cpi	r18, 0x03	; 3
 aea:	b0 f5       	brcc	.+108    	; 0xb58 <Icu_Init+0x8a>
 aec:	31 81       	ldd	r19, Z+1	; 0x01
 aee:	33 30       	cpi	r19, 0x03	; 3
 af0:	a8 f5       	brcc	.+106    	; 0xb5c <Icu_Init+0x8e>
 af2:	8c 01       	movw	r16, r24
*				MCUCR [ISC11 ISC10 ISC01 ISC00]
*				MCUCSR [ISCR2]
*/
static void external_Int_Enable(uint8_t en_externalInt,uint8_t swICU_Edge)
{
	switch (en_externalInt)
 af4:	22 30       	cpi	r18, 0x02	; 2
 af6:	b1 f4       	brne	.+44     	; 0xb24 <Icu_Init+0x56>
				*  3-clear INT2 flag in GIFR.INTF2
				*  4-enable INT2 in GUCR.INT2
				*  5-make pin direction input POTTB.PIN2
				*  6-enbale global int sei()
				*/
				CLEAR_BIT(GICR,INT2);
 af8:	8b b7       	in	r24, 0x3b	; 59
 afa:	8f 7d       	andi	r24, 0xDF	; 223
 afc:	8b bf       	out	0x3b, r24	; 59
				SET_BIT(MCUCSR,ISC2);
 afe:	84 b7       	in	r24, 0x34	; 52
 b00:	80 64       	ori	r24, 0x40	; 64
 b02:	84 bf       	out	0x34, r24	; 52
				SET_BIT(GIFR,INTF2);/*CLEAR INT FLAG BY SET IT'S BIT TO 1*/
 b04:	8a b7       	in	r24, 0x3a	; 58
 b06:	80 62       	ori	r24, 0x20	; 32
 b08:	8a bf       	out	0x3a, r24	; 58
				SET_BIT(GICR,INT2);
 b0a:	8b b7       	in	r24, 0x3b	; 59
 b0c:	80 62       	ori	r24, 0x20	; 32
 b0e:	8b bf       	out	0x3b, r24	; 59
				DIO_Cfg_s DIO_Cfg;
				DIO_Cfg.dir  = INPUT;
 b10:	1b 82       	std	Y+3, r1	; 0x03
				DIO_Cfg.GPIO = GPIOB;
 b12:	81 e0       	ldi	r24, 0x01	; 1
 b14:	89 83       	std	Y+1, r24	; 0x01
				DIO_Cfg.pins = BIT2;
 b16:	84 e0       	ldi	r24, 0x04	; 4
 b18:	8a 83       	std	Y+2, r24	; 0x02
				DIO_init(&DIO_Cfg);
 b1a:	ce 01       	movw	r24, r28
 b1c:	01 96       	adiw	r24, 0x01	; 1
 b1e:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_init>
				sei();
 b22:	78 94       	sei
			*  1-enable external interrupter with rising edge
			*  2-initalize timer with interrupte mode
			*  3-zero all used variables
			*/
			external_Int_Enable(Icu_Cfg->ICU_Ch_No,ICU_FALE_TO_RISE);
			switch(Icu_Cfg->ICU_Ch_Timer)
 b24:	f8 01       	movw	r30, r16
 b26:	81 81       	ldd	r24, Z+1	; 0x01
 b28:	81 11       	cpse	r24, r1
 b2a:	0a c0       	rjmp	.+20     	; 0xb40 <Icu_Init+0x72>
			{
				case TIMER_CH0:;
						Timer_cfg_s timer_cfg;
						timer_cfg.Timer_CH_NO				    =	TIMER_CH0;
 b2c:	19 82       	std	Y+1, r1	; 0x01
						timer_cfg.Timer_Mode					=	TIMER_MODE;
 b2e:	1a 82       	std	Y+2, r1	; 0x02
						timer_cfg.Timer_Polling_Or_Interrupt	=	TIMER_INTERRUPT_MODE;
 b30:	81 e0       	ldi	r24, 0x01	; 1
 b32:	8b 83       	std	Y+3, r24	; 0x03
						timer_cfg.Timer_Prescaler				=   TIMER_PRESCALER_256;
 b34:	86 e0       	ldi	r24, 0x06	; 6
 b36:	8c 83       	std	Y+4, r24	; 0x04
						Timer_Init(&timer_cfg);
 b38:	ce 01       	movw	r24, r28
 b3a:	01 96       	adiw	r24, 0x01	; 1
 b3c:	0e 94 3e 03 	call	0x67c	; 0x67c <Timer_Init>
				case TIMER_CH1:
				break;
				case TIMER_CH2:
				break;
			}
			gu16SwICU_timer0_Overflow_Counts = ZERO;
 b40:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <gu16SwICU_timer0_Overflow_Counts+0x1>
 b44:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <gu16SwICU_timer0_Overflow_Counts>
			gu8SwICU_INT2_vec_enteranceFlag = ZERO;
 b48:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <gu8SwICU_INT2_vec_enteranceFlag>
			gu8SwICU_Timer0_Stop_Flag = FALSE;
 b4c:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <gu8SwICU_Timer0_Stop_Flag>


ERROR_STATUS Icu_Init(Icu_cfg_s * Icu_Cfg)
{
	/*validate input*/
	uint8_t fun_status = OK;
 b50:	81 e0       	ldi	r24, 0x01	; 1
 b52:	05 c0       	rjmp	.+10     	; 0xb5e <Icu_Init+0x90>

		if(Icu_Cfg == NULL || Icu_Cfg->ICU_Ch_No > ICU_CH2 || 
			Icu_Cfg->ICU_Ch_Timer > ICU_TIMER_CH2)
		{
				fun_status = NOK;
 b54:	8f ef       	ldi	r24, 0xFF	; 255
 b56:	03 c0       	rjmp	.+6      	; 0xb5e <Icu_Init+0x90>
 b58:	8f ef       	ldi	r24, 0xFF	; 255
 b5a:	01 c0       	rjmp	.+2      	; 0xb5e <Icu_Init+0x90>
 b5c:	8f ef       	ldi	r24, 0xFF	; 255
			gu16SwICU_timer0_Overflow_Counts = ZERO;
			gu8SwICU_INT2_vec_enteranceFlag = ZERO;
			gu8SwICU_Timer0_Stop_Flag = FALSE;
		}
		return fun_status;
}
 b5e:	26 96       	adiw	r28, 0x06	; 6
 b60:	0f b6       	in	r0, 0x3f	; 63
 b62:	f8 94       	cli
 b64:	de bf       	out	0x3e, r29	; 62
 b66:	0f be       	out	0x3f, r0	; 63
 b68:	cd bf       	out	0x3d, r28	; 61
 b6a:	df 91       	pop	r29
 b6c:	cf 91       	pop	r28
 b6e:	1f 91       	pop	r17
 b70:	0f 91       	pop	r16
 b72:	08 95       	ret

00000b74 <Icu_ReadTime>:

ERROR_STATUS Icu_ReadTime(uint8_t Icu_Channel,
						 uint8_t Icu_EdgeToEdge, uint32_t * Icu_Time)
{
 b74:	0f 93       	push	r16
 b76:	1f 93       	push	r17
 b78:	cf 93       	push	r28
 b7a:	df 93       	push	r29
 b7c:	00 d0       	rcall	.+0      	; 0xb7e <Icu_ReadTime+0xa>
 b7e:	cd b7       	in	r28, 0x3d	; 61
 b80:	de b7       	in	r29, 0x3e	; 62
	uint8_t fun_status = OK;
	
	if(Icu_Channel > ICU_TIMER_CH2 || Icu_EdgeToEdge > ICU_FALE_TO_RISE || 
 b82:	83 30       	cpi	r24, 0x03	; 3
 b84:	68 f5       	brcc	.+90     	; 0xbe0 <Icu_ReadTime+0x6c>
 b86:	63 30       	cpi	r22, 0x03	; 3
 b88:	68 f5       	brcc	.+90     	; 0xbe4 <Icu_ReadTime+0x70>
 b8a:	41 15       	cp	r20, r1
 b8c:	51 05       	cpc	r21, r1
 b8e:	61 f1       	breq	.+88     	; 0xbe8 <Icu_ReadTime+0x74>
	* read ticks value
	* set Timer0_Stop_Flag t0 false
	* zero the number of overflow
	* reinitialize timer0 to reset it
	*/
	while(gu8SwICU_Timer0_Stop_Flag == FALSE);
 b90:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <gu8SwICU_Timer0_Stop_Flag>
 b94:	88 23       	and	r24, r24
 b96:	e1 f3       	breq	.-8      	; 0xb90 <Icu_ReadTime+0x1c>
 b98:	8a 01       	movw	r16, r20
	uint16_t timerRead ;
	Timer_GetValue(ICU_TIMER_CH0,&timerRead);
 b9a:	be 01       	movw	r22, r28
 b9c:	6f 5f       	subi	r22, 0xFF	; 255
 b9e:	7f 4f       	sbci	r23, 0xFF	; 255
 ba0:	80 e0       	ldi	r24, 0x00	; 0
 ba2:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Timer_GetValue>
	*Icu_Time = (gu16SwICU_timer0_Overflow_Counts*(uint64_t)SWICU_TIMER0_RESLUTION)+timerRead;
 ba6:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gu16SwICU_timer0_Overflow_Counts>
 baa:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <gu16SwICU_timer0_Overflow_Counts+0x1>
 bae:	a0 e0       	ldi	r26, 0x00	; 0
 bb0:	b0 e0       	ldi	r27, 0x00	; 0
 bb2:	ba 2f       	mov	r27, r26
 bb4:	a9 2f       	mov	r26, r25
 bb6:	98 2f       	mov	r25, r24
 bb8:	88 27       	eor	r24, r24
 bba:	29 81       	ldd	r18, Y+1	; 0x01
 bbc:	3a 81       	ldd	r19, Y+2	; 0x02
 bbe:	82 0f       	add	r24, r18
 bc0:	93 1f       	adc	r25, r19
 bc2:	a1 1d       	adc	r26, r1
 bc4:	b1 1d       	adc	r27, r1
 bc6:	f8 01       	movw	r30, r16
 bc8:	80 83       	st	Z, r24
 bca:	91 83       	std	Z+1, r25	; 0x01
 bcc:	a2 83       	std	Z+2, r26	; 0x02
 bce:	b3 83       	std	Z+3, r27	; 0x03
	gu16SwICU_timer0_Overflow_Counts = ZERO;
 bd0:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <gu16SwICU_timer0_Overflow_Counts+0x1>
 bd4:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <gu16SwICU_timer0_Overflow_Counts>
	gu8SwICU_Timer0_Stop_Flag = FALSE;
 bd8:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <gu8SwICU_Timer0_Stop_Flag>
}

ERROR_STATUS Icu_ReadTime(uint8_t Icu_Channel,
						 uint8_t Icu_EdgeToEdge, uint32_t * Icu_Time)
{
	uint8_t fun_status = OK;
 bdc:	81 e0       	ldi	r24, 0x01	; 1
 bde:	05 c0       	rjmp	.+10     	; 0xbea <Icu_ReadTime+0x76>
	
	if(Icu_Channel > ICU_TIMER_CH2 || Icu_EdgeToEdge > ICU_FALE_TO_RISE || 
		Icu_Time == NULL)
	{
		fun_status = NOK;
 be0:	8f ef       	ldi	r24, 0xFF	; 255
 be2:	03 c0       	rjmp	.+6      	; 0xbea <Icu_ReadTime+0x76>
 be4:	8f ef       	ldi	r24, 0xFF	; 255
 be6:	01 c0       	rjmp	.+2      	; 0xbea <Icu_ReadTime+0x76>
 be8:	8f ef       	ldi	r24, 0xFF	; 255
	*Icu_Time = (gu16SwICU_timer0_Overflow_Counts*(uint64_t)SWICU_TIMER0_RESLUTION)+timerRead;
	gu16SwICU_timer0_Overflow_Counts = ZERO;
	gu8SwICU_Timer0_Stop_Flag = FALSE;
	}
	return fun_status;
}
 bea:	0f 90       	pop	r0
 bec:	0f 90       	pop	r0
 bee:	df 91       	pop	r29
 bf0:	cf 91       	pop	r28
 bf2:	1f 91       	pop	r17
 bf4:	0f 91       	pop	r16
 bf6:	08 95       	ret

00000bf8 <__divsf3>:
 bf8:	0e 94 10 06 	call	0xc20	; 0xc20 <__divsf3x>
 bfc:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__fp_round>
 c00:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__fp_pscB>
 c04:	58 f0       	brcs	.+22     	; 0xc1c <__divsf3+0x24>
 c06:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__fp_pscA>
 c0a:	40 f0       	brcs	.+16     	; 0xc1c <__divsf3+0x24>
 c0c:	29 f4       	brne	.+10     	; 0xc18 <__divsf3+0x20>
 c0e:	5f 3f       	cpi	r21, 0xFF	; 255
 c10:	29 f0       	breq	.+10     	; 0xc1c <__divsf3+0x24>
 c12:	0c 94 da 06 	jmp	0xdb4	; 0xdb4 <__fp_inf>
 c16:	51 11       	cpse	r21, r1
 c18:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__fp_szero>
 c1c:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__fp_nan>

00000c20 <__divsf3x>:
 c20:	0e 94 02 07 	call	0xe04	; 0xe04 <__fp_split3>
 c24:	68 f3       	brcs	.-38     	; 0xc00 <__divsf3+0x8>

00000c26 <__divsf3_pse>:
 c26:	99 23       	and	r25, r25
 c28:	b1 f3       	breq	.-20     	; 0xc16 <__divsf3+0x1e>
 c2a:	55 23       	and	r21, r21
 c2c:	91 f3       	breq	.-28     	; 0xc12 <__divsf3+0x1a>
 c2e:	95 1b       	sub	r25, r21
 c30:	55 0b       	sbc	r21, r21
 c32:	bb 27       	eor	r27, r27
 c34:	aa 27       	eor	r26, r26
 c36:	62 17       	cp	r22, r18
 c38:	73 07       	cpc	r23, r19
 c3a:	84 07       	cpc	r24, r20
 c3c:	38 f0       	brcs	.+14     	; 0xc4c <__divsf3_pse+0x26>
 c3e:	9f 5f       	subi	r25, 0xFF	; 255
 c40:	5f 4f       	sbci	r21, 0xFF	; 255
 c42:	22 0f       	add	r18, r18
 c44:	33 1f       	adc	r19, r19
 c46:	44 1f       	adc	r20, r20
 c48:	aa 1f       	adc	r26, r26
 c4a:	a9 f3       	breq	.-22     	; 0xc36 <__divsf3_pse+0x10>
 c4c:	35 d0       	rcall	.+106    	; 0xcb8 <__divsf3_pse+0x92>
 c4e:	0e 2e       	mov	r0, r30
 c50:	3a f0       	brmi	.+14     	; 0xc60 <__divsf3_pse+0x3a>
 c52:	e0 e8       	ldi	r30, 0x80	; 128
 c54:	32 d0       	rcall	.+100    	; 0xcba <__divsf3_pse+0x94>
 c56:	91 50       	subi	r25, 0x01	; 1
 c58:	50 40       	sbci	r21, 0x00	; 0
 c5a:	e6 95       	lsr	r30
 c5c:	00 1c       	adc	r0, r0
 c5e:	ca f7       	brpl	.-14     	; 0xc52 <__divsf3_pse+0x2c>
 c60:	2b d0       	rcall	.+86     	; 0xcb8 <__divsf3_pse+0x92>
 c62:	fe 2f       	mov	r31, r30
 c64:	29 d0       	rcall	.+82     	; 0xcb8 <__divsf3_pse+0x92>
 c66:	66 0f       	add	r22, r22
 c68:	77 1f       	adc	r23, r23
 c6a:	88 1f       	adc	r24, r24
 c6c:	bb 1f       	adc	r27, r27
 c6e:	26 17       	cp	r18, r22
 c70:	37 07       	cpc	r19, r23
 c72:	48 07       	cpc	r20, r24
 c74:	ab 07       	cpc	r26, r27
 c76:	b0 e8       	ldi	r27, 0x80	; 128
 c78:	09 f0       	breq	.+2      	; 0xc7c <__divsf3_pse+0x56>
 c7a:	bb 0b       	sbc	r27, r27
 c7c:	80 2d       	mov	r24, r0
 c7e:	bf 01       	movw	r22, r30
 c80:	ff 27       	eor	r31, r31
 c82:	93 58       	subi	r25, 0x83	; 131
 c84:	5f 4f       	sbci	r21, 0xFF	; 255
 c86:	3a f0       	brmi	.+14     	; 0xc96 <__divsf3_pse+0x70>
 c88:	9e 3f       	cpi	r25, 0xFE	; 254
 c8a:	51 05       	cpc	r21, r1
 c8c:	78 f0       	brcs	.+30     	; 0xcac <__divsf3_pse+0x86>
 c8e:	0c 94 da 06 	jmp	0xdb4	; 0xdb4 <__fp_inf>
 c92:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__fp_szero>
 c96:	5f 3f       	cpi	r21, 0xFF	; 255
 c98:	e4 f3       	brlt	.-8      	; 0xc92 <__divsf3_pse+0x6c>
 c9a:	98 3e       	cpi	r25, 0xE8	; 232
 c9c:	d4 f3       	brlt	.-12     	; 0xc92 <__divsf3_pse+0x6c>
 c9e:	86 95       	lsr	r24
 ca0:	77 95       	ror	r23
 ca2:	67 95       	ror	r22
 ca4:	b7 95       	ror	r27
 ca6:	f7 95       	ror	r31
 ca8:	9f 5f       	subi	r25, 0xFF	; 255
 caa:	c9 f7       	brne	.-14     	; 0xc9e <__divsf3_pse+0x78>
 cac:	88 0f       	add	r24, r24
 cae:	91 1d       	adc	r25, r1
 cb0:	96 95       	lsr	r25
 cb2:	87 95       	ror	r24
 cb4:	97 f9       	bld	r25, 7
 cb6:	08 95       	ret
 cb8:	e1 e0       	ldi	r30, 0x01	; 1
 cba:	66 0f       	add	r22, r22
 cbc:	77 1f       	adc	r23, r23
 cbe:	88 1f       	adc	r24, r24
 cc0:	bb 1f       	adc	r27, r27
 cc2:	62 17       	cp	r22, r18
 cc4:	73 07       	cpc	r23, r19
 cc6:	84 07       	cpc	r24, r20
 cc8:	ba 07       	cpc	r27, r26
 cca:	20 f0       	brcs	.+8      	; 0xcd4 <__divsf3_pse+0xae>
 ccc:	62 1b       	sub	r22, r18
 cce:	73 0b       	sbc	r23, r19
 cd0:	84 0b       	sbc	r24, r20
 cd2:	ba 0b       	sbc	r27, r26
 cd4:	ee 1f       	adc	r30, r30
 cd6:	88 f7       	brcc	.-30     	; 0xcba <__divsf3_pse+0x94>
 cd8:	e0 95       	com	r30
 cda:	08 95       	ret

00000cdc <__fixunssfsi>:
 cdc:	0e 94 0a 07 	call	0xe14	; 0xe14 <__fp_splitA>
 ce0:	88 f0       	brcs	.+34     	; 0xd04 <__fixunssfsi+0x28>
 ce2:	9f 57       	subi	r25, 0x7F	; 127
 ce4:	98 f0       	brcs	.+38     	; 0xd0c <__fixunssfsi+0x30>
 ce6:	b9 2f       	mov	r27, r25
 ce8:	99 27       	eor	r25, r25
 cea:	b7 51       	subi	r27, 0x17	; 23
 cec:	b0 f0       	brcs	.+44     	; 0xd1a <__fixunssfsi+0x3e>
 cee:	e1 f0       	breq	.+56     	; 0xd28 <__fixunssfsi+0x4c>
 cf0:	66 0f       	add	r22, r22
 cf2:	77 1f       	adc	r23, r23
 cf4:	88 1f       	adc	r24, r24
 cf6:	99 1f       	adc	r25, r25
 cf8:	1a f0       	brmi	.+6      	; 0xd00 <__fixunssfsi+0x24>
 cfa:	ba 95       	dec	r27
 cfc:	c9 f7       	brne	.-14     	; 0xcf0 <__fixunssfsi+0x14>
 cfe:	14 c0       	rjmp	.+40     	; 0xd28 <__fixunssfsi+0x4c>
 d00:	b1 30       	cpi	r27, 0x01	; 1
 d02:	91 f0       	breq	.+36     	; 0xd28 <__fixunssfsi+0x4c>
 d04:	0e 94 24 07 	call	0xe48	; 0xe48 <__fp_zero>
 d08:	b1 e0       	ldi	r27, 0x01	; 1
 d0a:	08 95       	ret
 d0c:	0c 94 24 07 	jmp	0xe48	; 0xe48 <__fp_zero>
 d10:	67 2f       	mov	r22, r23
 d12:	78 2f       	mov	r23, r24
 d14:	88 27       	eor	r24, r24
 d16:	b8 5f       	subi	r27, 0xF8	; 248
 d18:	39 f0       	breq	.+14     	; 0xd28 <__fixunssfsi+0x4c>
 d1a:	b9 3f       	cpi	r27, 0xF9	; 249
 d1c:	cc f3       	brlt	.-14     	; 0xd10 <__fixunssfsi+0x34>
 d1e:	86 95       	lsr	r24
 d20:	77 95       	ror	r23
 d22:	67 95       	ror	r22
 d24:	b3 95       	inc	r27
 d26:	d9 f7       	brne	.-10     	; 0xd1e <__fixunssfsi+0x42>
 d28:	3e f4       	brtc	.+14     	; 0xd38 <__fixunssfsi+0x5c>
 d2a:	90 95       	com	r25
 d2c:	80 95       	com	r24
 d2e:	70 95       	com	r23
 d30:	61 95       	neg	r22
 d32:	7f 4f       	sbci	r23, 0xFF	; 255
 d34:	8f 4f       	sbci	r24, 0xFF	; 255
 d36:	9f 4f       	sbci	r25, 0xFF	; 255
 d38:	08 95       	ret

00000d3a <__floatunsisf>:
 d3a:	e8 94       	clt
 d3c:	09 c0       	rjmp	.+18     	; 0xd50 <__floatsisf+0x12>

00000d3e <__floatsisf>:
 d3e:	97 fb       	bst	r25, 7
 d40:	3e f4       	brtc	.+14     	; 0xd50 <__floatsisf+0x12>
 d42:	90 95       	com	r25
 d44:	80 95       	com	r24
 d46:	70 95       	com	r23
 d48:	61 95       	neg	r22
 d4a:	7f 4f       	sbci	r23, 0xFF	; 255
 d4c:	8f 4f       	sbci	r24, 0xFF	; 255
 d4e:	9f 4f       	sbci	r25, 0xFF	; 255
 d50:	99 23       	and	r25, r25
 d52:	a9 f0       	breq	.+42     	; 0xd7e <__floatsisf+0x40>
 d54:	f9 2f       	mov	r31, r25
 d56:	96 e9       	ldi	r25, 0x96	; 150
 d58:	bb 27       	eor	r27, r27
 d5a:	93 95       	inc	r25
 d5c:	f6 95       	lsr	r31
 d5e:	87 95       	ror	r24
 d60:	77 95       	ror	r23
 d62:	67 95       	ror	r22
 d64:	b7 95       	ror	r27
 d66:	f1 11       	cpse	r31, r1
 d68:	f8 cf       	rjmp	.-16     	; 0xd5a <__floatsisf+0x1c>
 d6a:	fa f4       	brpl	.+62     	; 0xdaa <__floatsisf+0x6c>
 d6c:	bb 0f       	add	r27, r27
 d6e:	11 f4       	brne	.+4      	; 0xd74 <__floatsisf+0x36>
 d70:	60 ff       	sbrs	r22, 0
 d72:	1b c0       	rjmp	.+54     	; 0xdaa <__floatsisf+0x6c>
 d74:	6f 5f       	subi	r22, 0xFF	; 255
 d76:	7f 4f       	sbci	r23, 0xFF	; 255
 d78:	8f 4f       	sbci	r24, 0xFF	; 255
 d7a:	9f 4f       	sbci	r25, 0xFF	; 255
 d7c:	16 c0       	rjmp	.+44     	; 0xdaa <__floatsisf+0x6c>
 d7e:	88 23       	and	r24, r24
 d80:	11 f0       	breq	.+4      	; 0xd86 <__floatsisf+0x48>
 d82:	96 e9       	ldi	r25, 0x96	; 150
 d84:	11 c0       	rjmp	.+34     	; 0xda8 <__floatsisf+0x6a>
 d86:	77 23       	and	r23, r23
 d88:	21 f0       	breq	.+8      	; 0xd92 <__floatsisf+0x54>
 d8a:	9e e8       	ldi	r25, 0x8E	; 142
 d8c:	87 2f       	mov	r24, r23
 d8e:	76 2f       	mov	r23, r22
 d90:	05 c0       	rjmp	.+10     	; 0xd9c <__floatsisf+0x5e>
 d92:	66 23       	and	r22, r22
 d94:	71 f0       	breq	.+28     	; 0xdb2 <__floatsisf+0x74>
 d96:	96 e8       	ldi	r25, 0x86	; 134
 d98:	86 2f       	mov	r24, r22
 d9a:	70 e0       	ldi	r23, 0x00	; 0
 d9c:	60 e0       	ldi	r22, 0x00	; 0
 d9e:	2a f0       	brmi	.+10     	; 0xdaa <__floatsisf+0x6c>
 da0:	9a 95       	dec	r25
 da2:	66 0f       	add	r22, r22
 da4:	77 1f       	adc	r23, r23
 da6:	88 1f       	adc	r24, r24
 da8:	da f7       	brpl	.-10     	; 0xda0 <__floatsisf+0x62>
 daa:	88 0f       	add	r24, r24
 dac:	96 95       	lsr	r25
 dae:	87 95       	ror	r24
 db0:	97 f9       	bld	r25, 7
 db2:	08 95       	ret

00000db4 <__fp_inf>:
 db4:	97 f9       	bld	r25, 7
 db6:	9f 67       	ori	r25, 0x7F	; 127
 db8:	80 e8       	ldi	r24, 0x80	; 128
 dba:	70 e0       	ldi	r23, 0x00	; 0
 dbc:	60 e0       	ldi	r22, 0x00	; 0
 dbe:	08 95       	ret

00000dc0 <__fp_nan>:
 dc0:	9f ef       	ldi	r25, 0xFF	; 255
 dc2:	80 ec       	ldi	r24, 0xC0	; 192
 dc4:	08 95       	ret

00000dc6 <__fp_pscA>:
 dc6:	00 24       	eor	r0, r0
 dc8:	0a 94       	dec	r0
 dca:	16 16       	cp	r1, r22
 dcc:	17 06       	cpc	r1, r23
 dce:	18 06       	cpc	r1, r24
 dd0:	09 06       	cpc	r0, r25
 dd2:	08 95       	ret

00000dd4 <__fp_pscB>:
 dd4:	00 24       	eor	r0, r0
 dd6:	0a 94       	dec	r0
 dd8:	12 16       	cp	r1, r18
 dda:	13 06       	cpc	r1, r19
 ddc:	14 06       	cpc	r1, r20
 dde:	05 06       	cpc	r0, r21
 de0:	08 95       	ret

00000de2 <__fp_round>:
 de2:	09 2e       	mov	r0, r25
 de4:	03 94       	inc	r0
 de6:	00 0c       	add	r0, r0
 de8:	11 f4       	brne	.+4      	; 0xdee <__fp_round+0xc>
 dea:	88 23       	and	r24, r24
 dec:	52 f0       	brmi	.+20     	; 0xe02 <__fp_round+0x20>
 dee:	bb 0f       	add	r27, r27
 df0:	40 f4       	brcc	.+16     	; 0xe02 <__fp_round+0x20>
 df2:	bf 2b       	or	r27, r31
 df4:	11 f4       	brne	.+4      	; 0xdfa <__fp_round+0x18>
 df6:	60 ff       	sbrs	r22, 0
 df8:	04 c0       	rjmp	.+8      	; 0xe02 <__fp_round+0x20>
 dfa:	6f 5f       	subi	r22, 0xFF	; 255
 dfc:	7f 4f       	sbci	r23, 0xFF	; 255
 dfe:	8f 4f       	sbci	r24, 0xFF	; 255
 e00:	9f 4f       	sbci	r25, 0xFF	; 255
 e02:	08 95       	ret

00000e04 <__fp_split3>:
 e04:	57 fd       	sbrc	r21, 7
 e06:	90 58       	subi	r25, 0x80	; 128
 e08:	44 0f       	add	r20, r20
 e0a:	55 1f       	adc	r21, r21
 e0c:	59 f0       	breq	.+22     	; 0xe24 <__fp_splitA+0x10>
 e0e:	5f 3f       	cpi	r21, 0xFF	; 255
 e10:	71 f0       	breq	.+28     	; 0xe2e <__fp_splitA+0x1a>
 e12:	47 95       	ror	r20

00000e14 <__fp_splitA>:
 e14:	88 0f       	add	r24, r24
 e16:	97 fb       	bst	r25, 7
 e18:	99 1f       	adc	r25, r25
 e1a:	61 f0       	breq	.+24     	; 0xe34 <__fp_splitA+0x20>
 e1c:	9f 3f       	cpi	r25, 0xFF	; 255
 e1e:	79 f0       	breq	.+30     	; 0xe3e <__fp_splitA+0x2a>
 e20:	87 95       	ror	r24
 e22:	08 95       	ret
 e24:	12 16       	cp	r1, r18
 e26:	13 06       	cpc	r1, r19
 e28:	14 06       	cpc	r1, r20
 e2a:	55 1f       	adc	r21, r21
 e2c:	f2 cf       	rjmp	.-28     	; 0xe12 <__fp_split3+0xe>
 e2e:	46 95       	lsr	r20
 e30:	f1 df       	rcall	.-30     	; 0xe14 <__fp_splitA>
 e32:	08 c0       	rjmp	.+16     	; 0xe44 <__fp_splitA+0x30>
 e34:	16 16       	cp	r1, r22
 e36:	17 06       	cpc	r1, r23
 e38:	18 06       	cpc	r1, r24
 e3a:	99 1f       	adc	r25, r25
 e3c:	f1 cf       	rjmp	.-30     	; 0xe20 <__fp_splitA+0xc>
 e3e:	86 95       	lsr	r24
 e40:	71 05       	cpc	r23, r1
 e42:	61 05       	cpc	r22, r1
 e44:	08 94       	sec
 e46:	08 95       	ret

00000e48 <__fp_zero>:
 e48:	e8 94       	clt

00000e4a <__fp_szero>:
 e4a:	bb 27       	eor	r27, r27
 e4c:	66 27       	eor	r22, r22
 e4e:	77 27       	eor	r23, r23
 e50:	cb 01       	movw	r24, r22
 e52:	97 f9       	bld	r25, 7
 e54:	08 95       	ret

00000e56 <__udivmodsi4>:
 e56:	a1 e2       	ldi	r26, 0x21	; 33
 e58:	1a 2e       	mov	r1, r26
 e5a:	aa 1b       	sub	r26, r26
 e5c:	bb 1b       	sub	r27, r27
 e5e:	fd 01       	movw	r30, r26
 e60:	0d c0       	rjmp	.+26     	; 0xe7c <__udivmodsi4_ep>

00000e62 <__udivmodsi4_loop>:
 e62:	aa 1f       	adc	r26, r26
 e64:	bb 1f       	adc	r27, r27
 e66:	ee 1f       	adc	r30, r30
 e68:	ff 1f       	adc	r31, r31
 e6a:	a2 17       	cp	r26, r18
 e6c:	b3 07       	cpc	r27, r19
 e6e:	e4 07       	cpc	r30, r20
 e70:	f5 07       	cpc	r31, r21
 e72:	20 f0       	brcs	.+8      	; 0xe7c <__udivmodsi4_ep>
 e74:	a2 1b       	sub	r26, r18
 e76:	b3 0b       	sbc	r27, r19
 e78:	e4 0b       	sbc	r30, r20
 e7a:	f5 0b       	sbc	r31, r21

00000e7c <__udivmodsi4_ep>:
 e7c:	66 1f       	adc	r22, r22
 e7e:	77 1f       	adc	r23, r23
 e80:	88 1f       	adc	r24, r24
 e82:	99 1f       	adc	r25, r25
 e84:	1a 94       	dec	r1
 e86:	69 f7       	brne	.-38     	; 0xe62 <__udivmodsi4_loop>
 e88:	60 95       	com	r22
 e8a:	70 95       	com	r23
 e8c:	80 95       	com	r24
 e8e:	90 95       	com	r25
 e90:	9b 01       	movw	r18, r22
 e92:	ac 01       	movw	r20, r24
 e94:	bd 01       	movw	r22, r26
 e96:	cf 01       	movw	r24, r30
 e98:	08 95       	ret

00000e9a <__tablejump2__>:
 e9a:	ee 0f       	add	r30, r30
 e9c:	ff 1f       	adc	r31, r31
 e9e:	05 90       	lpm	r0, Z+
 ea0:	f4 91       	lpm	r31, Z
 ea2:	e0 2d       	mov	r30, r0
 ea4:	09 94       	ijmp

00000ea6 <__muluhisi3>:
 ea6:	0e 94 5e 07 	call	0xebc	; 0xebc <__umulhisi3>
 eaa:	a5 9f       	mul	r26, r21
 eac:	90 0d       	add	r25, r0
 eae:	b4 9f       	mul	r27, r20
 eb0:	90 0d       	add	r25, r0
 eb2:	a4 9f       	mul	r26, r20
 eb4:	80 0d       	add	r24, r0
 eb6:	91 1d       	adc	r25, r1
 eb8:	11 24       	eor	r1, r1
 eba:	08 95       	ret

00000ebc <__umulhisi3>:
 ebc:	a2 9f       	mul	r26, r18
 ebe:	b0 01       	movw	r22, r0
 ec0:	b3 9f       	mul	r27, r19
 ec2:	c0 01       	movw	r24, r0
 ec4:	a3 9f       	mul	r26, r19
 ec6:	70 0d       	add	r23, r0
 ec8:	81 1d       	adc	r24, r1
 eca:	11 24       	eor	r1, r1
 ecc:	91 1d       	adc	r25, r1
 ece:	b2 9f       	mul	r27, r18
 ed0:	70 0d       	add	r23, r0
 ed2:	81 1d       	adc	r24, r1
 ed4:	11 24       	eor	r1, r1
 ed6:	91 1d       	adc	r25, r1
 ed8:	08 95       	ret

00000eda <_exit>:
 eda:	f8 94       	cli

00000edc <__stop_program>:
 edc:	ff cf       	rjmp	.-2      	; 0xedc <__stop_program>
